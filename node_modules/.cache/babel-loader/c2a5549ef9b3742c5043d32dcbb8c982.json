{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tilak\\\\OneDrive\\\\Documents\\\\GitHub\\\\pwa-for-rde-test\\\\src\\\\components\\\\WatchTracker.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport useInterval from \"../hooks/useInterval\";\nimport StartStopButton from \"./StartStopButton\";\nimport Timer from \"react-compound-timer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst haversine = require('haversine');\n\nfunction WatchTracker() {\n  _s();\n\n  let id, options;\n  let urbanMax = 33;\n  let ruralMax = 55;\n  let motorwayMax = 80;\n  let uMaxShare = 40; //[%]\n\n  let uMinShare = 5;\n  let rMaxShare = 40;\n  let rMinShare = 5;\n  let mMaxShare = 40;\n  let mMinShare = 5;\n  let urmMinDistShare = 0.2; //[km]\n\n  let maxAltChange = 100;\n  let maxTestTime = 15; //[min]\n\n  let minTestTime = 6; //[min]\n\n  const [minTimeReached, setMinTimeReached] = useState(false);\n  const [maxTimeReached, setMaxTimeReached] = useState(false);\n  let coldStartEnd = 1; //[min]\n\n  const [isColdStart, setIsColdStart] = useState(true);\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [accuracy, setAccuracy] = useState(0);\n  const [gpsSpeed, setGpsSpeed] = useState(0);\n  const [altitude, setAltitude] = useState(0);\n  const [timestamp, setTimestamp] = useState(0);\n  const [distance, setDistance] = useState(0);\n  const [speed, setSpeed] = useState(0);\n  const [urbanDist, setUrbanDist] = useState(0);\n  const [ruralDist, setRuralDist] = useState(0);\n  const [motorwayDist, setMotorwayDist] = useState(0);\n  const [urbanShare, setUrbanShare] = useState(0);\n  const [ruralShare, setRuralShare] = useState(0);\n  const [motorwayShare, setMotorwayShare] = useState(0);\n  const [phase, setPhase] = useState(\"Pre-Test\");\n  const [testStatus, setTestStatus] = useState(0); // 0 = PRE-TEST\n  // 1 = IN-PROGRESS\n  // 2 = PASS\n  // 3 = FAIL <----- CHANGE THE ONES SET TO 3!!!!!!!!!!!\n\n  const errorStatus = [\"LOW TIME!\", \"HIGH TIME!\", \"U MIN DISTANCE!\", \"R MIN DISTANCE!\", \"M MIN DISTANCE!\", \"U MIN SHARE!\", \"U MAX SHARE!\", \"R MIN SHARE!\", \"R MAX SHARE!\", \"M MIN SHARE!\", \"M MAX SHARE!\", \"MAX ALTITUDE CHANGE!\"];\n  const [coordinates, setCoordinates] = useState([0, 0, 0, 0, 0, 0, 0]);\n  const [index, setIndex] = useState(0);\n  const [isOn, setIsOn] = useState(false);\n\n  function success(pos) {\n    setLatitude(pos.coords.latitude);\n    setLongitude(pos.coords.longitude);\n    setAccuracy(pos.coords.accuracy);\n    setGpsSpeed(pos.coords.speed);\n    setAltitude(pos.coords.altitude);\n    setTimestamp(pos.timestamp);\n    setTestStatus(1);\n  }\n\n  useInterval(() => {\n    setGpsSpeed(gpsSpeed === null ? 0 : gpsSpeed); // set to 0 to mask null value\n\n    setCoordinates(coordinates.concat(...[latitude, longitude, altitude, speed, gpsSpeed, timestamp, accuracy]));\n    console.log(JSON.stringify(coordinates));\n    localStorage.setItem(\"coordinates\", JSON.stringify(coordinates)); // log lats and longs (new):\n    // console.log(\"🔃 \" + latitude)\n    // console.log(\"🔁 \" + longitude)\n\n    let end = {\n      latitude: latitude,\n      longitude: longitude\n    };\n    let oldLat = coordinates[index];\n    let oldLng = coordinates[index + 1];\n    setIndex(i => i + 7);\n    let start = {\n      latitude: oldLat,\n      longitude: oldLng\n    }; // log lats and longs (old):\n    // console.log(\"🔃old \" + start.latitude)\n    // console.log(\"🔁old \" + start.longitude)\n\n    let havDis = haversine(start, end, {\n      unit: 'km'\n    });\n\n    if (start.latitude === 0 && start.longitude === 0) {\n      return;\n    }\n\n    setDistance(prev => prev + havDis); // log cumulative distance:\n\n    console.log(\"💨 \" + distance);\n    let startTime = coordinates[index - 2];\n    let endTime = timestamp;\n    let deltaT = (endTime - startTime) / 3.6e+6; // ms -> hr;\n\n    deltaT = deltaT === 0 ? 1 : deltaT; // set to 1 to mask NaN error\n\n    console.log(\"⏳ \" + deltaT);\n\n    if (havDis > 0) {\n      setSpeed(havDis / deltaT);\n    }\n\n    ;\n\n    if (speed === 0 && isOn === false) {\n      setPhase(\"Pre-Test\");\n    } else if (isColdStart === true) {\n      setPhase(\"Cold Start\");\n    } else if (speed < urbanMax) {\n      setPhase(\"U\");\n    } else if (speed < ruralMax) {\n      setPhase(\"R\");\n    } else if (speed < motorwayMax) {\n      setPhase(\"M\");\n    } else {\n      setPhase(\"EXTREME\");\n    }\n\n    if (speed < urbanMax) {\n      setUrbanDist(prev => prev + havDis);\n    } else if (speed < ruralMax) {\n      setRuralDist(prev => prev + havDis);\n    } else if (speed < motorwayMax) {\n      setMotorwayDist(prev => prev + havDis);\n    } else if (speed > motorwayMax) {\n      setTestStatus(3);\n    }\n\n    setUrbanShare(distance === 0 ? 0 : urbanDist / distance * 100);\n    setRuralShare(distance === 0 ? 0 : ruralDist / distance * 100);\n    setMotorwayShare(distance === 0 ? 0 : motorwayDist / distance * 100); // BC VERIFICATION\n    // Time\n\n    if (!minTimeReached) {\n      setTestStatus(4);\n    } else {\n      setTestStatus(2);\n    }\n\n    if (maxTimeReached) {\n      setTestStatus(5);\n      stopWatch();\n    } // Distance\n\n\n    if (urbanDist < urmMinDistShare) {\n      setTestStatus(6);\n    }\n\n    if (ruralDist < urmMinDistShare) {\n      setTestStatus(7);\n    }\n\n    if (motorwayDist < urmMinDistShare) {\n      setTestStatus(8);\n    }\n\n    if (urbanDist > urmMinDistShare && ruralDist > urmMinDistShare && motorwayDist > urmMinDistShare) {\n      setTestStatus(2);\n    } // Distance Share\n\n\n    if (urbanDist > uMaxShare) {\n      setTestStatus();\n    } // Break on Max Errors (5, 10, 12, 14, 15) \n\n  }, isOn ? 500 : null);\n\n  function error(err) {\n    console.warn('ERROR(' + err.code + '): ' + err.message);\n  }\n\n  options = {\n    enableHighAccuracy: true,\n    maximumAge: 0\n  };\n\n  function startWatch() {\n    // console.log(\"Starting Watch.\")\n    if (\"geolocation\" in navigator && \"watchPosition\" in navigator.geolocation) {\n      id = navigator.geolocation.watchPosition(success, error, options);\n    } else {\n      console.log(\"Geolocation not available.\");\n    }\n  }\n\n  function stopWatch() {\n    // console.log(\"Stopping Watch.\");\n    navigator.geolocation.clearWatch(id);\n\n    if (testStatus === 3) {\n      console.log(\"!TEST HAS FAILED!\");\n    } else if (testStatus > 3) {\n      console.log(\"!TEST HAS FAILED!\");\n      console.log(errorStatus[testStatus - 4]);\n      setTestStatus(3);\n    } else if (testStatus) {\n      console.log(\"Test Passed.\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"[TEST 8c]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Timer, {\n      initialTime: 0,\n      startImmediately: false,\n      lastUnit: \"m\",\n      checkpoints: [{\n        time: coldStartEnd * 60000,\n        callback: () => setIsColdStart(false)\n      }, {\n        time: maxTestTime * 60000,\n        callback: () => setMaxTimeReached(true)\n      }, {\n        time: minTestTime * 60000,\n        callback: () => setMinTimeReached(true)\n      }],\n      onStart: () => {\n        // console.log('onStart hook');\n        startWatch();\n        setIsOn(true);\n        setTestStatus(1);\n      },\n      onStop: () => {\n        // console.log('onStop hook');\n        stopWatch();\n        setIsOn(false);\n        setPhase(\"Post-Test\");\n      },\n      onReset: () => {\n        // console.log('onReset hook')\n        stopWatch();\n        setCoordinates([0, 0, 0, 0, 0, 0, 0]);\n        setIndex(0);\n        setUrbanDist(0);\n        setRuralDist(0);\n        setMotorwayDist(0);\n        setUrbanShare(0);\n        setRuralShare(0);\n        setMotorwayShare(0);\n        setAccuracy(0);\n        setSpeed(0);\n        setGpsSpeed(0);\n        setPhase(\"Pre-Test\");\n        setTestStatus(0);\n        setDistance(0);\n        console.log(\"Reset.\"); // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\n      },\n      children: ({\n        start,\n        resume,\n        pause,\n        stop,\n        reset,\n        timerState\n      }) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Timer.Minutes, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }, this), \" Min\\xA0\", /*#__PURE__*/_jsxDEV(Timer.Seconds, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }, this), \" Sec\\xA0\", /*#__PURE__*/_jsxDEV(StartStopButton, {\n          startWatch: start,\n          stopWatch: stop,\n          resetWatch: reset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: reset,\n          disabled: isOn,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Speed (Derived) [km/h]/[mph] :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: [Math.round(speed * 10) / 10, \", \", Math.round(speed / 1.609344498 * 10) / 10, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Distance Shares (U,R,M) [km]:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: [Math.round(urbanDist * 1000) / 1000, \", \", Math.round(ruralDist * 1000) / 1000, \", \", Math.round(motorwayDist * 1000) / 1000]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Trip segment (U,R,M):\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: phase\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"% Shares (U,R,M) [km]:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: [Math.round(urbanShare), \", \", Math.round(ruralShare), \", \", Math.round(motorwayShare)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"GPS Accuracy [m], Cumulative Distance [km]:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: [accuracy === null ? 0 : Math.round(accuracy * 10) / 10, \", \", distance === 0 ? 0 : Math.round(distance * 100) / 100]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Test Status (P/F):\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: [testStatus === 3 && \"FAIL\", \" \", testStatus === 2 && \"PASS\", \" \", isOn === 1 && \"IN PROGRESS\", \" \", testStatus === 0 && \"PRE-TEST\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WatchTracker, \"xdSlga/5BuCp4gnoYLaEHnm5g8U=\", false, function () {\n  return [useInterval];\n});\n\n_c = WatchTracker;\nexport default WatchTracker;\n\nvar _c;\n\n$RefreshReg$(_c, \"WatchTracker\");","map":{"version":3,"sources":["C:/Users/tilak/OneDrive/Documents/GitHub/pwa-for-rde-test/src/components/WatchTracker.js"],"names":["React","useState","useInterval","StartStopButton","Timer","haversine","require","WatchTracker","id","options","urbanMax","ruralMax","motorwayMax","uMaxShare","uMinShare","rMaxShare","rMinShare","mMaxShare","mMinShare","urmMinDistShare","maxAltChange","maxTestTime","minTestTime","minTimeReached","setMinTimeReached","maxTimeReached","setMaxTimeReached","coldStartEnd","isColdStart","setIsColdStart","latitude","setLatitude","longitude","setLongitude","accuracy","setAccuracy","gpsSpeed","setGpsSpeed","altitude","setAltitude","timestamp","setTimestamp","distance","setDistance","speed","setSpeed","urbanDist","setUrbanDist","ruralDist","setRuralDist","motorwayDist","setMotorwayDist","urbanShare","setUrbanShare","ruralShare","setRuralShare","motorwayShare","setMotorwayShare","phase","setPhase","testStatus","setTestStatus","errorStatus","coordinates","setCoordinates","index","setIndex","isOn","setIsOn","success","pos","coords","concat","console","log","JSON","stringify","localStorage","setItem","end","oldLat","oldLng","i","start","havDis","unit","prev","startTime","endTime","deltaT","stopWatch","error","err","warn","code","message","enableHighAccuracy","maximumAge","startWatch","navigator","geolocation","watchPosition","clearWatch","time","callback","resume","pause","stop","reset","timerState","Math","round"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport useInterval from \"../hooks/useInterval\";\r\nimport StartStopButton from \"./StartStopButton\";\r\nimport Timer from \"react-compound-timer\";\r\n\r\nconst haversine = require('haversine')\r\n\r\nfunction WatchTracker() {\r\n  let id, options;\r\n\r\n  let urbanMax = 33;\r\n  let ruralMax = 55;\r\n  let motorwayMax = 80;\r\n\r\n  let uMaxShare = 40; //[%]\r\n  let uMinShare = 5;\r\n  let rMaxShare = 40;\r\n  let rMinShare = 5;\r\n  let mMaxShare = 40;\r\n  let mMinShare = 5;\r\n\r\n  let urmMinDistShare = 0.2; //[km]\r\n\r\n  let maxAltChange = 100;\r\n\r\n  let maxTestTime = 15; //[min]\r\n  let minTestTime = 6; //[min]\r\n  const [minTimeReached, setMinTimeReached] = useState(false);\r\n  const [maxTimeReached, setMaxTimeReached] = useState(false);\r\n\r\n  let coldStartEnd = 1; //[min]\r\n  const [isColdStart, setIsColdStart] = useState(true);\r\n\r\n  const [latitude, setLatitude] = useState(0);\r\n  const [longitude, setLongitude] = useState(0);\r\n  const [accuracy, setAccuracy] = useState(0);\r\n  const [gpsSpeed, setGpsSpeed] = useState(0);\r\n  const [altitude, setAltitude] = useState(0);\r\n  const [timestamp, setTimestamp] = useState(0);\r\n\r\n  const [distance, setDistance] = useState(0);\r\n  const [speed, setSpeed] = useState(0);\r\n\r\n  const [urbanDist, setUrbanDist] = useState(0);\r\n  const [ruralDist, setRuralDist] = useState(0);\r\n  const [motorwayDist, setMotorwayDist] = useState(0);\r\n\r\n  const [urbanShare, setUrbanShare] = useState(0);\r\n  const [ruralShare, setRuralShare] = useState(0);\r\n  const [motorwayShare, setMotorwayShare] = useState(0);\r\n\r\n  const [phase, setPhase] = useState(\"Pre-Test\");\r\n\r\n  const [testStatus, setTestStatus] = useState(0);\r\n  // 0 = PRE-TEST\r\n  // 1 = IN-PROGRESS\r\n  // 2 = PASS\r\n  // 3 = FAIL <----- CHANGE THE ONES SET TO 3!!!!!!!!!!!\r\n\r\n  const errorStatus = [\r\n    \"LOW TIME!\",\r\n    \"HIGH TIME!\",\r\n    \"U MIN DISTANCE!\",\r\n    \"R MIN DISTANCE!\",\r\n    \"M MIN DISTANCE!\",\r\n    \"U MIN SHARE!\",\r\n    \"U MAX SHARE!\",\r\n    \"R MIN SHARE!\",\r\n    \"R MAX SHARE!\",\r\n    \"M MIN SHARE!\",\r\n    \"M MAX SHARE!\",\r\n    \"MAX ALTITUDE CHANGE!\",\r\n  ]\r\n\r\n  const [coordinates, setCoordinates] = useState([0, 0, 0, 0, 0, 0, 0]);\r\n\r\n  const [index, setIndex] = useState(0);\r\n\r\n  const [isOn, setIsOn] = useState(false);\r\n\r\n  function success(pos) {\r\n    setLatitude(pos.coords.latitude);\r\n    setLongitude(pos.coords.longitude);\r\n    setAccuracy(pos.coords.accuracy);\r\n    setGpsSpeed(pos.coords.speed);\r\n    setAltitude(pos.coords.altitude);\r\n    setTimestamp(pos.timestamp);\r\n\r\n    setTestStatus(1)\r\n  }\r\n\r\n  useInterval(() => {\r\n    setGpsSpeed((gpsSpeed === null) ? 0 : gpsSpeed); // set to 0 to mask null value\r\n    setCoordinates(\r\n      coordinates.concat(...[\r\n        latitude,\r\n        longitude,\r\n        altitude,\r\n        speed,\r\n        gpsSpeed,\r\n        timestamp,\r\n        accuracy\r\n      ])\r\n    )\r\n\r\n    console.log(JSON.stringify(coordinates));\r\n    localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n\r\n    // log lats and longs (new):\r\n    // console.log(\"🔃 \" + latitude)\r\n    // console.log(\"🔁 \" + longitude)\r\n\r\n    let end = {\r\n      latitude: latitude,\r\n      longitude: longitude,\r\n    }\r\n\r\n    let oldLat = coordinates[index];\r\n    let oldLng = coordinates[index + 1];\r\n\r\n    setIndex(i => i + 7)\r\n\r\n    let start = {\r\n      latitude: oldLat,\r\n      longitude: oldLng,\r\n    }\r\n\r\n    // log lats and longs (old):\r\n    // console.log(\"🔃old \" + start.latitude)\r\n    // console.log(\"🔁old \" + start.longitude)\r\n\r\n\r\n    let havDis = haversine(start, end, { unit: 'km' })\r\n\r\n    if (start.latitude === 0 && start.longitude === 0) {\r\n      return\r\n    }\r\n\r\n    setDistance(prev => prev + havDis);\r\n\r\n    // log cumulative distance:\r\n    console.log(\"💨 \" + distance);\r\n\r\n    let startTime = coordinates[index - 2];\r\n    let endTime = timestamp;\r\n    let deltaT = (endTime - startTime) / 3.6e+6; // ms -> hr;\r\n    deltaT = (deltaT === 0) ? 1 : deltaT; // set to 1 to mask NaN error\r\n\r\n    console.log(\"⏳ \" + deltaT)\r\n\r\n    if (havDis > 0) { setSpeed(havDis / deltaT) };\r\n\r\n    if (speed === 0 && isOn === false) {\r\n      setPhase(\"Pre-Test\")\r\n    } else if (isColdStart === true) {\r\n      setPhase(\"Cold Start\")\r\n    } else if (speed < urbanMax) {\r\n      setPhase(\"U\");\r\n    } else if (speed < ruralMax) {\r\n      setPhase(\"R\");\r\n    } else if (speed < motorwayMax) {\r\n      setPhase(\"M\")\r\n    } else {\r\n      setPhase(\"EXTREME\")\r\n    }\r\n\r\n    if (speed < urbanMax) {\r\n      setUrbanDist(prev => prev + havDis);\r\n    } else if (speed < ruralMax) {\r\n      setRuralDist(prev => prev + havDis);\r\n    } else if (speed < motorwayMax) {\r\n      setMotorwayDist(prev => prev + havDis)\r\n    } else if (speed > motorwayMax) {\r\n      setTestStatus(3);\r\n    }\r\n\r\n    setUrbanShare(distance === 0 ? 0 : (urbanDist / distance) * 100);\r\n    setRuralShare(distance === 0 ? 0 : (ruralDist / distance) * 100);\r\n    setMotorwayShare(distance === 0 ? 0 : (motorwayDist / distance) * 100);\r\n\r\n\r\n    // BC VERIFICATION\r\n    // Time\r\n    if (!minTimeReached) {\r\n      setTestStatus(4);\r\n    } else { setTestStatus(2); }\r\n    if (maxTimeReached) {\r\n      setTestStatus(5);\r\n      stopWatch()\r\n    }\r\n\r\n    // Distance\r\n    if (urbanDist < urmMinDistShare) {\r\n      setTestStatus(6);\r\n    }\r\n    if (ruralDist < urmMinDistShare) {\r\n      setTestStatus(7);\r\n    }\r\n    if (motorwayDist < urmMinDistShare) {\r\n      setTestStatus(8);\r\n    }\r\n\r\n    if (urbanDist > urmMinDistShare && ruralDist > urmMinDistShare && motorwayDist > urmMinDistShare) {\r\n      setTestStatus(2);\r\n    }\r\n\r\n    // Distance Share\r\n    if (urbanDist > uMaxShare) {\r\n      setTestStatus();\r\n    }\r\n\r\n    // Break on Max Errors (5, 10, 12, 14, 15) \r\n\r\n\r\n  }, isOn ? 500 : null\r\n  )\r\n\r\n  function error(err) {\r\n    console.warn('ERROR(' + err.code + '): ' + err.message);\r\n  }\r\n\r\n  options = {\r\n    enableHighAccuracy: true,\r\n    maximumAge: 0\r\n  };\r\n\r\n  function startWatch() {\r\n    // console.log(\"Starting Watch.\")\r\n    if (\"geolocation\" in navigator && \"watchPosition\" in navigator.geolocation) {\r\n      id = navigator.geolocation.watchPosition(success, error, options);\r\n    } else {\r\n      console.log(\"Geolocation not available.\")\r\n    }\r\n  }\r\n\r\n  function stopWatch() {\r\n    // console.log(\"Stopping Watch.\");\r\n    navigator.geolocation.clearWatch(id);\r\n\r\n    if (testStatus === 3) {\r\n      console.log(\"!TEST HAS FAILED!\");\r\n    } else if (testStatus > 3) {\r\n      console.log(\"!TEST HAS FAILED!\");\r\n      console.log(errorStatus[testStatus - 4]);\r\n      setTestStatus(3);\r\n    } else if (testStatus) { console.log(\"Test Passed.\") }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>[TEST 8c]</div>\r\n      <Timer\r\n        initialTime={0}\r\n        startImmediately={false}\r\n        lastUnit=\"m\"\r\n        checkpoints={[\r\n          {\r\n            time: coldStartEnd * 60000,\r\n            callback: () => setIsColdStart(false),\r\n          },\r\n          {\r\n            time: maxTestTime * 60000,\r\n            callback: () => setMaxTimeReached(true),\r\n          },\r\n          {\r\n            time: minTestTime * 60000,\r\n            callback: () => setMinTimeReached(true),\r\n          }\r\n        ]}\r\n        onStart={() => {\r\n          // console.log('onStart hook');\r\n          startWatch();\r\n          setIsOn(true);\r\n          setTestStatus(1);\r\n        }}\r\n        onStop={() => {\r\n          // console.log('onStop hook');\r\n          stopWatch();\r\n          setIsOn(false);\r\n          setPhase(\"Post-Test\");\r\n        }}\r\n        onReset={() => {\r\n          // console.log('onReset hook')\r\n          stopWatch();\r\n          setCoordinates([0, 0, 0, 0, 0, 0, 0]);\r\n          setIndex(0);\r\n          setUrbanDist(0);\r\n          setRuralDist(0);\r\n          setMotorwayDist(0);\r\n          setUrbanShare(0);\r\n          setRuralShare(0);\r\n          setMotorwayShare(0);\r\n          setAccuracy(0);\r\n          setSpeed(0);\r\n          setGpsSpeed(0);\r\n          setPhase(\"Pre-Test\");\r\n          setTestStatus(0);\r\n          setDistance(0);\r\n          console.log(\"Reset.\")\r\n          // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n        }}\r\n      >\r\n        {({ start, resume, pause, stop, reset, timerState }) => (\r\n          <React.Fragment>\r\n            <Timer.Minutes /> Min&nbsp;\r\n            <Timer.Seconds /> Sec&nbsp;\r\n            <StartStopButton startWatch={start} stopWatch={stop} resetWatch={reset} />\r\n            <button onClick={reset} disabled={isOn}>Reset</button>\r\n          </React.Fragment>\r\n        )}\r\n      </Timer>\r\n      <div>Speed (Derived) [km/h]/[mph] :</div>\r\n      <div className=\"Data-Label\">{Math.round(speed * 10) / 10}, {Math.round((speed / 1.609344498) * 10) / 10} </div>\r\n      <div>Distance Shares (U,R,M) [km]:</div>\r\n      <div className=\"Data-Label\">{Math.round(urbanDist * 1000) / 1000}, {Math.round(ruralDist * 1000) / 1000}, {Math.round(motorwayDist * 1000) / 1000}</div>\r\n      <div>Trip segment (U,R,M):</div>\r\n      <div className=\"Data-Label\">\r\n        {phase}\r\n      </div>\r\n      <div>% Shares (U,R,M) [km]:</div>\r\n      <div className=\"Data-Label\">{Math.round(urbanShare)}, {Math.round(ruralShare)}, {Math.round(motorwayShare)}</div>\r\n      <div>GPS Accuracy [m], Cumulative Distance [km]:</div>\r\n      <div className=\"Data-Label\">{accuracy === null ? 0 : Math.round(accuracy * 10) / 10}, {distance === 0 ? 0 : Math.round(distance * 100) / 100}</div>\r\n      <div>Test Status (P/F):</div>\r\n      <div className=\"Data-Label\">{testStatus === 3 && \"FAIL\"} {testStatus === 2 && \"PASS\"} {isOn === 1 && \"IN PROGRESS\"} {testStatus === 0 && \"PRE-TEST\"}</div>\r\n    </React.Fragment>\r\n  )\r\n\r\n}\r\n\r\nexport default WatchTracker"]},"metadata":{},"sourceType":"module"}