{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tilak\\\\OneDrive\\\\Documents\\\\GitHub\\\\pwa-for-rde-test\\\\src\\\\components\\\\MyTimer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Timer from 'react-compound-timer';\nimport StartStopButton from './StartStopButton';\nimport useInterval from '../hooks/useInterval';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyTimer = () => {\n  _s();\n\n  const [delay, setDelay] = useState(1000);\n  const [isOn, setIsOn] = useState(false);\n  let coordinates = [];\n  let [speed, setSpeed] = useState(0);\n  let [altitude, setAltitude] = useState(0); // let [distance, setDistance] = useState(0);\n\n  let [latitude, setLatitude] = useState(0);\n  let [longitude, setLongitude] = useState(0);\n  useEffect(() => {\n    console.log(`Latitude Updated: ${latitude}`);\n  }, [latitude]);\n  useEffect(() => {\n    console.log(`Longitude Updated: ${longitude}`);\n  }, [longitude]);\n  useInterval(() => {\n    if (\"geolocation\" in navigator && \"getCurrentPosition\" in navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(pos => {\n        setLatitude(pos.coords.latitude);\n        setLongitude(pos.coords.longitude);\n        setAltitude(pos.coords.altitude);\n        setSpeed(pos.coords.speed);\n        coordinates.push([latitude, longitude, altitude, speed]);\n        console.log(coordinates);\n        console.log(localStorage.setItem(\"coordinates\", JSON.stringify(coordinates)));\n      }, () => {\n        console.log('err');\n      }, {\n        enableHighAccuracy: true,\n        maximumAge: 0\n      });\n    } else {\n      console.log(\"Geolocation not available!\");\n    }\n  }, isOn ? delay : null);\n  return /*#__PURE__*/_jsxDEV(Timer, {\n    initialTime: 0,\n    startImmediately: false,\n    onStart: () => {\n      console.log('onStart hook');\n      setIsOn(true);\n    },\n    onStop: () => {\n      console.log('onStop hook');\n      setIsOn(false);\n    },\n    onReset: () => {\n      console.log('onReset hook');\n      setIsOn(false); // Clear \n    },\n    children: ({\n      start,\n      resume,\n      pause,\n      stop,\n      reset,\n      timerState\n    }) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Timer.Hours, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this), \" hours\\xA0\", /*#__PURE__*/_jsxDEV(Timer.Minutes, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this), \" minutes\\xA0\", /*#__PURE__*/_jsxDEV(Timer.Seconds, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this), \" seconds\\xA0\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(StartStopButton, {\n          startWatch: start,\n          stopWatch: stop\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: reset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MyTimer, \"2iDUw8gaWplzfBhc34p6ScO8Q1U=\", false, function () {\n  return [useInterval];\n});\n\n_c = MyTimer;\nexport default MyTimer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyTimer\");","map":{"version":3,"sources":["C:/Users/tilak/OneDrive/Documents/GitHub/pwa-for-rde-test/src/components/MyTimer.js"],"names":["React","useState","useEffect","Timer","StartStopButton","useInterval","MyTimer","delay","setDelay","isOn","setIsOn","coordinates","speed","setSpeed","altitude","setAltitude","latitude","setLatitude","longitude","setLongitude","console","log","navigator","geolocation","getCurrentPosition","pos","coords","push","localStorage","setItem","JSON","stringify","enableHighAccuracy","maximumAge","start","resume","pause","stop","reset","timerState"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nimport Timer from 'react-compound-timer'\r\nimport StartStopButton from './StartStopButton'\r\nimport useInterval from '../hooks/useInterval'\r\n\r\nconst MyTimer = () => {\r\n\r\n    const [delay, setDelay] = useState(1000)\r\n    const [isOn, setIsOn] = useState(false)\r\n\r\n    let coordinates = [];\r\n\r\n    let [speed, setSpeed] = useState(0);\r\n    let [altitude, setAltitude] = useState(0);\r\n    // let [distance, setDistance] = useState(0);\r\n    let [latitude, setLatitude] = useState(0);\r\n    let [longitude, setLongitude] = useState(0);\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(`Latitude Updated: ${latitude}`)\r\n    }, [latitude])\r\n\r\n    useEffect(() => {\r\n        console.log(`Longitude Updated: ${longitude}`)\r\n    }, [longitude])\r\n\r\n    useInterval(() => {\r\n        if (\"geolocation\" in navigator && \"getCurrentPosition\" in navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                (pos) => {\r\n                    setLatitude(pos.coords.latitude);\r\n                    setLongitude(pos.coords.longitude);\r\n                    setAltitude(pos.coords.altitude);\r\n                    setSpeed(pos.coords.speed);\r\n\r\n                    coordinates.push([latitude, longitude, altitude, speed]);\r\n                    console.log(coordinates);\r\n                    console.log(localStorage.setItem(\"coordinates\", JSON.stringify(coordinates)));\r\n                },\r\n                () => { console.log('err') }\r\n                , {\r\n                    enableHighAccuracy: true,\r\n                    maximumAge: 0\r\n                });\r\n        } else {\r\n            console.log(\"Geolocation not available!\")\r\n        }\r\n    },\r\n        isOn ? delay : null,\r\n    )\r\n\r\n    return (\r\n        <Timer\r\n            initialTime={0}\r\n            startImmediately={false}\r\n            onStart={() => {\r\n                console.log('onStart hook');\r\n                setIsOn(true);\r\n            }}\r\n            onStop={() => {\r\n                console.log('onStop hook');\r\n                setIsOn(false);\r\n            }}\r\n            onReset={() => {\r\n                console.log('onReset hook')\r\n                setIsOn(false);\r\n                // Clear \r\n            }}\r\n            >\r\n            {({ start, resume, pause, stop, reset, timerState }) => (\r\n                <React.Fragment>\r\n                    <div>\r\n                        <Timer.Hours /> hours&nbsp;\r\n                        <Timer.Minutes /> minutes&nbsp;\r\n                        <Timer.Seconds /> seconds&nbsp;\r\n                    </div>\r\n                    <div>\r\n                        <StartStopButton startWatch={start} stopWatch={stop} />\r\n                        <button onClick={reset}>Reset</button>\r\n                    </div>\r\n                </React.Fragment>\r\n            )}\r\n        </Timer >\r\n    )\r\n}\r\n\r\nexport default MyTimer\r\n"]},"metadata":{},"sourceType":"module"}