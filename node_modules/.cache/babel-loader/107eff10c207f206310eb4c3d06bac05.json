{"ast":null,"code":"var haversine = function () {\n  var RADII = {\n    km: 6371,\n    mile: 3960,\n    meter: 6371000,\n    nmi: 3440\n  }; // convert to radians\n\n  var toRad = function (num) {\n    return num * Math.PI / 180;\n  }; // convert coordinates to standard format based on the passed format option\n\n\n  var convertCoordinates = function (format, coordinates) {\n    switch (format) {\n      case '[lat,lon]':\n        return {\n          latitude: coordinates[0],\n          longitude: coordinates[1]\n        };\n\n      case '[lon,lat]':\n        return {\n          latitude: coordinates[1],\n          longitude: coordinates[0]\n        };\n\n      case '{lon,lat}':\n        return {\n          latitude: coordinates.lat,\n          longitude: coordinates.lon\n        };\n\n      case '{lat,lng}':\n        return {\n          latitude: coordinates.lat,\n          longitude: coordinates.lng\n        };\n\n      case 'geojson':\n        return {\n          latitude: coordinates.geometry.coordinates[1],\n          longitude: coordinates.geometry.coordinates[0]\n        };\n\n      default:\n        return coordinates;\n    }\n  };\n\n  return function haversine(startCoordinates, endCoordinates, options) {\n    options = options || {};\n    var R = options.unit in RADII ? RADII[options.unit] : RADII.km;\n    var start = convertCoordinates(options.format, startCoordinates);\n    var end = convertCoordinates(options.format, endCoordinates);\n    var dLat = toRad(end.latitude - start.latitude);\n    var dLon = toRad(end.longitude - start.longitude);\n    var lat1 = toRad(start.latitude);\n    var lat2 = toRad(end.latitude);\n    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n    if (options.threshold) {\n      return options.threshold > R * c;\n    }\n\n    return R * c;\n  };\n}();\n\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = haversine;\n}","map":{"version":3,"sources":["C:/Users/tilak/OneDrive/Documents/GitHub/pwa-for-rde-test/node_modules/haversine/haversine.js"],"names":["haversine","RADII","km","mile","meter","nmi","toRad","num","Math","PI","convertCoordinates","format","coordinates","latitude","longitude","lat","lon","lng","geometry","startCoordinates","endCoordinates","options","R","unit","start","end","dLat","dLon","lat1","lat2","a","sin","cos","c","atan2","sqrt","threshold","module","exports"],"mappings":"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","sourcesContent":["var haversine = (function () {\n  var RADII = {\n    km:    6371,\n    mile:  3960,\n    meter: 6371000,\n    nmi:   3440\n  }\n\n  // convert to radians\n  var toRad = function (num) {\n    return num * Math.PI / 180\n  }\n\n  // convert coordinates to standard format based on the passed format option\n  var convertCoordinates = function (format, coordinates) {\n    switch (format) {\n    case '[lat,lon]':\n      return { latitude: coordinates[0], longitude: coordinates[1] }\n    case '[lon,lat]':\n      return { latitude: coordinates[1], longitude: coordinates[0] }\n    case '{lon,lat}':\n      return { latitude: coordinates.lat, longitude: coordinates.lon }\n    case '{lat,lng}':\n      return { latitude: coordinates.lat, longitude: coordinates.lng }\n    case 'geojson':\n      return { latitude: coordinates.geometry.coordinates[1], longitude: coordinates.geometry.coordinates[0] }\n    default:\n      return coordinates\n    }\n  }\n\n  return function haversine (startCoordinates, endCoordinates, options) {\n    options   = options || {}\n\n    var R = options.unit in RADII\n      ? RADII[options.unit]\n      : RADII.km\n\n    var start = convertCoordinates(options.format, startCoordinates)\n    var end = convertCoordinates(options.format, endCoordinates)\n\n    var dLat = toRad(end.latitude - start.latitude)\n    var dLon = toRad(end.longitude - start.longitude)\n    var lat1 = toRad(start.latitude)\n    var lat2 = toRad(end.latitude)\n\n    var a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n            Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2)\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))\n\n    if (options.threshold) {\n      return options.threshold > (R * c)\n    }\n\n    return R * c\n  }\n\n})()\n\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = haversine\n}\n"]},"metadata":{},"sourceType":"script"}