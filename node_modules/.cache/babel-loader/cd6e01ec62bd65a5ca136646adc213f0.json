{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef } from \"react\"; // Hook\n\nfunction usePrevious(value) {\n  _s();\n\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef(); // Store current value in ref\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n\n  return ref.current;\n}\n\n_s(usePrevious, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\nexport default usePrevious; // import { useRef, useEffect} from \"react\"\n// export const useIsMount = () => {\n//     const isMountRef = useRef(true);\n//     useEffect(() => {\n//         isMountRef.current = false;\n//     }, []);\n//     return isMountRef.current;\n// };","map":{"version":3,"sources":["C:/Users/tilak/OneDrive/Documents/GitHub/pwa-for-rde-test/src/hooks/usePrevious.js"],"names":["useEffect","useRef","usePrevious","value","ref","current"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC,C,CAEA;;AACA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AACxB;AACA;AACA,QAAMC,GAAG,GAAGH,MAAM,EAAlB,CAHwB,CAIxB;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,GAAG,CAACC,OAAJ,GAAcF,KAAd;AACH,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT,CALwB,CAOX;AACb;;AACA,SAAOC,GAAG,CAACC,OAAX;AACH;;GAVQH,W;;AAWT,eAAeA,WAAf,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { useEffect, useRef } from \"react\";\r\n\r\n// Hook\r\nfunction usePrevious(value) {\r\n    // The ref object is a generic container whose current property is mutable ...\r\n    // ... and can hold any value, similar to an instance property on a class\r\n    const ref = useRef();\r\n    // Store current value in ref\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    }, [value]); // Only re-run if value changes\r\n    // Return previous value (happens before update in useEffect above)\r\n    return ref.current;\r\n}\r\nexport default usePrevious\r\n\r\n// import { useRef, useEffect} from \"react\"\r\n\r\n// export const useIsMount = () => {\r\n//     const isMountRef = useRef(true);\r\n//     useEffect(() => {\r\n//         isMountRef.current = false;\r\n//     }, []);\r\n//     return isMountRef.current;\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}