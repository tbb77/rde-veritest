{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nfunction ReadLocation() {\n  _s();\n\n  const [location, setLocation] = useState(0);\n  const [error, setError] = useState();\n  const [accuracy, setAccuracy] = useState(0);\n\n  if (navigator.geolocation) {\n    const geoId = navigator.geolocation.watchPosition(position => {\n      const lat = position.coords.latitude;\n      const lng = position.coords.longitude;\n      setLocation({\n        lat,\n        lng\n      });\n      setAccuracy(position.coords.accuracy);\n      console.log(location, accuracy); // if (position.coords.accuracy > 10) {\n      //   console.log(\"The GPS accuracy isn't good enough\");\n      // }\n    }, e => {\n      setError(e.message);\n      console.log(error);\n    }, {\n      enableHighAccuracy: true,\n      maximumAge: 2000,\n      timeout: 5000\n    });\n    return () => {\n      console.log('Clear watch called');\n      window.navigator.geolocation.clearWatch(geoId);\n    };\n  }\n\n  return;\n}\n\n_s(ReadLocation, \"Qs+pdQHSsIi+HeZHuqEu6Y6Wj2g=\");\n\n_c = ReadLocation;\n;\nexport default ReadLocation;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadLocation\");","map":{"version":3,"sources":["C:/Users/tilak/OneDrive/Documents/GitHub/pwa-for-rde-test/src/components/TempTracker.js"],"names":["useState","ReadLocation","location","setLocation","error","setError","accuracy","setAccuracy","navigator","geolocation","geoId","watchPosition","position","lat","coords","latitude","lng","longitude","console","log","e","message","enableHighAccuracy","maximumAge","timeout","window","clearWatch"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,SAASC,YAAT,GAAwB;AAAA;;AAEtB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,EAAlC;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,CAAD,CAAxC;;AAEA,MAAIQ,SAAS,CAACC,WAAd,EAA2B;AACzB,UAAMC,KAAK,GAAGF,SAAS,CAACC,WAAV,CAAsBE,aAAtB,CACXC,QAAD,IAAc;AACZ,YAAMC,GAAG,GAAGD,QAAQ,CAACE,MAAT,CAAgBC,QAA5B;AACA,YAAMC,GAAG,GAAGJ,QAAQ,CAACE,MAAT,CAAgBG,SAA5B;AACAd,MAAAA,WAAW,CAAC;AAAEU,QAAAA,GAAF;AAAOG,QAAAA;AAAP,OAAD,CAAX;AACAT,MAAAA,WAAW,CAACK,QAAQ,CAACE,MAAT,CAAgBR,QAAjB,CAAX;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAYjB,QAAZ,EAAsBI,QAAtB,EALY,CAMZ;AACA;AACA;AACD,KAVW,EAWXc,CAAD,IAAO;AACLf,MAAAA,QAAQ,CAACe,CAAC,CAACC,OAAH,CAAR;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYf,KAAZ;AACD,KAdW,EAeZ;AAAEkB,MAAAA,kBAAkB,EAAE,IAAtB;AAA4BC,MAAAA,UAAU,EAAE,IAAxC;AAA8CC,MAAAA,OAAO,EAAE;AAAvD,KAfY,CAAd;AAiBA,WAAO,MAAM;AACXN,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAM,MAAAA,MAAM,CAACjB,SAAP,CAAiBC,WAAjB,CAA6BiB,UAA7B,CAAwChB,KAAxC;AACD,KAHD;AAID;;AAED;AACD;;GA/BQT,Y;;KAAAA,Y;AA+BR;AAED,eAAeA,YAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\nfunction ReadLocation() {\r\n\r\n  const [location, setLocation] = useState(0);\r\n  const [error, setError] = useState();\r\n  const [accuracy, setAccuracy] = useState(0);\r\n\r\n  if (navigator.geolocation) {\r\n    const geoId = navigator.geolocation.watchPosition(\r\n      (position) => {\r\n        const lat = position.coords.latitude;\r\n        const lng = position.coords.longitude;\r\n        setLocation({ lat, lng });\r\n        setAccuracy(position.coords.accuracy);\r\n        console.log(location, accuracy);\r\n        // if (position.coords.accuracy > 10) {\r\n        //   console.log(\"The GPS accuracy isn't good enough\");\r\n        // }\r\n      },\r\n      (e) => {\r\n        setError(e.message);\r\n        console.log(error);\r\n      },\r\n      { enableHighAccuracy: true, maximumAge: 2000, timeout: 5000 }\r\n    );\r\n    return () => {\r\n      console.log('Clear watch called');\r\n      window.navigator.geolocation.clearWatch(geoId);\r\n    };\r\n  }\r\n\r\n  return;\r\n};\r\n\r\nexport default ReadLocation;"]},"metadata":{},"sourceType":"module"}