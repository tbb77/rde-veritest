{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tilak\\\\OneDrive\\\\Documents\\\\GitHub\\\\pwa-for-rde-test\\\\src\\\\components\\\\WatchTracker.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport useInterval from \"../hooks/useInterval\";\nimport StartStopButton from \"./StartStopButton\";\nimport Timer from \"react-compound-timer\";\nimport Sound from \"react-sound\";\nimport startSound from \"../sounds/start.mp3\";\nimport stopSound from \"../sounds/stop.mp3\";\nimport failSound from \"../sounds/failSoft.mp3\";\nimport passSound from \"../sounds/pass.mp3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst haversine = require('haversine');\n\nfunction WatchTracker() {\n  _s();\n\n  const [startPlaying, setStartPlaying] = useState(false);\n  const [stopPlaying, setStopPlaying] = useState(false);\n  const [passPlaying, setPassPlaying] = useState(false);\n  const [failPlaying, setFailPlaying] = useState(false);\n  let id, options;\n  let dataRate = 500; //[ms]\n\n  let urbanMax = 33;\n  let ruralMax = 55;\n  let motorwayMax = 80;\n  let uMaxShare = 50; //[%]\n\n  let uMinShare = 5;\n  let rMaxShare = 40;\n  let rMinShare = 5;\n  let mMaxShare = 40;\n  let mMinShare = 5;\n  let urmMinDist = 0.2; //[km]\n\n  let maxAltChange = 100; //[m]\n\n  let maxTestTime = 15; //[min]\n\n  let minTestTime = 6; //[min]\n\n  const [minTimeReached, setMinTimeReached] = useState(false);\n  const [maxTimeReached, setMaxTimeReached] = useState(false);\n  let idleTime = 200; //[s]\n\n  const [idleIndex, setIdleIndex] = useState(0); //[s]\n\n  let coldStartEnd = 1; //[min]\n\n  const [isColdStart, setIsColdStart] = useState(true);\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [accuracy, setAccuracy] = useState(0);\n  const [gpsSpeed, setGpsSpeed] = useState(0);\n  const [altitude, setAltitude] = useState(0);\n  const [timestamp, setTimestamp] = useState(0);\n  const [startAlt, setStartAlt] = useState(0);\n  const [endAlt, setEndAlt] = useState(0);\n  const [distance, setDistance] = useState(0);\n  const [speed, setSpeed] = useState(0);\n  const [urbanDist, setUrbanDist] = useState(0);\n  const [ruralDist, setRuralDist] = useState(0);\n  const [motorwayDist, setMotorwayDist] = useState(0);\n  const [urbanShare, setUrbanShare] = useState(0);\n  const [ruralShare, setRuralShare] = useState(0);\n  const [motorwayShare, setMotorwayShare] = useState(0);\n  const [phase, setPhase] = useState(\"Pre-Test\");\n  const [testStatus, setTestStatus] = useState(0); // 0 = PRE-TEST\n  // 1 = IN-PROGRESS\n  // 2 = PASS\n  // 3 = FAIL \n\n  const errorStatus = [\"MAX IDLING TIME!\", \"MAX SPEED!\", \"HIGH TIME!\", \"LOW TIME!\", \"U MIN DISTANCE!\", \"R MIN DISTANCE!\", \"M MIN DISTANCE!\", \"U MIN SHARE!\", \"R MIN SHARE!\", \"M MIN SHARE!\", \"U MAX SHARE!\", \"R MAX SHARE!\", \"M MAX SHARE!\", \"MAX ALTITUDE!\"]; // const [errorStatusDisplay, setErrorStatusDisplay] = useState([]);\n\n  const [coordinates, setCoordinates] = useState([0, 0, 0, 0, 0, 0, 0]);\n  const [index, setIndex] = useState(0);\n  const [isOn, setIsOn] = useState(false);\n\n  function success(pos) {\n    setLatitude(pos.coords.latitude);\n    setLongitude(pos.coords.longitude);\n    setAccuracy(pos.coords.accuracy);\n    setGpsSpeed(pos.coords.speed);\n    setAltitude(pos.coords.altitude);\n    setTimestamp(pos.timestamp);\n  }\n\n  useInterval(() => {\n    setGpsSpeed(gpsSpeed === null ? 0 : gpsSpeed); // set to 0 to mask null value\n\n    setCoordinates(coordinates.concat(...[latitude, longitude, altitude, speed, gpsSpeed, timestamp, accuracy]));\n    console.log(JSON.stringify(coordinates));\n    localStorage.setItem(\"coordinates\", JSON.stringify(coordinates)); // log lats and longs (new):\n    // console.log(\"🔃 \" + latitude)\n    // console.log(\"🔁 \" + longitude)\n\n    let end = {\n      latitude: latitude,\n      longitude: longitude\n    };\n    let oldLat = coordinates[index];\n    let oldLng = coordinates[index + 1];\n    setIndex(i => i + 7);\n    let start = {\n      latitude: oldLat,\n      longitude: oldLng\n    }; // log lats and longs (old):\n    // console.log(\"🔃old \" + start.latitude)\n    // console.log(\"🔁old \" + start.longitude)\n\n    let havDis = haversine(start, end, {\n      unit: 'km'\n    });\n\n    if (start.latitude === 0 && start.longitude === 0) {\n      return;\n    }\n\n    setDistance(prev => prev + havDis); // log cumulative distance:\n    // console.log(\"💨 \" + distance);\n\n    let startTime = coordinates[index - 2];\n    let endTime = timestamp;\n    let deltaT = (endTime - startTime) / 3.6e+6; // ms -> hr;\n\n    deltaT = deltaT === 0 ? 1 : deltaT; // set to 1 to mask NaN error\n    // console.log(\"⏳ \" + deltaT)\n\n    if (havDis > 0) {\n      setSpeed(havDis / deltaT);\n    }\n\n    ;\n\n    if (speed >= 0 && speed < 1 && start.latitude === 0) {\n      setIdleIndex(prev => prev + 2 * (dataRate / 1000)); // stopwatch count in [s]\n    } else if (speed >= 0 && speed < 1) {\n      setIdleIndex(prev => prev + dataRate / 1000);\n    }\n\n    if (speed === 0 && isOn === false) {\n      setPhase(\"Pre-Test\");\n    } else if (isColdStart === true) {\n      setPhase(\"Cold Start\");\n    } else if (speed < urbanMax) {\n      setPhase(\"U\");\n    } else if (speed < ruralMax) {\n      setPhase(\"R\");\n    } else if (speed < motorwayMax) {\n      setPhase(\"M\");\n    } else {\n      setPhase(\"EXTREME\");\n    }\n\n    if (speed < urbanMax && speed > 0) {\n      setUrbanDist(prev => prev + havDis);\n    }\n\n    if (speed < ruralMax && speed > urbanMax) {\n      setRuralDist(prev => prev + havDis);\n    }\n\n    if (speed < motorwayMax && speed > ruralMax) {\n      setMotorwayDist(prev => prev + havDis);\n    }\n\n    setUrbanShare(distance === 0 ? 0 : urbanDist / distance * 100);\n    setRuralShare(distance === 0 ? 0 : ruralDist / distance * 100);\n    setMotorwayShare(distance === 0 ? 0 : motorwayDist / distance * 100); // BC VERIFICATION\n    // Ordered for checking priority and code efficiency\n\n    setTestStatus(2); // set to pass in the beginning\n    // HARD FAILURES (Break on 4, 5 and 6) \n    // Time\n\n    if (idleIndex >= idleTime) {\n      setTestStatus(4);\n      setIsOn(false);\n      stopWatch();\n    } // Speed\n\n\n    if (speed > motorwayMax) {\n      setTestStatus(5);\n      setIsOn(false);\n      stopWatch();\n    } // Time\n\n\n    if (maxTimeReached) {\n      setTestStatus(6);\n      setIsOn(false);\n      stopWatch();\n    } // SOFT FAILURES\n    // Time \n\n\n    if (!minTimeReached) {\n      setTestStatus(7);\n    } else {\n      setTestStatus(2);\n    } // Distance [km]\n\n\n    if (urbanDist < urmMinDist) {\n      setTestStatus(8);\n    }\n\n    if (ruralDist < urmMinDist) {\n      setTestStatus(9);\n    }\n\n    if (motorwayDist < urmMinDist) {\n      setTestStatus(10);\n    }\n\n    if (urbanDist > urmMinDist && ruralDist > urmMinDist && motorwayDist > urmMinDist) {\n      setTestStatus(2);\n    } // Min Distance Share [%]\n\n\n    if (urbanShare < uMinShare) {\n      setTestStatus(11);\n    }\n\n    if (ruralShare < rMinShare) {\n      setTestStatus(12);\n    }\n\n    if (motorwayShare < mMinShare) {\n      setTestStatus(13);\n    }\n\n    if (urbanShare > uMinShare && ruralShare > rMinShare && motorwayShare > mMinShare) {\n      setTestStatus(2);\n    } // Max Distance Share [%]\n\n\n    if (urbanShare > uMaxShare) {\n      setTestStatus(14);\n    }\n\n    if (ruralShare > rMaxShare) {\n      setTestStatus(15);\n    }\n\n    if (motorwayShare > mMaxShare) {\n      setTestStatus(16);\n    }\n  }, isOn ? dataRate : null);\n\n  function error(err) {\n    console.warn('ERROR(' + err.code + '): ' + err.message);\n  }\n\n  options = {\n    enableHighAccuracy: false,\n    maximumAge: 0\n  };\n\n  function startWatch() {\n    // console.log(\"Starting Watch.\")\n    if (\"geolocation\" in navigator && \"watchPosition\" in navigator.geolocation) {\n      id = navigator.geolocation.watchPosition(success, error, options);\n    } else {\n      console.log(\"Geolocation not available.\");\n    }\n  }\n\n  function stopWatch() {\n    // console.log(\"Stopping Watch.\");\n    navigator.geolocation.clearWatch(id);\n    setStartAlt(coordinates[2]);\n    setEndAlt(altitude);\n\n    if (Math.abs(startAlt - endAlt) > maxAltChange) {\n      setTestStatus(17);\n    }\n\n    if (testStatus > 3) {\n      console.log(errorStatus[testStatus - 4]);\n      setFailPlaying(true);\n      return;\n    } else if (testStatus === 2) {\n      console.log(\"Test Passed.\");\n      setPassPlaying(true);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"[TEST H]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sound, {\n      playStatus: startPlaying ? Sound.status.PLAYING : Sound.status.STOPPED,\n      url: startSound,\n      onFinishedPlaying: () => setStartPlaying(!startPlaying)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sound, {\n      playStatus: stopPlaying ? Sound.status.PLAYING : Sound.status.STOPPED,\n      url: stopSound,\n      onFinishedPlaying: () => setStopPlaying(!stopPlaying)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sound, {\n      playStatus: passPlaying ? Sound.status.PLAYING : Sound.status.STOPPED,\n      url: passSound,\n      onFinishedPlaying: () => setPassPlaying(!passPlaying)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sound, {\n      playStatus: failPlaying ? Sound.status.PLAYING : Sound.status.STOPPED,\n      url: failSound,\n      onFinishedPlaying: () => setFailPlaying(!failPlaying)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Timer, {\n      initialTime: 0,\n      startImmediately: false,\n      lastUnit: \"m\",\n      checkpoints: [{\n        time: coldStartEnd * 60000,\n        callback: () => setIsColdStart(false)\n      }, {\n        time: maxTestTime * 60000,\n        callback: () => setMaxTimeReached(true)\n      }, {\n        time: minTestTime * 60000,\n        callback: () => setMinTimeReached(true)\n      }],\n      onStart: () => {\n        // console.log('onStart hook');\n        startWatch();\n        setIsOn(true);\n        setTestStatus(1);\n        setStartPlaying(true);\n      },\n      onStop: () => {\n        // console.log('onStop hook');\n        stopWatch();\n        setIsOn(false);\n        setPhase(\"Post-Test\");\n        setStopPlaying(true);\n      },\n      onReset: () => {\n        // console.log('onReset hook')\n        setTestStatus(0);\n        setFailPlaying(false);\n        navigator.geolocation.clearWatch(id);\n        setCoordinates([0, 0, 0, 0, 0, 0, 0]);\n        setIndex(0);\n        setIdleIndex(0);\n        setUrbanDist(0);\n        setRuralDist(0);\n        setMotorwayDist(0);\n        setUrbanShare(0);\n        setRuralShare(0);\n        setMotorwayShare(0);\n        setAccuracy(0);\n        setSpeed(0);\n        setGpsSpeed(0);\n        setPhase(\"Pre-Test\");\n        setDistance(0); // setErrorStatusDisplay([]);\n\n        console.log(\"Reset.\"); // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\n      },\n      children: ({\n        start,\n        resume,\n        pause,\n        stop,\n        reset,\n        timerState\n      }) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Timer.Minutes, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 13\n        }, this), \" Min\\xA0\", /*#__PURE__*/_jsxDEV(Timer.Seconds, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 13\n        }, this), \" Sec\\xA0\", /*#__PURE__*/_jsxDEV(StartStopButton, {\n          startWatch: start,\n          stopWatch: stop,\n          resetWatch: reset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: reset,\n          disabled: isOn,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Speed (Derived) [km/h]/[mph] :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: [Math.round(speed * 10) / 10, \", \", Math.round(speed / 1.609344498 * 10) / 10, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Distance Shares (U,R,M) [km]:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: [Math.round(urbanDist * 1000) / 1000, \", \", Math.round(ruralDist * 1000) / 1000, \", \", Math.round(motorwayDist * 1000) / 1000]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Trip segment (U,R,M):\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: phase\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"% Shares (U,R,M) [km]:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: [Math.round(urbanShare), \", \", Math.round(ruralShare), \", \", Math.round(motorwayShare)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Cumulative Distance [km]:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: distance === 0 ? 0 : Math.round(distance * 100) / 100\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Test Status (P/F):\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: [testStatus > 2 && \"FAIL\", \" \", testStatus === 2 && \"PASS\", \" \", isOn === 1 && \"IN PROGRESS\", \" \", testStatus === 0 && \"PRE-TEST\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Failure Reason (s): \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: testStatus > 2 ? errorStatus[testStatus - 4] : 'N/A'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Idling Timer [s]:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: idleIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 324,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WatchTracker, \"WMfmmdPsULXMFC8G3fn0EARxArA=\", false, function () {\n  return [useInterval];\n});\n\n_c = WatchTracker;\nexport default WatchTracker;\n\nvar _c;\n\n$RefreshReg$(_c, \"WatchTracker\");","map":{"version":3,"sources":["C:/Users/tilak/OneDrive/Documents/GitHub/pwa-for-rde-test/src/components/WatchTracker.js"],"names":["React","useState","useInterval","StartStopButton","Timer","Sound","startSound","stopSound","failSound","passSound","haversine","require","WatchTracker","startPlaying","setStartPlaying","stopPlaying","setStopPlaying","passPlaying","setPassPlaying","failPlaying","setFailPlaying","id","options","dataRate","urbanMax","ruralMax","motorwayMax","uMaxShare","uMinShare","rMaxShare","rMinShare","mMaxShare","mMinShare","urmMinDist","maxAltChange","maxTestTime","minTestTime","minTimeReached","setMinTimeReached","maxTimeReached","setMaxTimeReached","idleTime","idleIndex","setIdleIndex","coldStartEnd","isColdStart","setIsColdStart","latitude","setLatitude","longitude","setLongitude","accuracy","setAccuracy","gpsSpeed","setGpsSpeed","altitude","setAltitude","timestamp","setTimestamp","startAlt","setStartAlt","endAlt","setEndAlt","distance","setDistance","speed","setSpeed","urbanDist","setUrbanDist","ruralDist","setRuralDist","motorwayDist","setMotorwayDist","urbanShare","setUrbanShare","ruralShare","setRuralShare","motorwayShare","setMotorwayShare","phase","setPhase","testStatus","setTestStatus","errorStatus","coordinates","setCoordinates","index","setIndex","isOn","setIsOn","success","pos","coords","concat","console","log","JSON","stringify","localStorage","setItem","end","oldLat","oldLng","i","start","havDis","unit","prev","startTime","endTime","deltaT","stopWatch","error","err","warn","code","message","enableHighAccuracy","maximumAge","startWatch","navigator","geolocation","watchPosition","clearWatch","Math","abs","status","PLAYING","STOPPED","time","callback","resume","pause","stop","reset","timerState","round"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport useInterval from \"../hooks/useInterval\";\r\nimport StartStopButton from \"./StartStopButton\";\r\nimport Timer from \"react-compound-timer\";\r\n\r\nimport Sound from \"react-sound\";\r\nimport startSound from \"../sounds/start.mp3\"\r\nimport stopSound from \"../sounds/stop.mp3\"\r\nimport failSound from \"../sounds/failSoft.mp3\"\r\nimport passSound from \"../sounds/pass.mp3\"\r\n\r\nconst haversine = require('haversine')\r\n\r\nfunction WatchTracker() {\r\n\r\n  const [startPlaying, setStartPlaying] = useState(false);\r\n  const [stopPlaying, setStopPlaying] = useState(false);\r\n  const [passPlaying, setPassPlaying] = useState(false);\r\n  const [failPlaying, setFailPlaying] = useState(false);\r\n  \r\n  let id, options;\r\n  \r\n  let dataRate = 500; //[ms]\r\n  \r\n  let urbanMax = 33;\r\n  let ruralMax = 55;\r\n  let motorwayMax = 80;\r\n\r\n  let uMaxShare = 50; //[%]\r\n  let uMinShare = 5;\r\n  let rMaxShare = 40;\r\n  let rMinShare = 5;\r\n  let mMaxShare = 40;\r\n  let mMinShare = 5;\r\n\r\n  let urmMinDist = 0.2; //[km]\r\n\r\n  let maxAltChange = 100; //[m]\r\n\r\n  let maxTestTime = 15; //[min]\r\n  let minTestTime = 6; //[min]\r\n  const [minTimeReached, setMinTimeReached] = useState(false);\r\n  const [maxTimeReached, setMaxTimeReached] = useState(false);\r\n\r\n  let idleTime = 200; //[s]\r\n  const [idleIndex, setIdleIndex] = useState(0); //[s]\r\n\r\n  let coldStartEnd = 1; //[min]\r\n  const [isColdStart, setIsColdStart] = useState(true);\r\n\r\n  const [latitude, setLatitude] = useState(0);\r\n  const [longitude, setLongitude] = useState(0);\r\n  const [accuracy, setAccuracy] = useState(0);\r\n  const [gpsSpeed, setGpsSpeed] = useState(0);\r\n  const [altitude, setAltitude] = useState(0);\r\n  const [timestamp, setTimestamp] = useState(0);\r\n\r\n  const [startAlt, setStartAlt] = useState(0);\r\n  const [endAlt, setEndAlt] = useState(0);\r\n\r\n  const [distance, setDistance] = useState(0);\r\n  const [speed, setSpeed] = useState(0);\r\n\r\n  const [urbanDist, setUrbanDist] = useState(0);\r\n  const [ruralDist, setRuralDist] = useState(0);\r\n  const [motorwayDist, setMotorwayDist] = useState(0);\r\n\r\n  const [urbanShare, setUrbanShare] = useState(0);\r\n  const [ruralShare, setRuralShare] = useState(0);\r\n  const [motorwayShare, setMotorwayShare] = useState(0);\r\n\r\n  const [phase, setPhase] = useState(\"Pre-Test\");\r\n\r\n  const [testStatus, setTestStatus] = useState(0);\r\n\r\n  // 0 = PRE-TEST\r\n  // 1 = IN-PROGRESS\r\n  // 2 = PASS\r\n  // 3 = FAIL \r\n  const errorStatus = [\r\n    \"MAX IDLING TIME!\",\r\n    \"MAX SPEED!\",\r\n    \"HIGH TIME!\",\r\n    \"LOW TIME!\",\r\n    \"U MIN DISTANCE!\",\r\n    \"R MIN DISTANCE!\",\r\n    \"M MIN DISTANCE!\",\r\n    \"U MIN SHARE!\",\r\n    \"R MIN SHARE!\",\r\n    \"M MIN SHARE!\",\r\n    \"U MAX SHARE!\",\r\n    \"R MAX SHARE!\",\r\n    \"M MAX SHARE!\",\r\n    \"MAX ALTITUDE!\",\r\n  ]\r\n\r\n  // const [errorStatusDisplay, setErrorStatusDisplay] = useState([]);\r\n\r\n  const [coordinates, setCoordinates] = useState([0, 0, 0, 0, 0, 0, 0]);\r\n\r\n  const [index, setIndex] = useState(0);\r\n\r\n  const [isOn, setIsOn] = useState(false);\r\n\r\n  function success(pos) {\r\n    setLatitude(pos.coords.latitude);\r\n    setLongitude(pos.coords.longitude);\r\n    setAccuracy(pos.coords.accuracy);\r\n    setGpsSpeed(pos.coords.speed);\r\n    setAltitude(pos.coords.altitude);\r\n    setTimestamp(pos.timestamp);\r\n  }\r\n\r\n  useInterval(() => {\r\n    setGpsSpeed((gpsSpeed === null) ? 0 : gpsSpeed); // set to 0 to mask null value\r\n    setCoordinates(\r\n      coordinates.concat(...[\r\n        latitude,\r\n        longitude,\r\n        altitude,\r\n        speed,\r\n        gpsSpeed,\r\n        timestamp,\r\n        accuracy\r\n      ])\r\n    )\r\n\r\n    console.log(JSON.stringify(coordinates));\r\n    localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n\r\n    // log lats and longs (new):\r\n    // console.log(\"🔃 \" + latitude)\r\n    // console.log(\"🔁 \" + longitude)\r\n\r\n    let end = {\r\n      latitude: latitude,\r\n      longitude: longitude,\r\n    }\r\n\r\n    let oldLat = coordinates[index];\r\n    let oldLng = coordinates[index + 1];\r\n\r\n    setIndex(i => i + 7)\r\n\r\n    let start = {\r\n      latitude: oldLat,\r\n      longitude: oldLng,\r\n    }\r\n\r\n    // log lats and longs (old):\r\n    // console.log(\"🔃old \" + start.latitude)\r\n    // console.log(\"🔁old \" + start.longitude)\r\n\r\n\r\n    let havDis = haversine(start, end, { unit: 'km' })\r\n\r\n    if (start.latitude === 0 && start.longitude === 0) {\r\n      return\r\n    }\r\n\r\n    setDistance(prev => prev + havDis);\r\n\r\n    // log cumulative distance:\r\n    // console.log(\"💨 \" + distance);\r\n\r\n    let startTime = coordinates[index - 2];\r\n    let endTime = timestamp;\r\n    let deltaT = (endTime - startTime) / 3.6e+6; // ms -> hr;\r\n    deltaT = (deltaT === 0) ? 1 : deltaT; // set to 1 to mask NaN error\r\n\r\n    // console.log(\"⏳ \" + deltaT)\r\n\r\n    if (havDis > 0) { setSpeed(havDis / deltaT) };\r\n\r\n\r\n    if (speed >= 0 && speed < 1 && start.latitude === 0) {\r\n      setIdleIndex(prev => prev + 2 * (dataRate / 1000)) // stopwatch count in [s]\r\n    } else if (speed >= 0 && speed < 1) {\r\n      setIdleIndex(prev => prev + (dataRate / 1000))\r\n    }\r\n\r\n    if (speed === 0 && isOn === false) {\r\n      setPhase(\"Pre-Test\")\r\n    } else if (isColdStart === true) {\r\n      setPhase(\"Cold Start\")\r\n    } else if (speed < urbanMax) {\r\n      setPhase(\"U\");\r\n    } else if (speed < ruralMax) {\r\n      setPhase(\"R\");\r\n    } else if (speed < motorwayMax) {\r\n      setPhase(\"M\")\r\n    } else {\r\n      setPhase(\"EXTREME\")\r\n    }\r\n\r\n    if (speed < urbanMax && speed > 0) {\r\n      setUrbanDist(prev => prev + havDis);\r\n    }\r\n    if (speed < ruralMax && speed > urbanMax) {\r\n      setRuralDist(prev => prev + havDis);\r\n    }\r\n    if (speed < motorwayMax && speed > ruralMax) {\r\n      setMotorwayDist(prev => prev + havDis)\r\n    }\r\n\r\n    setUrbanShare(distance === 0 ? 0 : (urbanDist / distance) * 100);\r\n    setRuralShare(distance === 0 ? 0 : (ruralDist / distance) * 100);\r\n    setMotorwayShare(distance === 0 ? 0 : (motorwayDist / distance) * 100);\r\n\r\n\r\n    // BC VERIFICATION\r\n    // Ordered for checking priority and code efficiency\r\n    setTestStatus(2); // set to pass in the beginning\r\n    // HARD FAILURES (Break on 4, 5 and 6) \r\n    // Time\r\n    if (idleIndex >= idleTime) {\r\n      setTestStatus(4);\r\n      setIsOn(false);\r\n      stopWatch();\r\n    }\r\n\r\n    // Speed\r\n    if (speed > motorwayMax) {\r\n      setTestStatus(5);\r\n      setIsOn(false);\r\n      stopWatch()\r\n    }\r\n\r\n    // Time\r\n    if (maxTimeReached) {\r\n      setTestStatus(6);\r\n      setIsOn(false);\r\n      stopWatch();\r\n    }\r\n\r\n    // SOFT FAILURES\r\n    // Time \r\n    if (!minTimeReached) {\r\n      setTestStatus(7);\r\n    } else { setTestStatus(2); }\r\n\r\n    // Distance [km]\r\n    if (urbanDist < urmMinDist) {\r\n      setTestStatus(8);\r\n    }\r\n    if (ruralDist < urmMinDist) {\r\n      setTestStatus(9);\r\n    }\r\n    if (motorwayDist < urmMinDist) {\r\n      setTestStatus(10);\r\n    }\r\n    if (urbanDist > urmMinDist && ruralDist > urmMinDist && motorwayDist > urmMinDist) {\r\n      setTestStatus(2);\r\n    }\r\n\r\n    // Min Distance Share [%]\r\n    if (urbanShare < uMinShare) {\r\n      setTestStatus(11);\r\n    }\r\n    if (ruralShare < rMinShare) {\r\n      setTestStatus(12);\r\n    }\r\n    if (motorwayShare < mMinShare) {\r\n      setTestStatus(13);\r\n    }\r\n    if (urbanShare > uMinShare && ruralShare > rMinShare && motorwayShare > mMinShare) {\r\n      setTestStatus(2);\r\n    }\r\n\r\n    // Max Distance Share [%]\r\n    if (urbanShare > uMaxShare) {\r\n      setTestStatus(14);\r\n    }\r\n    if (ruralShare > rMaxShare) {\r\n      setTestStatus(15);\r\n    }\r\n    if (motorwayShare > mMaxShare) {\r\n      setTestStatus(16);\r\n    }\r\n\r\n  }, isOn ? dataRate : null\r\n  )\r\n\r\n  function error(err) {\r\n    console.warn('ERROR(' + err.code + '): ' + err.message);\r\n  }\r\n\r\n  options = {\r\n    enableHighAccuracy: false,\r\n    maximumAge: 0\r\n  };\r\n\r\n  function startWatch() {\r\n    // console.log(\"Starting Watch.\")\r\n    if (\"geolocation\" in navigator && \"watchPosition\" in navigator.geolocation) {\r\n      id = navigator.geolocation.watchPosition(success, error, options);\r\n    } else {\r\n      console.log(\"Geolocation not available.\")\r\n    }\r\n  }\r\n\r\n  function stopWatch() {\r\n    // console.log(\"Stopping Watch.\");\r\n    navigator.geolocation.clearWatch(id);\r\n\r\n    setStartAlt(coordinates[2]);\r\n    setEndAlt(altitude);\r\n\r\n    if (Math.abs(startAlt - endAlt) > maxAltChange) {\r\n      setTestStatus(17);\r\n    }\r\n\r\n    if (testStatus > 3) {\r\n      console.log(errorStatus[testStatus - 4]);\r\n      setFailPlaying(true);\r\n      return;\r\n    } else if (testStatus === 2) {\r\n      console.log(\"Test Passed.\")\r\n      setPassPlaying(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>[TEST H]</div>\r\n      <Sound\r\n        playStatus={startPlaying ? Sound.status.PLAYING : Sound.status.STOPPED}\r\n        url={startSound}\r\n        onFinishedPlaying={() => setStartPlaying(!startPlaying)}\r\n      />\r\n      <Sound\r\n        playStatus={stopPlaying ? Sound.status.PLAYING : Sound.status.STOPPED}\r\n        url={stopSound}\r\n        onFinishedPlaying={() => setStopPlaying(!stopPlaying)}\r\n      />\r\n      <Sound\r\n        playStatus={passPlaying ? Sound.status.PLAYING : Sound.status.STOPPED}\r\n        url={passSound}\r\n        onFinishedPlaying={() => setPassPlaying(!passPlaying)}\r\n      />\r\n      <Sound\r\n        playStatus={failPlaying ? Sound.status.PLAYING : Sound.status.STOPPED}\r\n        url={failSound}\r\n        onFinishedPlaying={() => setFailPlaying(!failPlaying)}\r\n      />\r\n      <Timer\r\n        initialTime={0}\r\n        startImmediately={false}\r\n        lastUnit=\"m\"\r\n        checkpoints={[\r\n          {\r\n            time: coldStartEnd * 60000,\r\n            callback: () => setIsColdStart(false),\r\n          },\r\n          {\r\n            time: maxTestTime * 60000,\r\n            callback: () => setMaxTimeReached(true),\r\n          },\r\n          {\r\n            time: minTestTime * 60000,\r\n            callback: () => setMinTimeReached(true),\r\n          }\r\n        ]}\r\n        onStart={() => {\r\n          // console.log('onStart hook');\r\n          startWatch();\r\n          setIsOn(true);\r\n          setTestStatus(1);\r\n          setStartPlaying(true);\r\n        }}\r\n        onStop={() => {\r\n          // console.log('onStop hook');\r\n          stopWatch();\r\n          setIsOn(false);\r\n          setPhase(\"Post-Test\");\r\n          setStopPlaying(true);\r\n        }}\r\n        onReset={() => {\r\n          // console.log('onReset hook')\r\n          setTestStatus(0);\r\n          setFailPlaying(false);\r\n          navigator.geolocation.clearWatch(id);\r\n          setCoordinates([0, 0, 0, 0, 0, 0, 0]);\r\n          setIndex(0);\r\n          setIdleIndex(0);\r\n          setUrbanDist(0);\r\n          setRuralDist(0);\r\n          setMotorwayDist(0);\r\n          setUrbanShare(0);\r\n          setRuralShare(0);\r\n          setMotorwayShare(0);\r\n          setAccuracy(0);\r\n          setSpeed(0);\r\n          setGpsSpeed(0);\r\n          setPhase(\"Pre-Test\");\r\n          setDistance(0);\r\n          // setErrorStatusDisplay([]);\r\n          console.log(\"Reset.\")\r\n          // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n        }}\r\n      >\r\n        {({ start, resume, pause, stop, reset, timerState }) => (\r\n          <React.Fragment>\r\n            <Timer.Minutes /> Min&nbsp;\r\n            <Timer.Seconds /> Sec&nbsp;\r\n            <StartStopButton startWatch={start} stopWatch={stop} resetWatch={reset} />\r\n            <button onClick={reset} disabled={isOn}>Reset</button>\r\n          </React.Fragment>\r\n        )}\r\n      </Timer>\r\n      <div>Speed (Derived) [km/h]/[mph] :</div>\r\n      <div className=\"Data-Label\">{Math.round(speed * 10) / 10}, {Math.round((speed / 1.609344498) * 10) / 10} </div>\r\n      <div>Distance Shares (U,R,M) [km]:</div>\r\n      <div className=\"Data-Label\">{Math.round(urbanDist * 1000) / 1000}, {Math.round(ruralDist * 1000) / 1000}, {Math.round(motorwayDist * 1000) / 1000}</div>\r\n      <div>Trip segment (U,R,M):</div>\r\n      <div className=\"Data-Label\">\r\n        {phase}\r\n      </div>\r\n      <div>% Shares (U,R,M) [km]:</div>\r\n      <div className=\"Data-Label\">{Math.round(urbanShare)}, {Math.round(ruralShare)}, {Math.round(motorwayShare)}</div>\r\n      <div>Cumulative Distance [km]:</div>\r\n      <div className=\"Data-Label\">{distance === 0 ? 0 : Math.round(distance * 100) / 100}</div>\r\n      <div>Test Status (P/F):</div>\r\n      <div className=\"Data-Label\">{testStatus > 2 && \"FAIL\"} {testStatus === 2 && \"PASS\"} {isOn === 1 && \"IN PROGRESS\"} {testStatus === 0 && \"PRE-TEST\"}</div>\r\n      <div>Failure Reason (s): </div>\r\n      {/* <div className=\"Data-Label\">{testStatus > 2 ? errorStatus[testStatus - 4] : 'N/A'}</div> */}\r\n      <div className=\"Data-Label\">{testStatus > 2 ? errorStatus[testStatus - 4] : 'N/A'}</div>\r\n      <div>Idling Timer [s]:</div>\r\n      <div className=\"Data-Label\">{idleIndex}</div>\r\n\r\n    </React.Fragment>\r\n  )\r\n\r\n}\r\n\r\nexport default WatchTracker"]},"metadata":{},"sourceType":"module"}