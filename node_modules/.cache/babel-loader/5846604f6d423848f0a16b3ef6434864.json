{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tilak\\\\OneDrive\\\\Documents\\\\GitHub\\\\pwa-for-rde-test\\\\src\\\\components\\\\Tracker.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Timer from 'react-compound-timer';\nimport StartStopButton from './StartStopButton';\nimport useInterval from '../hooks/useInterval';\nimport \"../css/tracker.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst haversine = require('haversine'); // import useSound from 'use-sound' // Leave this for adding sound notifications for later\n// BC variables:\n\n\nlet urbanMax = 33;\nlet ruralMax = 55;\nlet motorwayMax = 80;\n\nconst Tracker = () => {\n  _s();\n\n  const [delay] = useState(1000);\n  const [isOn, setIsOn] = useState(false);\n  const [coordinates, setCoordinates] = useState([]);\n  const [speed, setSpeed] = useState(0);\n  const [gpsSpeed, setGpsSpeed] = useState(0);\n  const [altitude, setAltitude] = useState(0);\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [timestamp, setTimestamp] = useState(0);\n  const [distance, setDistance] = useState(0);\n  const [accuracy, setAccuracy] = useState(0);\n  const [slowDist, setSlowDist] = useState(0);\n  const [mediumDist, setMediumDist] = useState(0);\n  const [fastDist, setFastDist] = useState(0);\n  useInterval(() => {\n    if (\"geolocation\" in navigator && \"getCurrentPosition\" in navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(pos => {\n        let deltaTime = (pos.timestamp - timestamp) / 3.6e+6; // ms -> hr\n        // console.log(\"⏳ Time Difference: \" + deltaTime)\n        // console.log(\"🔃 Latitude Difference: \" + (pos.coords.latitude - latitude))\n        // console.log(\"🔁 Longitude Difference: \" + (pos.coords.longitude - longitude))\n\n        let start = {\n          latitude: latitude,\n          longitude: longitude\n        };\n        let end = {\n          latitude: pos.coords.latitude,\n          longitude: pos.coords.longitude\n        };\n        let havDis = haversine(start, end, {\n          unit: 'km'\n        }); // console.log(\"💨 Distance Travelled: \" + havDis)\n\n        deltaTime = deltaTime === 0 ? 1 : deltaTime; // set to 1 to mask NaN error\n\n        let speed = havDis / deltaTime; // console.log(\"🏎 Calculated Speed: \" + speed + \"m/s\")\n\n        setLatitude(pos.coords.latitude);\n        setLongitude(pos.coords.longitude);\n        setAltitude(pos.coords.altitude);\n        setSpeed(speed);\n        setGpsSpeed(pos.coords.speed);\n        setTimestamp(pos.timestamp);\n        setAccuracy(pos.coords.accuracy); // start logging\n\n        if (latitude === 0 && longitude === 0) {\n          return;\n        }\n\n        setDistance(prev => prev + havDis);\n\n        if (speed < 33) {\n          setSlowDist(prev => prev + havDis);\n        } else if (speed < 55) {\n          setMediumDist(prev => prev + havDis);\n        } else if (speed < 80) {\n          setFastDist(prev => prev + havDis);\n        }\n\n        setCoordinates(coordinates.concat([latitude, longitude, altitude, speed, timestamp, accuracy]));\n        console.log(JSON.stringify(coordinates)); // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\n      }, () => {\n        console.log('couldnt be bothered to correctly capture the error so... here you are');\n      }, {\n        enableHighAccuracy: true,\n        maximumAge: 0\n      });\n    } else {\n      console.log(\"Geolocation not available!\");\n    }\n  }, isOn ? delay : null);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Timer, {\n      initialTime: 0,\n      startImmediately: false,\n      onStart: () => {\n        console.log('onStart hook');\n        setIsOn(true);\n      },\n      onStop: () => {\n        console.log('onStop hook');\n        setIsOn(false);\n      },\n      onReset: () => {\n        console.log('onReset hook');\n        setIsOn(false);\n        setCoordinates([]); // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\n      },\n      children: ({\n        start,\n        resume,\n        pause,\n        stop,\n        reset,\n        timerState\n      }) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Timer.Hours, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 29\n          }, this), \" Hrs\\xA0\", /*#__PURE__*/_jsxDEV(Timer.Minutes, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 29\n          }, this), \" Min\\xA0\", /*#__PURE__*/_jsxDEV(Timer.Seconds, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 29\n          }, this), \" Sec\\xA0\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(StartStopButton, {\n            startWatch: start,\n            stopWatch: stop\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: reset,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" ------------- RAW DATA: ------------- \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"speed is: \", speed, \" [km/h]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"GPS speed is: \", gpsSpeed, \" [km/h]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"altitude is: \", altitude, \" [m]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"latitude is: \", latitude, \" [\\xB0]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"longitude is: \", longitude, \" [\\xB0]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"GPS accuracy is: \", accuracy, \" [m] \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" ------------- BC VERIFICATION: ------------- \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"cumulative distance is: \", distance, \" [km]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"trip segment is:\\xA0\", speed < {\n        urbanMax\n      } && \"U\", speed > {\n        urbanMax\n      } && speed < {\n        ruralMax\n      } && \"R\", speed > 55 && speed < 80 && \"M\", \"\\xA0[U/R/M]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"U share is: ____ [%]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"R share is: ____ [%]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"M share is: ____ [%]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"U distance share is: \", slowDist, \" [km]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"R distance share is: \", mediumDist, \" [km]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"M distance share is: \", fastDist, \" [km]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Tracker, \"sOGbM20PMGkUm/6reJjcR6I1qaQ=\", false, function () {\n  return [useInterval];\n});\n\n_c = Tracker;\nexport default Tracker;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tracker\");","map":{"version":3,"sources":["C:/Users/tilak/OneDrive/Documents/GitHub/pwa-for-rde-test/src/components/Tracker.js"],"names":["React","useState","Timer","StartStopButton","useInterval","haversine","require","urbanMax","ruralMax","motorwayMax","Tracker","delay","isOn","setIsOn","coordinates","setCoordinates","speed","setSpeed","gpsSpeed","setGpsSpeed","altitude","setAltitude","latitude","setLatitude","longitude","setLongitude","timestamp","setTimestamp","distance","setDistance","accuracy","setAccuracy","slowDist","setSlowDist","mediumDist","setMediumDist","fastDist","setFastDist","navigator","geolocation","getCurrentPosition","pos","deltaTime","start","end","coords","havDis","unit","prev","concat","console","log","JSON","stringify","enableHighAccuracy","maximumAge","resume","pause","stop","reset","timerState"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\r\nimport Timer from 'react-compound-timer'\r\nimport StartStopButton from './StartStopButton'\r\nimport useInterval from '../hooks/useInterval'\r\nimport \"../css/tracker.css\"\r\n\r\nconst haversine = require('haversine')\r\n\r\n// import useSound from 'use-sound' // Leave this for adding sound notifications for later\r\n\r\n// BC variables:\r\nlet urbanMax = 33;\r\nlet ruralMax = 55;\r\nlet motorwayMax = 80;\r\n\r\nconst Tracker = () => {\r\n\r\n    const [delay] = useState(1000);\r\n    const [isOn, setIsOn] = useState(false)\r\n\r\n    const [coordinates, setCoordinates] = useState([]);\r\n\r\n    const [speed, setSpeed] = useState(0);\r\n    const [gpsSpeed, setGpsSpeed] = useState(0);\r\n    const [altitude, setAltitude] = useState(0);\r\n    const [latitude, setLatitude] = useState(0);\r\n    const [longitude, setLongitude] = useState(0);\r\n    const [timestamp, setTimestamp] = useState(0);\r\n    const [distance, setDistance] = useState(0);\r\n    const [accuracy, setAccuracy] = useState(0);\r\n\r\n    const [slowDist, setSlowDist] = useState(0);\r\n    const [mediumDist, setMediumDist] = useState(0);\r\n    const [fastDist, setFastDist] = useState(0);\r\n\r\n\r\n    useInterval(() => {\r\n        if (\"geolocation\" in navigator && \"getCurrentPosition\" in navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                (pos) => {\r\n\r\n                    let deltaTime = (pos.timestamp - timestamp) / 3.6e+6; // ms -> hr\r\n                    // console.log(\"⏳ Time Difference: \" + deltaTime)\r\n                    // console.log(\"🔃 Latitude Difference: \" + (pos.coords.latitude - latitude))\r\n                    // console.log(\"🔁 Longitude Difference: \" + (pos.coords.longitude - longitude))\r\n\r\n                    let start = {\r\n                        latitude: latitude,\r\n                        longitude: longitude,\r\n                    }\r\n                    let end = {\r\n                        latitude: pos.coords.latitude,\r\n                        longitude: pos.coords.longitude,\r\n                    }\r\n\r\n                    let havDis = haversine(start, end, { unit: 'km' })\r\n                    // console.log(\"💨 Distance Travelled: \" + havDis)\r\n\r\n                    deltaTime = (deltaTime === 0) ? 1 : deltaTime; // set to 1 to mask NaN error\r\n                    let speed = (havDis / deltaTime);\r\n                    // console.log(\"🏎 Calculated Speed: \" + speed + \"m/s\")\r\n\r\n                    setLatitude(pos.coords.latitude);\r\n                    setLongitude(pos.coords.longitude);\r\n                    setAltitude(pos.coords.altitude);\r\n                    setSpeed(speed);\r\n                    setGpsSpeed(pos.coords.speed);\r\n                    setTimestamp(pos.timestamp);\r\n                    setAccuracy(pos.coords.accuracy);\r\n\r\n                    // start logging\r\n\r\n                    if (latitude === 0 && longitude === 0) {\r\n                        return\r\n                    }\r\n\r\n                    setDistance(prev => prev + havDis)\r\n\r\n                    if (speed < 33) {\r\n                        setSlowDist(prev => prev + havDis)\r\n                    } else if (speed < 55) {\r\n                        setMediumDist(prev => prev + havDis)\r\n                    } else if (speed < 80) {\r\n                        setFastDist(prev => prev + havDis)\r\n                    }\r\n\r\n                    setCoordinates(coordinates.concat([latitude, longitude, altitude, speed, timestamp, accuracy]));\r\n                    console.log(JSON.stringify(coordinates));\r\n                    // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n\r\n                },\r\n                () => { console.log('couldnt be bothered to correctly capture the error so... here you are') }\r\n                , {\r\n                    enableHighAccuracy: true,\r\n                    maximumAge: 0\r\n                });\r\n        } else {\r\n            console.log(\"Geolocation not available!\")\r\n        }\r\n    },\r\n        isOn ? delay : null,\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <Timer\r\n                initialTime={0}\r\n                startImmediately={false}\r\n                onStart={() => {\r\n                    console.log('onStart hook');\r\n                    setIsOn(true);\r\n                }}\r\n                onStop={() => {\r\n                    console.log('onStop hook');\r\n                    setIsOn(false);\r\n                }}\r\n                onReset={() => {\r\n                    console.log('onReset hook')\r\n                    setIsOn(false);\r\n                    setCoordinates([]);\r\n                    // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n                }}\r\n            >\r\n                {({ start, resume, pause, stop, reset, timerState }) => (\r\n                    <React.Fragment>\r\n                        <div>\r\n                            <Timer.Hours /> Hrs&nbsp;\r\n                            <Timer.Minutes /> Min&nbsp;\r\n                            <Timer.Seconds /> Sec&nbsp;\r\n                        </div>\r\n\r\n                        <div>\r\n                            <StartStopButton startWatch={start} stopWatch={stop} />\r\n                            <button onClick={reset}>Reset</button>\r\n                        </div>\r\n\r\n\r\n\r\n                    </React.Fragment>\r\n                )}\r\n            </Timer >\r\n            <div> ------------- RAW DATA: ------------- </div>\r\n            <div>speed is: {speed} [km/h]</div>\r\n            <div>GPS speed is: {gpsSpeed} [km/h]</div>\r\n            <div>altitude is: {altitude} [m]</div>\r\n            <div>latitude is: {latitude} [&deg;]</div>\r\n            <div>longitude is: {longitude} [&deg;]</div>\r\n            <div>GPS accuracy is: {accuracy} [m] </div>\r\n            <div> ------------- BC VERIFICATION: ------------- </div>\r\n            <div>cumulative distance is: {distance} [km]</div>\r\n            <div>trip segment is:&nbsp;\r\n                    {speed < {urbanMax} &&\r\n                    \"U\"\r\n                }\r\n                {speed > {urbanMax} && speed < {ruralMax} &&\r\n                    \"R\"\r\n                }\r\n                {speed > 55 && speed < 80 &&\r\n                    \"M\"\r\n                }\r\n                    &nbsp;[U/R/M]</div>\r\n            <div>U share is: ____ [%]</div>\r\n            <div>R share is: ____ [%]</div>\r\n            <div>M share is: ____ [%]</div>\r\n            <div>U distance share is: {slowDist} [km]</div>\r\n            <div>R distance share is: {mediumDist} [km]</div>\r\n            <div>M distance share is: {fastDist} [km]</div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Tracker\r\n"]},"metadata":{},"sourceType":"module"}