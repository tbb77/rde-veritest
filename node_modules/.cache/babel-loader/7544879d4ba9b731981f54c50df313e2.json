{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tilak\\\\OneDrive\\\\Documents\\\\GitHub\\\\pwa-for-rde-test\\\\src\\\\components\\\\TempTracker.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TempTracker() {\n  _s();\n\n  let id, options; // On off switch\n\n  const [isOn, setIsOn] = useState(false); // BC variables:\n\n  let urbanMax = 33;\n  let ruralMax = 55;\n  let motorwayMax = 80; // Output Data Array\n\n  const [coordinates, setCoordinates] = useState([]); // Output Data\n\n  const [speed, setSpeed] = useState(0);\n  const [gpsSpeed, setGpsSpeed] = useState(0);\n  const [altitude, setAltitude] = useState(0);\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [timestamp, setTimestamp] = useState(0);\n  const [distance, setDistance] = useState(0);\n  const [accuracy, setAccuracy] = useState(0); // Trip Segment Distances\n\n  const [slowDist, setSlowDist] = useState(0);\n  const [mediumDist, setMediumDist] = useState(0);\n  const [fastDist, setFastDist] = useState(0);\n\n  function success(pos) {\n    let crd = pos.coords;\n    console.log(crd);\n  }\n\n  if (!isOn) {\n    console.log(\"Stopping Watch.\");\n    navigator.geolocation.clearWatch(id);\n  }\n\n  function error(err) {\n    console.warn('ERROR(' + err.code + '): ' + err.message);\n  }\n\n  options = {\n    enableHighAccuracy: false,\n    maximumAge: 0\n  };\n\n  if (isOn === true) {\n    id = navigator.geolocation.watchPosition(success, error, options);\n  }\n\n  const startHandler = () => {\n    setIsOn(true);\n  };\n\n  const stopHandler = () => {\n    setIsOn(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startHandler,\n      children: \"start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopHandler,\n      children: \"stop\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TempTracker, \"nCg858LFa7zcLicvKMI5dK6Xeno=\");\n\n_c = TempTracker;\nexport default TempTracker;\n\nvar _c;\n\n$RefreshReg$(_c, \"TempTracker\");","map":{"version":3,"sources":["C:/Users/tilak/OneDrive/Documents/GitHub/pwa-for-rde-test/src/components/TempTracker.js"],"names":["useState","TempTracker","id","options","isOn","setIsOn","urbanMax","ruralMax","motorwayMax","coordinates","setCoordinates","speed","setSpeed","gpsSpeed","setGpsSpeed","altitude","setAltitude","latitude","setLatitude","longitude","setLongitude","timestamp","setTimestamp","distance","setDistance","accuracy","setAccuracy","slowDist","setSlowDist","mediumDist","setMediumDist","fastDist","setFastDist","success","pos","crd","coords","console","log","navigator","geolocation","clearWatch","error","err","warn","code","message","enableHighAccuracy","maximumAge","watchPosition","startHandler","stopHandler"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,SAASC,WAAT,GAAuB;AAAA;;AACrB,MAAIC,EAAJ,EAAQC,OAAR,CADqB,CAGrB;;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,KAAD,CAAhC,CAJqB,CAMrB;;AACA,MAAIM,QAAQ,GAAG,EAAf;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,WAAW,GAAG,EAAlB,CATqB,CAWrB;;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,EAAD,CAA9C,CAZqB,CAcrB;;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACiB,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACmB,SAAD,EAAYC,YAAZ,IAA4BpB,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACqB,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACuB,QAAD,EAAWC,WAAX,IAA0BxB,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACyB,QAAD,EAAWC,WAAX,IAA0B1B,QAAQ,CAAC,CAAD,CAAxC,CAtBqB,CAwBrB;;AACA,QAAM,CAAC2B,QAAD,EAAWC,WAAX,IAA0B5B,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAAC6B,UAAD,EAAaC,aAAb,IAA8B9B,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAAC+B,QAAD,EAAWC,WAAX,IAA0BhC,QAAQ,CAAC,CAAD,CAAxC;;AAEA,WAASiC,OAAT,CAAiBC,GAAjB,EAAsB;AACpB,QAAIC,GAAG,GAAGD,GAAG,CAACE,MAAd;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACD;;AAED,MAAI,CAAC/B,IAAL,EAAW;AACTiC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAC,IAAAA,SAAS,CAACC,WAAV,CAAsBC,UAAtB,CAAiCvC,EAAjC;AACD;;AAED,WAASwC,KAAT,CAAeC,GAAf,EAAoB;AAClBN,IAAAA,OAAO,CAACO,IAAR,CAAa,WAAWD,GAAG,CAACE,IAAf,GAAsB,KAAtB,GAA8BF,GAAG,CAACG,OAA/C;AACD;;AAED3C,EAAAA,OAAO,GAAG;AACR4C,IAAAA,kBAAkB,EAAE,KADZ;AAERC,IAAAA,UAAU,EAAE;AAFJ,GAAV;;AAKA,MAAI5C,IAAI,KAAK,IAAb,EAAmB;AACjBF,IAAAA,EAAE,GAAGqC,SAAS,CAACC,WAAV,CAAsBS,aAAtB,CAAoChB,OAApC,EAA6CS,KAA7C,EAAoDvC,OAApD,CAAL;AACD;;AAGD,QAAM+C,YAAY,GAAG,MAAM;AACzB7C,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAFD;;AAIA,QAAM8C,WAAW,GAAG,MAAM;AACxB9C,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD,GAFD;;AAIA,sBACE;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAE6C,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAEC,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GApEQlD,W;;KAAAA,W;AAsET,eAAeA,WAAf","sourcesContent":["import { useState } from \"react\"\r\n\r\nfunction TempTracker() {\r\n  let id, options;\r\n\r\n  // On off switch\r\n  const [isOn, setIsOn] = useState(false);\r\n  \r\n  // BC variables:\r\n  let urbanMax = 33;\r\n  let ruralMax = 55;\r\n  let motorwayMax = 80;\r\n\r\n  // Output Data Array\r\n  const [coordinates, setCoordinates] = useState([]);\r\n\r\n  // Output Data\r\n  const [speed, setSpeed] = useState(0);\r\n  const [gpsSpeed, setGpsSpeed] = useState(0);\r\n  const [altitude, setAltitude] = useState(0);\r\n  const [latitude, setLatitude] = useState(0);\r\n  const [longitude, setLongitude] = useState(0);\r\n  const [timestamp, setTimestamp] = useState(0);\r\n  const [distance, setDistance] = useState(0);\r\n  const [accuracy, setAccuracy] = useState(0);\r\n\r\n  // Trip Segment Distances\r\n  const [slowDist, setSlowDist] = useState(0);\r\n  const [mediumDist, setMediumDist] = useState(0);\r\n  const [fastDist, setFastDist] = useState(0);\r\n\r\n  function success(pos) {\r\n    let crd = pos.coords;\r\n    console.log(crd);\r\n  }\r\n\r\n  if (!isOn) {\r\n    console.log(\"Stopping Watch.\");\r\n    navigator.geolocation.clearWatch(id);\r\n  }\r\n\r\n  function error(err) {\r\n    console.warn('ERROR(' + err.code + '): ' + err.message);\r\n  }\r\n\r\n  options = {\r\n    enableHighAccuracy: false,\r\n    maximumAge: 0\r\n  };\r\n\r\n  if (isOn === true) {\r\n    id = navigator.geolocation.watchPosition(success, error, options);\r\n  }\r\n\r\n\r\n  const startHandler = () => {\r\n    setIsOn(true);\r\n  }\r\n\r\n  const stopHandler = () => {\r\n    setIsOn(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={startHandler}>start</button>\r\n      <button onClick={stopHandler}>stop</button>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default TempTracker"]},"metadata":{},"sourceType":"module"}