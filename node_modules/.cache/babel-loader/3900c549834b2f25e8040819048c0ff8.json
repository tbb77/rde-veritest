{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tilak\\\\OneDrive\\\\Documents\\\\GitHub\\\\pwa-for-rde-test\\\\src\\\\components\\\\WatchTrackerHooks.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport useInterval from \"../hooks/useInterval\"; // import usePrevious from \"../hooks/usePrevious\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst haversine = require('haversine');\n\nfunction WatchTracker() {\n  _s();\n\n  let id, options;\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [accuracy, setAccuracy] = useState(0);\n  const [gpsSpeed, setGpsSpeed] = useState(0);\n  const [altitude, setAltitude] = useState(0);\n  const [timestamp, setTimestamp] = useState(0);\n  const [distance, setDistance] = useState(0);\n  const [speed, setSpeed] = useState(0);\n  const [coordinates, setCoordinates] = useState([]);\n  const [isOn, setIsOn] = useState(false); // !!PROBLEM IN DEFINING THESE HERE - not updating in useinterval below!! Can't put inside useInterval, Tried useState but that also doesnt work\n  // let oldLat = usePrevious(latitude);\n  // let oldLng = usePrevious(longitude);\n\n  let oldLat, oldLng; // const [oldLat, setOldLat] = useState(0);\n  // const [oldLng, setOldLng] = useState(0);\n\n  function success(pos) {\n    oldLat = pos.coords.latitude;\n    oldLng = pos.coords.longitude;\n    console.log();\n    setLatitude(pos.coords.latitude);\n    setLongitude(pos.coords.longitude);\n    setAccuracy(pos.coords.accuracy);\n    setGpsSpeed(pos.coords.speed);\n    setAltitude(pos.coords.altitude);\n    setTimestamp(pos.timestamp);\n  } // setOldLat(latitude);\n  // setOldLng(longitude);\n\n\n  useInterval(() => {\n    setCoordinates(coordinates.concat(...[latitude, longitude, altitude, speed, gpsSpeed, timestamp, accuracy])); // console.log(JSON.stringify(coordinates));\n    // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\n\n    let start = {\n      latitude: latitude,\n      longitude: longitude\n    };\n    let end = {\n      latitude: oldLat,\n      longitude: oldLng\n    };\n    let havDis = haversine(start, end, {\n      unit: 'km'\n    });\n    setDistance(prev => prev + havDis);\n    console.log(distance);\n  }, isOn ? 1000 : null);\n\n  function error(err) {\n    console.warn('ERROR(' + err.code + '): ' + err.message);\n  }\n\n  options = {\n    enableHighAccuracy: true,\n    maximumAge: 0\n  };\n\n  function startWatch() {\n    setIsOn(true);\n    console.log(\"Starting Watch.\");\n\n    if (\"geolocation\" in navigator && \"watchPosition\" in navigator.geolocation) {\n      id = navigator.geolocation.watchPosition(success, error, options);\n    } else {\n      console.log(\"Geolocation not available.\");\n    }\n  }\n\n  function stopWatch() {\n    setIsOn(false);\n    console.log(\"Stopping Watch.\");\n    navigator.geolocation.clearWatch(id);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"[TESTS E, F]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startWatch,\n      children: \"start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopWatch,\n      children: \"stop\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WatchTracker, \"D+hBg+HL9aiES6JCeXJ2oLVHdTA=\", false, function () {\n  return [useInterval];\n});\n\n_c = WatchTracker;\nexport default WatchTracker;\n\nvar _c;\n\n$RefreshReg$(_c, \"WatchTracker\");","map":{"version":3,"sources":["C:/Users/tilak/OneDrive/Documents/GitHub/pwa-for-rde-test/src/components/WatchTrackerHooks.js"],"names":["useState","useInterval","haversine","require","WatchTracker","id","options","latitude","setLatitude","longitude","setLongitude","accuracy","setAccuracy","gpsSpeed","setGpsSpeed","altitude","setAltitude","timestamp","setTimestamp","distance","setDistance","speed","setSpeed","coordinates","setCoordinates","isOn","setIsOn","oldLat","oldLng","success","pos","coords","console","log","concat","start","end","havDis","unit","prev","error","err","warn","code","message","enableHighAccuracy","maximumAge","startWatch","navigator","geolocation","watchPosition","stopWatch","clearWatch"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport useInterval from \"../hooks/useInterval\";\r\n// import usePrevious from \"../hooks/usePrevious\";\r\n\r\nconst haversine = require('haversine')\r\n\r\nfunction WatchTracker() {\r\n  let id, options;\r\n\r\n  const [latitude, setLatitude] = useState(0);\r\n  const [longitude, setLongitude] = useState(0);\r\n  const [accuracy, setAccuracy] = useState(0);\r\n  const [gpsSpeed, setGpsSpeed] = useState(0);\r\n  const [altitude, setAltitude] = useState(0);\r\n  const [timestamp, setTimestamp] = useState(0);\r\n\r\n\r\n  const [distance, setDistance] = useState(0);\r\n  const [speed, setSpeed] = useState(0);\r\n\r\n\r\n  const [coordinates, setCoordinates] = useState([]);\r\n\r\n  const [isOn, setIsOn] = useState(false);\r\n\r\n  // !!PROBLEM IN DEFINING THESE HERE - not updating in useinterval below!! Can't put inside useInterval, Tried useState but that also doesnt work\r\n  // let oldLat = usePrevious(latitude);\r\n  // let oldLng = usePrevious(longitude);\r\n\r\n  let oldLat, oldLng;\r\n\r\n  // const [oldLat, setOldLat] = useState(0);\r\n  // const [oldLng, setOldLng] = useState(0);\r\n\r\n  function success(pos) {\r\n\r\n    oldLat = pos.coords.latitude;\r\n    oldLng = pos.coords.longitude;\r\n\r\n\r\n    console.log()\r\n\r\n    setLatitude(pos.coords.latitude);\r\n    setLongitude(pos.coords.longitude);\r\n    setAccuracy(pos.coords.accuracy);\r\n    setGpsSpeed(pos.coords.speed);\r\n    setAltitude(pos.coords.altitude);\r\n    setTimestamp(pos.timestamp);\r\n\r\n  }\r\n\r\n  // setOldLat(latitude);\r\n  // setOldLng(longitude);\r\n\r\n  useInterval(() => {\r\n    setCoordinates(\r\n      coordinates.concat(...[\r\n        latitude,\r\n        longitude,\r\n        altitude,\r\n        speed,\r\n        gpsSpeed,\r\n        timestamp,\r\n        accuracy\r\n      ])\r\n    )\r\n\r\n    // console.log(JSON.stringify(coordinates));\r\n    // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n\r\n    let start = {\r\n      latitude: latitude,\r\n      longitude: longitude,\r\n    }\r\n\r\n    let end = {\r\n      latitude: oldLat,\r\n      longitude: oldLng,\r\n    }\r\n\r\n    let havDis = haversine(start, end, { unit: 'km' })\r\n\r\n    setDistance(prev => prev + havDis);\r\n    console.log(distance);\r\n\r\n  }, isOn ? 1000 : null\r\n\r\n  )\r\n\r\n  function error(err) {\r\n    console.warn('ERROR(' + err.code + '): ' + err.message);\r\n  }\r\n\r\n  options = {\r\n    enableHighAccuracy: true,\r\n    maximumAge: 0\r\n  };\r\n\r\n  function startWatch() {\r\n    setIsOn(true);\r\n    console.log(\"Starting Watch.\")\r\n    if (\"geolocation\" in navigator && \"watchPosition\" in navigator.geolocation) {\r\n      id = navigator.geolocation.watchPosition(success, error, options);\r\n    } else {\r\n      console.log(\"Geolocation not available.\")\r\n    }\r\n  }\r\n\r\n  function stopWatch() {\r\n    setIsOn(false);\r\n    console.log(\"Stopping Watch.\");\r\n    navigator.geolocation.clearWatch(id);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>[TESTS E, F]</div>\r\n      <button onClick={startWatch}>start</button>\r\n      <button onClick={stopWatch}>stop</button>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default WatchTracker"]},"metadata":{},"sourceType":"module"}