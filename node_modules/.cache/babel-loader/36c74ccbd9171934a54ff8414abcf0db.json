{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tilak\\\\OneDrive\\\\Documents\\\\GitHub\\\\pwa-for-rde-test\\\\src\\\\components\\\\WatchTrackerHooks.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport useInterval from \"../hooks/useInterval\";\nimport usePrevious from \"../hooks/usePrevious\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst haversine = require('haversine');\n\nfunction WatchTracker() {\n  _s();\n\n  let id, options;\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [accuracy, setAccuracy] = useState(0);\n  const [gpsSpeed, setGpsSpeed] = useState(0);\n  const [altitude, setAltitude] = useState(0);\n  const [timestamp, setTimestamp] = useState(0);\n  const [distance, setDistance] = useState(0);\n  const [speed, setSpeed] = useState(0);\n  const [coordinates, setCoordinates] = useState([]);\n  const [isOn, setIsOn] = useState(false);\n\n  function success(pos) {\n    setLatitude(pos.coords.latitude);\n    setLongitude(pos.coords.longitude);\n    setAccuracy(pos.coords.accuracy);\n    setGpsSpeed(pos.coords.speed);\n    setAltitude(pos.coords.altitude);\n    setTimestamp(pos.timestamp);\n  }\n\n  let oldLat = usePrevious(latitude);\n  let oldLng = usePrevious(longitude);\n  useInterval(() => {\n    setCoordinates(coordinates.concat(...[latitude, longitude, altitude, gpsSpeed, timestamp, accuracy]));\n    console.log(JSON.stringify(coordinates)); // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\n\n    let end = {\n      latitude: latitude,\n      longitude: longitude\n    };\n    let start = {\n      latitude: oldLat,\n      longitude: oldLng\n    };\n    let havDis = haversine(start, end, {\n      unit: 'km'\n    });\n    setDistance(prev => prev + havDis);\n  }, isOn ? 1000 : null);\n\n  function error(err) {\n    console.warn('ERROR(' + err.code + '): ' + err.message);\n  }\n\n  options = {\n    enableHighAccuracy: true,\n    maximumAge: 0\n  };\n\n  function startWatch() {\n    setIsOn(true);\n    console.log(\"Starting Watch.\");\n\n    if (\"geolocation\" in navigator && \"watchPosition\" in navigator.geolocation) {\n      id = navigator.geolocation.watchPosition(success, error, options);\n    } else {\n      console.log(\"Geolocation not available.\");\n    }\n  }\n\n  function stopWatch() {\n    setIsOn(false);\n    console.log(\"Stopping Watch.\");\n    navigator.geolocation.clearWatch(id);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"[TESTS E, F]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startWatch,\n      children: \"start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopWatch,\n      children: \"stop\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WatchTracker, \"MRpsIEh73q3HxK4dngphxno7jtc=\", false, function () {\n  return [usePrevious, usePrevious, useInterval];\n});\n\n_c = WatchTracker;\nexport default WatchTracker;\n\nvar _c;\n\n$RefreshReg$(_c, \"WatchTracker\");","map":{"version":3,"sources":["C:/Users/tilak/OneDrive/Documents/GitHub/pwa-for-rde-test/src/components/WatchTrackerHooks.js"],"names":["useState","useInterval","usePrevious","haversine","require","WatchTracker","id","options","latitude","setLatitude","longitude","setLongitude","accuracy","setAccuracy","gpsSpeed","setGpsSpeed","altitude","setAltitude","timestamp","setTimestamp","distance","setDistance","speed","setSpeed","coordinates","setCoordinates","isOn","setIsOn","success","pos","coords","oldLat","oldLng","concat","console","log","JSON","stringify","end","start","havDis","unit","prev","error","err","warn","code","message","enableHighAccuracy","maximumAge","startWatch","navigator","geolocation","watchPosition","stopWatch","clearWatch"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport useInterval from \"../hooks/useInterval\";\r\nimport usePrevious from \"../hooks/usePrevious\";\r\n\r\nconst haversine = require('haversine')\r\n\r\nfunction WatchTracker() {\r\n  let id, options;\r\n\r\n  const [latitude, setLatitude] = useState(0);\r\n  const [longitude, setLongitude] = useState(0);\r\n  const [accuracy, setAccuracy] = useState(0);\r\n  const [gpsSpeed, setGpsSpeed] = useState(0);\r\n  const [altitude, setAltitude] = useState(0);\r\n  const [timestamp, setTimestamp] = useState(0);\r\n\r\n\r\n  const [distance, setDistance] = useState(0);\r\n  const [speed, setSpeed] = useState(0);\r\n\r\n\r\n  const [coordinates, setCoordinates] = useState([]);\r\n\r\n  const [isOn, setIsOn] = useState(false);\r\n\r\n  function success(pos) {\r\n\r\n    setLatitude(pos.coords.latitude);\r\n    setLongitude(pos.coords.longitude);\r\n    setAccuracy(pos.coords.accuracy);\r\n    setGpsSpeed(pos.coords.speed);\r\n    setAltitude(pos.coords.altitude);\r\n    setTimestamp(pos.timestamp);\r\n\r\n  }\r\n\r\n  let oldLat = usePrevious(latitude);\r\n  let oldLng = usePrevious(longitude);\r\n\r\n  useInterval(() => {\r\n    setCoordinates(\r\n      coordinates.concat(...[\r\n        latitude,\r\n        longitude,\r\n        altitude,\r\n        gpsSpeed,\r\n        timestamp,\r\n        accuracy\r\n      ])\r\n    )\r\n\r\n    console.log(JSON.stringify(coordinates));\r\n    // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n\r\n    let end = {\r\n      latitude: latitude,\r\n      longitude: longitude,\r\n    }\r\n\r\n    let start = {\r\n      latitude: oldLat,\r\n      longitude: oldLng,\r\n    }\r\n\r\n    let havDis = haversine(start, end, { unit: 'km' })\r\n    \r\n    setDistance(prev => prev + havDis)\r\n\r\n  }, isOn ? 1000 : null\r\n\r\n  )\r\n\r\n  function error(err) {\r\n    console.warn('ERROR(' + err.code + '): ' + err.message);\r\n  }\r\n\r\n  options = {\r\n    enableHighAccuracy: true,\r\n    maximumAge: 0\r\n  };\r\n\r\n  function startWatch() {\r\n    setIsOn(true);\r\n    console.log(\"Starting Watch.\")\r\n    if (\"geolocation\" in navigator && \"watchPosition\" in navigator.geolocation) {\r\n      id = navigator.geolocation.watchPosition(success, error, options);\r\n    } else {\r\n      console.log(\"Geolocation not available.\")\r\n    }\r\n  }\r\n\r\n  function stopWatch() {\r\n    setIsOn(false);\r\n    console.log(\"Stopping Watch.\");\r\n    navigator.geolocation.clearWatch(id);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>[TESTS E, F]</div>\r\n      <button onClick={startWatch}>start</button>\r\n      <button onClick={stopWatch}>stop</button>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default WatchTracker"]},"metadata":{},"sourceType":"module"}