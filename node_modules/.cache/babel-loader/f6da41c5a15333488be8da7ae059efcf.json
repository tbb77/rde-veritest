{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tilak\\\\OneDrive\\\\Documents\\\\GitHub\\\\pwa-for-rde-test\\\\src\\\\components\\\\NewTracker.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Timer from 'react-compound-timer';\nimport StartStopButton from './StartStopButton';\nimport useInterval from '../hooks/useInterval';\nimport { useIsMount } from './UseIsMount';\nimport \"../css/tracker.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst haversine = require('haversine'); // import useSound from 'use-sound' // Leave this for adding sound notifications for later\n\n\nconst Tracker = () => {\n  _s();\n\n  // BC variables:\n  let urbanMax = 33;\n  let ruralMax = 55;\n  let motorwayMax = 80; // State Variables:\n\n  const [delay] = useState(1000);\n  const [isOn, setIsOn] = useState(false); // Output Data Array\n\n  const [coordinates, setCoordinates] = useState([]); // Output Data\n\n  const [speed, setSpeed] = useState(0);\n  const [gpsSpeed, setGpsSpeed] = useState(0);\n  const [altitude, setAltitude] = useState(0);\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [timestamp, setTimestamp] = useState(0);\n  const [distance, setDistance] = useState(0);\n  const [accuracy, setAccuracy] = useState(0); // Trip Segment Distances\n\n  const [slowDist, setSlowDist] = useState(0);\n  const [mediumDist, setMediumDist] = useState(0);\n  const [fastDist, setFastDist] = useState(0); // Geolocation:\n\n  const isMount = useIsMount();\n  useEffect(() => {\n    if (!isMount) {\n      if (\"geolocation\" in navigator && \"watchPosition\" in navigator.geolocation) {\n        const id = navigator.geolocation.watchPosition(pos => {\n          let deltaTime = (pos.timestamp - timestamp) / 3.6e+6; // ms -> hr\n          // console.log(\"⏳ Time Difference [hrs]: \" + deltaTime)\n          // console.log(\"🔃 Latitude Difference: \" + (pos.coords.latitude - latitude))\n          // console.log(\"🔁 Longitude Difference: \" + (pos.coords.longitude - longitude))\n\n          let start = {\n            latitude: latitude,\n            longitude: longitude\n          };\n          let end = {\n            latitude: pos.coords.latitude,\n            longitude: pos.coords.longitude\n          };\n          let havDis = haversine(start, end, {\n            unit: 'km'\n          }); // console.log(\"💨 Distance Travelled: \" + havDis)\n\n          deltaTime = deltaTime === 0 ? 1 : deltaTime; // set to 1 to mask NaN error\n\n          let speed = havDis / deltaTime; // console.log(\"🏎 Calculated Speed: \" + speed + \"m/s\")\n          // Coordinates array data:\n\n          setLatitude(pos.coords.latitude);\n          setLongitude(pos.coords.longitude);\n          setAltitude(pos.coords.altitude);\n          setGpsSpeed(pos.coords.speed);\n          setTimestamp(pos.timestamp);\n          setAccuracy(pos.coords.accuracy);\n          setSpeed(speed); // To start logging\n\n          if (latitude === 0 && longitude === 0) {\n            return;\n          } // To stop logging\n\n\n          if (isOn === false) {\n            navigator.geolocation.clearWatch(id);\n          }\n\n          setDistance(prev => prev + havDis); // Segment distances\n\n          if (speed < urbanMax) {\n            setSlowDist(prev => prev + havDis);\n          } else if (speed < ruralMax) {\n            setMediumDist(prev => prev + havDis);\n          } else if (speed < motorwayMax) {\n            setFastDist(prev => prev + havDis);\n          }\n        }, positionError(), {\n          enableHighAccuracy: true,\n          maximumAge: 0\n        });\n      } else {\n        console.log('Geolocation is not available.');\n      }\n    }\n  }, [urbanMax, ruralMax, motorwayMax, latitude, longitude, timestamp, isOn, isMount]);\n\n  function positionError() {\n    console.error('Err');\n  }\n\n  useInterval(() => {\n    setCoordinates(coordinates.concat([latitude, longitude, altitude, speed, gpsSpeed, timestamp, accuracy]));\n    console.log(JSON.stringify(coordinates));\n    localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\n  }, isOn ? delay : null);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Timer, {\n      initialTime: 0,\n      startImmediately: false,\n      onStart: () => {\n        console.log('onStart hook');\n        setIsOn(true);\n      },\n      onStop: () => {\n        console.log('onStop hook');\n        setIsOn(false);\n      },\n      onReset: () => {\n        console.log('onReset hook');\n        setIsOn(false);\n        setCoordinates([]); // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\n      },\n      children: ({\n        start,\n        resume,\n        pause,\n        stop,\n        reset,\n        timerState\n      }) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Timer.Hours, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 29\n          }, this), \" Hrs\\xA0\", /*#__PURE__*/_jsxDEV(Timer.Minutes, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 29\n          }, this), \" Min\\xA0\", /*#__PURE__*/_jsxDEV(Timer.Seconds, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 29\n          }, this), \" Sec\\xA0\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(StartStopButton, {\n            startWatch: start,\n            stopWatch: stop\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: reset,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"TESTS E, F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" -------------- SPEED: -------------- \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: [speed, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: [\"GPS: \", gpsSpeed, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" ------------------------------------- \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"altitude is: \", altitude, \" [m]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"latitude is: \", latitude, \" [\\xB0]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"longitude is: \", longitude, \" [\\xB0]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"GPS accuracy is: \", accuracy, \" [m] \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" ------------- BC VERIFICATION: ------------- \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"cumulative distance is: \", distance, \" [km]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"trip segment is:\\xA0\", speed < urbanMax && \"URBAN\", speed > urbanMax && speed < ruralMax && \"RURAL\", speed > ruralMax && speed < motorwayMax && \"MOTORWAY\", \"\\xA0[U/R/M]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"U distance share is: \", slowDist, \" [km]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"R distance share is: \", mediumDist, \" [km]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"M distance share is: \", fastDist, \" [km]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Tracker, \"El/D3wBgBcWx0eDEzCUrTcF/6KA=\", false, function () {\n  return [useIsMount, useInterval];\n});\n\n_c = Tracker;\nexport default Tracker;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tracker\");","map":{"version":3,"sources":["C:/Users/tilak/OneDrive/Documents/GitHub/pwa-for-rde-test/src/components/NewTracker.js"],"names":["React","useEffect","useState","Timer","StartStopButton","useInterval","useIsMount","haversine","require","Tracker","urbanMax","ruralMax","motorwayMax","delay","isOn","setIsOn","coordinates","setCoordinates","speed","setSpeed","gpsSpeed","setGpsSpeed","altitude","setAltitude","latitude","setLatitude","longitude","setLongitude","timestamp","setTimestamp","distance","setDistance","accuracy","setAccuracy","slowDist","setSlowDist","mediumDist","setMediumDist","fastDist","setFastDist","isMount","navigator","geolocation","id","watchPosition","pos","deltaTime","start","end","coords","havDis","unit","clearWatch","prev","positionError","enableHighAccuracy","maximumAge","console","log","error","concat","JSON","stringify","localStorage","setItem","resume","pause","stop","reset","timerState"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\r\nimport Timer from 'react-compound-timer'\r\nimport StartStopButton from './StartStopButton'\r\nimport useInterval from '../hooks/useInterval'\r\nimport { useIsMount } from './UseIsMount'\r\nimport \"../css/tracker.css\"\r\nconst haversine = require('haversine')\r\n\r\n// import useSound from 'use-sound' // Leave this for adding sound notifications for later\r\n\r\nconst Tracker = () => {\r\n\r\n    // BC variables:\r\n    let urbanMax = 33;\r\n    let ruralMax = 55;\r\n    let motorwayMax = 80;\r\n\r\n    // State Variables:\r\n    const [delay] = useState(1000);\r\n    const [isOn, setIsOn] = useState(false)\r\n\r\n    // Output Data Array\r\n    const [coordinates, setCoordinates] = useState([]);\r\n\r\n    // Output Data\r\n    const [speed, setSpeed] = useState(0);\r\n    const [gpsSpeed, setGpsSpeed] = useState(0);\r\n    const [altitude, setAltitude] = useState(0);\r\n    const [latitude, setLatitude] = useState(0);\r\n    const [longitude, setLongitude] = useState(0);\r\n    const [timestamp, setTimestamp] = useState(0);\r\n    const [distance, setDistance] = useState(0);\r\n    const [accuracy, setAccuracy] = useState(0);\r\n\r\n    // Trip Segment Distances\r\n    const [slowDist, setSlowDist] = useState(0);\r\n    const [mediumDist, setMediumDist] = useState(0);\r\n    const [fastDist, setFastDist] = useState(0);\r\n\r\n    // Geolocation:\r\n\r\n    const isMount = useIsMount();\r\n\r\n    useEffect(() => {\r\n        if (!isMount) {\r\n            if (\"geolocation\" in navigator && \"watchPosition\" in navigator.geolocation) {\r\n                const id = navigator.geolocation.watchPosition(\r\n                    (pos) => {\r\n\r\n                        let deltaTime = (pos.timestamp - timestamp) / 3.6e+6; // ms -> hr\r\n                        // console.log(\"⏳ Time Difference [hrs]: \" + deltaTime)\r\n                        // console.log(\"🔃 Latitude Difference: \" + (pos.coords.latitude - latitude))\r\n                        // console.log(\"🔁 Longitude Difference: \" + (pos.coords.longitude - longitude))\r\n\r\n                        let start = {\r\n                            latitude: latitude,\r\n                            longitude: longitude,\r\n                        }\r\n\r\n                        let end = {\r\n                            latitude: pos.coords.latitude,\r\n                            longitude: pos.coords.longitude,\r\n                        }\r\n\r\n                        let havDis = haversine(start, end, { unit: 'km' })\r\n                        // console.log(\"💨 Distance Travelled: \" + havDis)\r\n\r\n                        deltaTime = (deltaTime === 0) ? 1 : deltaTime; // set to 1 to mask NaN error\r\n                        let speed = (havDis / deltaTime);\r\n                        // console.log(\"🏎 Calculated Speed: \" + speed + \"m/s\")\r\n\r\n                        // Coordinates array data:\r\n                        setLatitude(pos.coords.latitude);\r\n                        setLongitude(pos.coords.longitude);\r\n                        setAltitude(pos.coords.altitude);\r\n                        setGpsSpeed(pos.coords.speed);\r\n                        setTimestamp(pos.timestamp);\r\n                        setAccuracy(pos.coords.accuracy);\r\n                        setSpeed(speed);\r\n\r\n                        // To start logging\r\n                        if (latitude === 0 && longitude === 0) {\r\n                            return\r\n                        }\r\n\r\n                        // To stop logging\r\n                        if (isOn === false) {\r\n                            navigator.geolocation.clearWatch(id);\r\n                        }\r\n\r\n                        setDistance(prev => prev + havDis)\r\n\r\n                        // Segment distances\r\n                        if (speed < urbanMax) {\r\n                            setSlowDist(prev => prev + havDis)\r\n                        } else if (speed < ruralMax) {\r\n                            setMediumDist(prev => prev + havDis)\r\n                        } else if (speed < motorwayMax) {\r\n                            setFastDist(prev => prev + havDis)\r\n                        }\r\n\r\n                    },\r\n\r\n                    positionError(),\r\n\r\n                    {\r\n                        enableHighAccuracy: true,\r\n                        maximumAge: 0\r\n                    }\r\n                );\r\n\r\n            } else {\r\n                console.log('Geolocation is not available.');\r\n            }\r\n        }\r\n\r\n\r\n    }, [urbanMax, ruralMax, motorwayMax, latitude, longitude, timestamp, isOn, isMount])\r\n\r\n\r\n    function positionError() {\r\n        console.error('Err');\r\n    }\r\n\r\n    useInterval(() => {\r\n        setCoordinates(coordinates.concat([latitude, longitude, altitude, speed, gpsSpeed, timestamp, accuracy]));\r\n        console.log(JSON.stringify(coordinates));\r\n        localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n    }, isOn ? delay : null)\r\n\r\n    return (\r\n        <div>\r\n            <Timer\r\n                initialTime={0}\r\n                startImmediately={false}\r\n                onStart={() => {\r\n                    console.log('onStart hook');\r\n                    setIsOn(true);\r\n                }}\r\n                onStop={() => {\r\n                    console.log('onStop hook');\r\n                    setIsOn(false);\r\n                }}\r\n                onReset={() => {\r\n                    console.log('onReset hook')\r\n                    setIsOn(false);\r\n                    setCoordinates([]);\r\n                    // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n                }}\r\n            >\r\n                {({ start, resume, pause, stop, reset, timerState }) => (\r\n                    <React.Fragment>\r\n                        <div>\r\n                            <Timer.Hours /> Hrs&nbsp;\r\n                            <Timer.Minutes /> Min&nbsp;\r\n                            <Timer.Seconds /> Sec&nbsp;\r\n                        </div>\r\n\r\n                        <div>\r\n                            <StartStopButton startWatch={start} stopWatch={stop} />\r\n                            <button onClick={reset}>Reset</button>\r\n                        </div>\r\n\r\n                    </React.Fragment>\r\n                )}\r\n            </Timer >\r\n\r\n            <div>TESTS E, F</div>\r\n            <div> -------------- SPEED: -------------- </div>\r\n            <div className=\"Data-Label\">{speed} </div>\r\n            <div className=\"Data-Label\">GPS: {gpsSpeed} </div>\r\n            <div> ------------------------------------- </div>\r\n            <div>altitude is: {altitude} [m]</div>\r\n            <div>latitude is: {latitude} [&deg;]</div>\r\n            <div>longitude is: {longitude} [&deg;]</div>\r\n            <div>GPS accuracy is: {accuracy} [m] </div>\r\n            <div> ------------- BC VERIFICATION: ------------- </div>\r\n            <div>cumulative distance is: {distance} [km]</div>\r\n            <div>trip segment is:&nbsp;\r\n                    {speed < urbanMax &&\r\n                    \"URBAN\"\r\n                }\r\n                {speed > urbanMax && speed < ruralMax &&\r\n                    \"RURAL\"\r\n                }\r\n                {speed > ruralMax && speed < motorwayMax &&\r\n                    \"MOTORWAY\"\r\n                }\r\n                    &nbsp;[U/R/M]</div>\r\n            {/* <div>U share is: ____ [%]</div>\r\n            <div>R share is: ____ [%]</div>\r\n            <div>M share is: ____ [%]</div> */}\r\n            <div>U distance share is: {slowDist} [km]</div>\r\n            <div>R distance share is: {mediumDist} [km]</div>\r\n            <div>M distance share is: {fastDist} [km]</div>\r\n        </div >\r\n    )\r\n\r\n}\r\n\r\nexport default Tracker\r\n\r\n"]},"metadata":{},"sourceType":"module"}