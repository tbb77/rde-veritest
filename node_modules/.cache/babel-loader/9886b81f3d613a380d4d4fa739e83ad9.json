{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tilak\\\\OneDrive\\\\Documents\\\\GitHub\\\\pwa-for-rde-test\\\\src\\\\components\\\\MyTimer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Timer from 'react-compound-timer';\nimport StartStopButton from './StartStopButton';\nimport useInterval from '../hooks/useInterval';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyTimer = () => {\n  _s();\n\n  let coordinates = [];\n  let [speed, setSpeed] = useState(0);\n  let [altitude, setAltitude] = useState(0); // let [distance, setDistance] = useState(0);\n\n  let [latitude, setLatitude] = useState(0);\n  let [longitude, setLongitude] = useState(0);\n  useEffect(() => {\n    console.log(latitude);\n  }, [latitude]);\n  useInterval(() => {\n    function startWatch() {\n      if (\"geolocation\" in navigator && \"getCurrentPosition\" in navigator.geolocation) {\n        let watchPos = navigator.geolocation.getCurrentPosition(pos => {\n          setLatitude(pos.coords.latitude);\n          setLongitude(pos.coords.longitude);\n          setAltitude(pos.coords.altitude);\n          setSpeed(pos.coords.speed);\n          coordinates.push([latitude, longitude, altitude, speed]);\n          console.log(coordinates);\n          console.log(localStorage.setItem(\"coordinates\", JSON.stringify(coordinates)));\n        }, () => {\n          console.log('err');\n        }, {\n          enableHighAccuracy: true,\n          maximumAge: 0\n        });\n      } else {\n        console.log(\"Geolocation not available!\");\n      }\n    }\n  }, isOn ? delay : null);\n  let interval = null;\n  return /*#__PURE__*/_jsxDEV(Timer, {\n    initialTime: 0,\n    startImmediately: false,\n    onStart: () => {\n      console.log('onStart hook');\n      interval = setInterval(() => {\n        startWatch();\n      }, 1000);\n    },\n    onStop: () => {\n      console.log('onStop hook');\n      clearInterval(interval);\n    },\n    onReset: () => console.log('onReset hook'),\n    children: ({\n      start,\n      resume,\n      pause,\n      stop,\n      reset,\n      timerState\n    }) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Timer.Hours, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, this), \" hours\\xA0\", /*#__PURE__*/_jsxDEV(Timer.Minutes, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this), \" minutes\\xA0\", /*#__PURE__*/_jsxDEV(Timer.Seconds, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this), \" seconds\\xA0\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(StartStopButton, {\n          startWatch: start,\n          stopWatch: stop\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: reset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MyTimer, \"wytCRJ4usWNqcs9szq5OWTp4gyQ=\", false, function () {\n  return [useInterval];\n});\n\n_c = MyTimer;\nexport default MyTimer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyTimer\");","map":{"version":3,"sources":["C:/Users/tilak/OneDrive/Documents/GitHub/pwa-for-rde-test/src/components/MyTimer.js"],"names":["React","useState","useEffect","Timer","StartStopButton","useInterval","MyTimer","coordinates","speed","setSpeed","altitude","setAltitude","latitude","setLatitude","longitude","setLongitude","console","log","startWatch","navigator","geolocation","watchPos","getCurrentPosition","pos","coords","push","localStorage","setItem","JSON","stringify","enableHighAccuracy","maximumAge","isOn","delay","interval","setInterval","clearInterval","start","resume","pause","stop","reset","timerState"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nimport Timer from 'react-compound-timer'\r\nimport StartStopButton from './StartStopButton'\r\nimport useInterval from '../hooks/useInterval'\r\n\r\nconst MyTimer = () => {\r\n\r\n\r\n    let coordinates = [];\r\n\r\n    let [speed, setSpeed] = useState(0);\r\n    let [altitude, setAltitude] = useState(0);\r\n    // let [distance, setDistance] = useState(0);\r\n    let [latitude, setLatitude] = useState(0);\r\n    let [longitude, setLongitude] = useState(0);\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(latitude)\r\n    }, [latitude])\r\n\r\n    useInterval(\r\n        () => {\r\n            function startWatch() {\r\n                if (\"geolocation\" in navigator && \"getCurrentPosition\" in navigator.geolocation) {\r\n                    let watchPos = navigator.geolocation.getCurrentPosition(\r\n                        (pos) => {\r\n                            setLatitude(pos.coords.latitude);\r\n                            setLongitude(pos.coords.longitude);\r\n                            setAltitude(pos.coords.altitude);\r\n                            setSpeed(pos.coords.speed);\r\n\r\n                            coordinates.push([latitude, longitude, altitude, speed]);\r\n                            console.log(coordinates);\r\n                            console.log(localStorage.setItem(\"coordinates\", JSON.stringify(coordinates)));\r\n                        },\r\n                        () => { console.log('err') }\r\n                        , {\r\n                            enableHighAccuracy: true,\r\n                            maximumAge: 0\r\n                        });\r\n                } else {\r\n                    console.log(\"Geolocation not available!\")\r\n                }\r\n\r\n            }\r\n        },\r\n        isOn ? delay : null,\r\n    )\r\n\r\n    let interval = null;\r\n    return (\r\n        <Timer\r\n            initialTime={0}\r\n            startImmediately={false}\r\n            onStart={() => {\r\n                console.log('onStart hook');\r\n                interval = setInterval(() => {\r\n                    startWatch()\r\n                }, 1000)\r\n            }}\r\n            onStop={() => {\r\n                console.log('onStop hook');\r\n                clearInterval(interval);\r\n            }}\r\n            onReset={() => console.log('onReset hook')}\r\n        >\r\n            {({ start, resume, pause, stop, reset, timerState }) => (\r\n                <React.Fragment>\r\n                    <div>\r\n                        <Timer.Hours /> hours&nbsp;\r\n                        <Timer.Minutes /> minutes&nbsp;\r\n                        <Timer.Seconds /> seconds&nbsp;\r\n                    </div>\r\n                    <div>\r\n                        <StartStopButton startWatch={start} stopWatch={stop} />\r\n                        <button onClick={reset}>Reset</button>\r\n                    </div>\r\n                </React.Fragment>\r\n            )}\r\n        </Timer >\r\n    )\r\n}\r\n\r\nexport default MyTimer\r\n"]},"metadata":{},"sourceType":"module"}