{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tilak\\\\OneDrive\\\\Documents\\\\GitHub\\\\pwa-for-rde-test\\\\src\\\\components\\\\WatchTracker.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport useInterval from \"../hooks/useInterval\";\nimport StartStopButton from \"./StartStopButton\";\nimport Timer from \"react-compound-timer\";\nimport Sound from \"react-sound\";\nimport startSound from \"../sounds/start.mp3\";\nimport stopSound from \"../sounds/stop.mp3\";\nimport failSound from \"../sounds/failSoftShort.mp3\";\nimport passSound from \"../sounds/pass.mp3\";\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexGrow: 1,\n    flexDirection: 'column',\n    flexWrap: 'wrap',\n    alignContent: 'center',\n    alignItems: 'center',\n    padding: '0 2em'\n  },\n  // paper: {\n  //   padding: theme.spacing(2),\n  //   textAlign: 'center',\n  //   color: '#fafafa',\n  // },\n  gridItem: {\n    border: 'solid red 1px'\n  }\n}));\n\nconst haversine = require('haversine');\n\nfunction WatchTracker() {\n  _s();\n\n  // Sounds\n  const [startPlaying, setStartPlaying] = useState(false);\n  const [stopPlaying, setStopPlaying] = useState(false);\n  const [passPlaying, setPassPlaying] = useState(false);\n  const [failPlaying, setFailPlaying] = useState(false);\n  let id, options; // BCs\n\n  let dataRate = 500; //[ms]\n\n  let urbanMax = 33;\n  let ruralMax = 55;\n  let motorwayMax = 80;\n  let uMaxShare = 50; //[%]\n\n  let uMinShare = 5;\n  let rMaxShare = 40;\n  let rMinShare = 5;\n  let mMaxShare = 40;\n  let mMinShare = 5;\n  let urmMinDist = 0.2; //[km]\n\n  let maxAltChange = 100; //[m]\n\n  let maxTestTime = 15; //[min]\n\n  let minTestTime = 6; //[min]\n\n  const [minTimeReached, setMinTimeReached] = useState(false);\n  const [maxTimeReached, setMaxTimeReached] = useState(false);\n  let idleTime = 200; //[s]\n\n  const [idleIndex, setIdleIndex] = useState(0); //[s]\n\n  let coldStartEnd = 1; //[min]\n\n  const [isColdStart, setIsColdStart] = useState(true); // Data\n\n  const [coordinates, setCoordinates] = useState([0, 0, 0, 0, 0, 0, 0]);\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [accuracy, setAccuracy] = useState(0);\n  const [gpsSpeed, setGpsSpeed] = useState(0);\n  const [altitude, setAltitude] = useState(0);\n  const [timestamp, setTimestamp] = useState(0);\n  const [startAlt, setStartAlt] = useState(0);\n  const [endAlt, setEndAlt] = useState(0);\n  const [distance, setDistance] = useState(0);\n  const [speed, setSpeed] = useState(0);\n  const [urbanDist, setUrbanDist] = useState(0);\n  const [ruralDist, setRuralDist] = useState(0);\n  const [motorwayDist, setMotorwayDist] = useState(0);\n  const [urbanShare, setUrbanShare] = useState(0);\n  const [ruralShare, setRuralShare] = useState(0);\n  const [motorwayShare, setMotorwayShare] = useState(0); // Phases \n\n  const [phase, setPhase] = useState(\"Pre-Test\");\n  const [testStatus, setTestStatus] = useState(0); // 0 = PRE-TEST\n  // 1 = IN PROGRESS\n  // 2 = PASS\n  // 3 = FAIL \n\n  const errorStatus = [\"MAX IDLING TIME!\", \"MAX SPEED!\", \"HIGH TIME!\", \"LOW TIME!\", \"U MIN DISTANCE!\", \"R MIN DISTANCE!\", \"M MIN DISTANCE!\", \"U MIN SHARE!\", \"R MIN SHARE!\", \"M MIN SHARE!\", \"U MAX SHARE!\", \"R MAX SHARE!\", \"M MAX SHARE!\", \"MAX ALTITUDE!\"]; // Failure Switches\n\n  const [error4, setError4] = useState(false);\n  const [error5, setError5] = useState(false);\n  const [error6, setError6] = useState(false);\n  const [error7, setError7] = useState(false);\n  const [error8, setError8] = useState(false);\n  const [error9, setError9] = useState(false);\n  const [error10, setError10] = useState(false);\n  const [error11, setError11] = useState(false);\n  const [error12, setError12] = useState(false);\n  const [error13, setError13] = useState(false);\n  const [error14, setError14] = useState(false);\n  const [error15, setError15] = useState(false);\n  const [error16, setError16] = useState(false);\n  const [error17, setError17] = useState(false); // Indexes and Switches\n\n  const [index, setIndex] = useState(0);\n  const [isOn, setIsOn] = useState(false);\n\n  function success(pos) {\n    setLatitude(pos.coords.latitude);\n    setLongitude(pos.coords.longitude);\n    setAccuracy(pos.coords.accuracy);\n    setGpsSpeed(pos.coords.speed);\n    setAltitude(pos.coords.altitude);\n    setTimestamp(pos.timestamp);\n  }\n\n  useInterval(() => {\n    setGpsSpeed(gpsSpeed === null ? 0 : gpsSpeed); // set to 0 to mask null value\n\n    setCoordinates(coordinates.concat(...[latitude, longitude, altitude, speed, gpsSpeed, timestamp, accuracy]));\n    console.log(JSON.stringify(coordinates));\n    localStorage.setItem(\"coordinates\", JSON.stringify(coordinates)); // log lats and longs (new):\n    // console.log(\"🔃 \" + latitude)\n    // console.log(\"🔁 \" + longitude)\n\n    let end = {\n      latitude: latitude,\n      longitude: longitude\n    };\n    let oldLat = coordinates[index];\n    let oldLng = coordinates[index + 1];\n    setIndex(i => i + 7);\n    let start = {\n      latitude: oldLat,\n      longitude: oldLng\n    }; // log lats and longs (old):\n    // console.log(\"🔃old \" + start.latitude)\n    // console.log(\"🔁old \" + start.longitude)\n\n    let havDis = haversine(start, end, {\n      unit: 'km'\n    });\n\n    if (start.latitude === 0 && start.longitude === 0) {\n      return;\n    }\n\n    setDistance(prev => prev + havDis); // log cumulative distance:\n    // console.log(\"💨 \" + distance);\n\n    let startTime = coordinates[index - 2];\n    let endTime = timestamp;\n    let deltaT = (endTime - startTime) / 3.6e+6; // ms -> hr;\n\n    deltaT = deltaT === 0 ? 1 : deltaT; // set to 1 to mask NaN error\n    // console.log(\"⏳ \" + deltaT)\n\n    if (havDis > 0) {\n      setSpeed(havDis / deltaT);\n    }\n\n    ;\n\n    if (speed >= 0 && speed < 1 && start.latitude === 0) {\n      setIdleIndex(prev => prev + 2 * (dataRate / 1000)); // stopwatch count in [s]\n    } else if (speed >= 0 && speed < 1) {\n      setIdleIndex(prev => prev + dataRate / 1000);\n    }\n\n    if (speed === 0 && isOn === false) {\n      setPhase(\"Pre-Test\");\n    } else if (isColdStart === true) {\n      setPhase(\"Cold Start\");\n    } else if (speed < urbanMax) {\n      setPhase(\"U\");\n    } else if (speed < ruralMax) {\n      setPhase(\"R\");\n    } else if (speed < motorwayMax) {\n      setPhase(\"M\");\n    } else {\n      setPhase(\"EXTREME\");\n    }\n\n    if (speed < urbanMax && speed > 0) {\n      setUrbanDist(prev => prev + havDis);\n    }\n\n    if (speed < ruralMax && speed > urbanMax) {\n      setRuralDist(prev => prev + havDis);\n    }\n\n    if (speed < motorwayMax && speed > ruralMax) {\n      setMotorwayDist(prev => prev + havDis);\n    }\n\n    setUrbanShare(distance === 0 ? 0 : urbanDist / distance * 100);\n    setRuralShare(distance === 0 ? 0 : ruralDist / distance * 100);\n    setMotorwayShare(distance === 0 ? 0 : motorwayDist / distance * 100); // BC VERIFICATION\n    // Ordered for checking priority and code efficiency\n\n    setTestStatus(1); // set to in-progress the beginning\n    // HARD FAILURES (Break on 4, 5 and 6) \n    // Time\n\n    if (idleIndex >= idleTime) {\n      setError4(errorStatus[4 - 4]);\n      setIsOn(false);\n      stopWatch();\n    } // Speed\n\n\n    if (speed > motorwayMax) {\n      setError5(errorStatus[5 - 4]);\n      setIsOn(false);\n      stopWatch();\n    } // Time\n\n\n    if (maxTimeReached) {\n      setError6(errorStatus[6 - 4]);\n      setIsOn(false);\n      stopWatch();\n    } // SOFT FAILURES\n    // Time \n\n\n    if (!minTimeReached) {\n      setError7(errorStatus[7 - 4]);\n    } else setError7(false); // Distance [km]\n\n\n    if (urbanDist < urmMinDist) {\n      setError8(errorStatus[8 - 4]);\n    } else setError8(false);\n\n    if (ruralDist < urmMinDist) {\n      setError9(errorStatus[9 - 4]);\n    } else setError9(false);\n\n    if (motorwayDist < urmMinDist) {\n      setError10(errorStatus[10 - 4]);\n    } else setError10(false); // Min Distance Share [%]\n\n\n    if (urbanShare < uMinShare) {\n      setError11(errorStatus[11 - 4]);\n    } else setError11(false);\n\n    if (ruralShare < rMinShare) {\n      setError12(errorStatus[12 - 4]);\n    } else setError12(false);\n\n    if (motorwayShare < mMinShare) {\n      setError13(errorStatus[13 - 4]);\n    } else setError13(false); // Max Distance Share [%]\n\n\n    if (urbanShare > uMaxShare) {\n      setError14(errorStatus[14 - 4]);\n    } else setError14(false);\n\n    if (ruralShare > rMaxShare) {\n      setError15(errorStatus[15 - 4]);\n    } else setError15(false);\n\n    if (motorwayShare > mMaxShare) {\n      setError16(errorStatus[16 - 4]);\n    } else setError16(false);\n  }, isOn ? dataRate : null);\n\n  function error(err) {\n    console.warn('ERROR(' + err.code + '): ' + err.message);\n  }\n\n  options = {\n    enableHighAccuracy: true,\n    maximumAge: 0\n  };\n\n  function startWatch() {\n    // console.log(\"Starting Watch.\")\n    if (\"geolocation\" in navigator && \"watchPosition\" in navigator.geolocation) {\n      id = navigator.geolocation.watchPosition(success, error, options);\n    } else {\n      console.log(\"Geolocation not available.\");\n    }\n  }\n\n  function stopWatch() {\n    // console.log(\"Stopping Watch.\");\n    navigator.geolocation.clearWatch(id);\n    setStartAlt(coordinates[2]);\n    setEndAlt(altitude);\n\n    if (Math.abs(startAlt - endAlt) > maxAltChange) {\n      setError17(errorStatus[17 - 4]);\n    }\n\n    if (error4 || error5 || error6 || error7 || error8 || error9 || error10 || error11 || error12 || error13 || error14 || error15 || error16 || error17) {\n      setTestStatus(3);\n      setFailPlaying(true);\n      return;\n    } else {\n      setTestStatus(2);\n      console.log(\"Test Passed.\");\n      setPassPlaying(true);\n    }\n  }\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"[TEST H]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Sound, {\n        playStatus: startPlaying ? Sound.status.PLAYING : Sound.status.STOPPED,\n        url: startSound,\n        onFinishedPlaying: () => setStartPlaying(!startPlaying)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Sound, {\n        playStatus: stopPlaying ? Sound.status.PLAYING : Sound.status.STOPPED,\n        url: stopSound,\n        onFinishedPlaying: () => setStopPlaying(!stopPlaying)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Sound, {\n        playStatus: passPlaying ? Sound.status.PLAYING : Sound.status.STOPPED,\n        url: passSound,\n        onFinishedPlaying: () => setPassPlaying(!passPlaying)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Sound, {\n        playStatus: failPlaying ? Sound.status.PLAYING : Sound.status.STOPPED,\n        url: failSound,\n        onFinishedPlaying: () => setFailPlaying(!failPlaying)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Timer, {\n        initialTime: 0,\n        startImmediately: false,\n        lastUnit: \"m\",\n        checkpoints: [{\n          time: coldStartEnd * 60000,\n          callback: () => setIsColdStart(false)\n        }, {\n          time: maxTestTime * 60000,\n          callback: () => setMaxTimeReached(true)\n        }, {\n          time: minTestTime * 60000,\n          callback: () => setMinTimeReached(true)\n        }],\n        onStart: () => {\n          // console.log('onStart hook');\n          startWatch();\n          setIsOn(true);\n          setTestStatus(1);\n          setStartPlaying(true);\n        },\n        onStop: () => {\n          // console.log('onStop hook');\n          stopWatch();\n          setIsOn(false);\n          setPhase(\"Post-Test\");\n          setStopPlaying(true);\n        },\n        onReset: () => {\n          // console.log('onReset hook')\n          setTestStatus(0);\n          setFailPlaying(false);\n          navigator.geolocation.clearWatch(id);\n          setCoordinates([0, 0, 0, 0, 0, 0, 0]);\n          setIndex(0);\n          setIdleIndex(0);\n          setUrbanDist(0);\n          setRuralDist(0);\n          setMotorwayDist(0);\n          setUrbanShare(0);\n          setRuralShare(0);\n          setMotorwayShare(0);\n          setAccuracy(0);\n          setSpeed(0);\n          setGpsSpeed(0);\n          setPhase(\"Pre-Test\");\n          setDistance(0); // setErrorStatusDisplay([]);\n\n          console.log(\"Reset.\"); // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\n        },\n        children: ({\n          start,\n          resume,\n          pause,\n          stop,\n          reset,\n          timerState\n        }) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Timer.Minutes, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 15\n          }, this), \" Min\\xA0\", /*#__PURE__*/_jsxDEV(Timer.Seconds, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 15\n          }, this), \" Sec\\xA0\", /*#__PURE__*/_jsxDEV(StartStopButton, {\n            startWatch: start,\n            stopWatch: stop,\n            resetWatch: reset\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: reset,\n            disabled: isOn,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Speed (Derived) [km/h]/[mph] :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Data-Label\",\n        children: [Math.round(speed * 10) / 10, \", \", Math.round(speed / 1.609344498 * 10) / 10, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          className: classes.gridItem,\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Distance Shares (U,R,M) [km]:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          className: classes.gridItem,\n          item: true,\n          xs: 4,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [Math.round(urbanDist * 1000) / 1000, \", \", Math.round(ruralDist * 1000) / 1000, \", \", Math.round(motorwayDist * 1000) / 1000]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          className: classes.gridItem,\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Trip segment (U,R,M):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          className: classes.gridItem,\n          item: true,\n          xs: 4,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: phase\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"% Shares (U,R,M) [km]:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.paper,\n            children: [Math.round(urbanShare), \", \", Math.round(ruralShare), \", \", Math.round(motorwayShare)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Cumulative Distance [km]:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Data-Label\",\n        children: distance === 0 ? 0 : Math.round(distance * 100) / 100\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Test Status (P/F):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Data-Label\",\n        children: [testStatus === 3 && \"FAIL\", \" \", testStatus === 2 && \"PASS\", \" \", testStatus === 1 && \"IN PROGRESS\", \" \", testStatus === 0 && \"PRE-TEST\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Idling Timer [s]:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Data-Label\",\n        children: idleIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 359,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WatchTracker, \"IGpPYUR4c3h/LY0eBinAPtKWXEw=\", false, function () {\n  return [useInterval, useStyles];\n});\n\n_c = WatchTracker;\nexport default WatchTracker;\n\nvar _c;\n\n$RefreshReg$(_c, \"WatchTracker\");","map":{"version":3,"sources":["C:/Users/tilak/OneDrive/Documents/GitHub/pwa-for-rde-test/src/components/WatchTracker.js"],"names":["React","useState","useInterval","StartStopButton","Timer","Sound","startSound","stopSound","failSound","passSound","Grid","makeStyles","createMuiTheme","useStyles","theme","root","display","flexGrow","flexDirection","flexWrap","alignContent","alignItems","padding","gridItem","border","haversine","require","WatchTracker","startPlaying","setStartPlaying","stopPlaying","setStopPlaying","passPlaying","setPassPlaying","failPlaying","setFailPlaying","id","options","dataRate","urbanMax","ruralMax","motorwayMax","uMaxShare","uMinShare","rMaxShare","rMinShare","mMaxShare","mMinShare","urmMinDist","maxAltChange","maxTestTime","minTestTime","minTimeReached","setMinTimeReached","maxTimeReached","setMaxTimeReached","idleTime","idleIndex","setIdleIndex","coldStartEnd","isColdStart","setIsColdStart","coordinates","setCoordinates","latitude","setLatitude","longitude","setLongitude","accuracy","setAccuracy","gpsSpeed","setGpsSpeed","altitude","setAltitude","timestamp","setTimestamp","startAlt","setStartAlt","endAlt","setEndAlt","distance","setDistance","speed","setSpeed","urbanDist","setUrbanDist","ruralDist","setRuralDist","motorwayDist","setMotorwayDist","urbanShare","setUrbanShare","ruralShare","setRuralShare","motorwayShare","setMotorwayShare","phase","setPhase","testStatus","setTestStatus","errorStatus","error4","setError4","error5","setError5","error6","setError6","error7","setError7","error8","setError8","error9","setError9","error10","setError10","error11","setError11","error12","setError12","error13","setError13","error14","setError14","error15","setError15","error16","setError16","error17","setError17","index","setIndex","isOn","setIsOn","success","pos","coords","concat","console","log","JSON","stringify","localStorage","setItem","end","oldLat","oldLng","i","start","havDis","unit","prev","startTime","endTime","deltaT","stopWatch","error","err","warn","code","message","enableHighAccuracy","maximumAge","startWatch","navigator","geolocation","watchPosition","clearWatch","Math","abs","classes","status","PLAYING","STOPPED","time","callback","resume","pause","stop","reset","timerState","round","paper"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport useInterval from \"../hooks/useInterval\";\r\nimport StartStopButton from \"./StartStopButton\";\r\nimport Timer from \"react-compound-timer\";\r\n\r\nimport Sound from \"react-sound\";\r\nimport startSound from \"../sounds/start.mp3\"\r\nimport stopSound from \"../sounds/stop.mp3\"\r\nimport failSound from \"../sounds/failSoftShort.mp3\"\r\nimport passSound from \"../sounds/pass.mp3\"\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexGrow: 1,\r\n    flexDirection: 'column',\r\n    flexWrap: 'wrap',\r\n    alignContent: 'center',\r\n    alignItems: 'center',\r\n    padding: '0 2em',\r\n  },\r\n  // paper: {\r\n  //   padding: theme.spacing(2),\r\n  //   textAlign: 'center',\r\n  //   color: '#fafafa',\r\n  // },\r\n  gridItem: {\r\n    border: 'solid red 1px',\r\n  },\r\n}));\r\n\r\nconst haversine = require('haversine')\r\n\r\nfunction WatchTracker() {\r\n  // Sounds\r\n  const [startPlaying, setStartPlaying] = useState(false);\r\n  const [stopPlaying, setStopPlaying] = useState(false);\r\n  const [passPlaying, setPassPlaying] = useState(false);\r\n  const [failPlaying, setFailPlaying] = useState(false);\r\n\r\n  let id, options;\r\n\r\n  // BCs\r\n  let dataRate = 500; //[ms]\r\n\r\n  let urbanMax = 33;\r\n  let ruralMax = 55;\r\n  let motorwayMax = 80;\r\n\r\n  let uMaxShare = 50; //[%]\r\n  let uMinShare = 5;\r\n  let rMaxShare = 40;\r\n  let rMinShare = 5;\r\n  let mMaxShare = 40;\r\n  let mMinShare = 5;\r\n\r\n  let urmMinDist = 0.2; //[km]\r\n\r\n  let maxAltChange = 100; //[m]\r\n\r\n  let maxTestTime = 15; //[min]\r\n  let minTestTime = 6; //[min]\r\n\r\n  const [minTimeReached, setMinTimeReached] = useState(false);\r\n  const [maxTimeReached, setMaxTimeReached] = useState(false);\r\n\r\n  let idleTime = 200; //[s]\r\n  const [idleIndex, setIdleIndex] = useState(0); //[s]\r\n\r\n  let coldStartEnd = 1; //[min]\r\n  const [isColdStart, setIsColdStart] = useState(true);\r\n\r\n  // Data\r\n  const [coordinates, setCoordinates] = useState([0, 0, 0, 0, 0, 0, 0]);\r\n\r\n  const [latitude, setLatitude] = useState(0);\r\n  const [longitude, setLongitude] = useState(0);\r\n  const [accuracy, setAccuracy] = useState(0);\r\n  const [gpsSpeed, setGpsSpeed] = useState(0);\r\n  const [altitude, setAltitude] = useState(0);\r\n  const [timestamp, setTimestamp] = useState(0);\r\n\r\n  const [startAlt, setStartAlt] = useState(0);\r\n  const [endAlt, setEndAlt] = useState(0);\r\n\r\n  const [distance, setDistance] = useState(0);\r\n  const [speed, setSpeed] = useState(0);\r\n\r\n  const [urbanDist, setUrbanDist] = useState(0);\r\n  const [ruralDist, setRuralDist] = useState(0);\r\n  const [motorwayDist, setMotorwayDist] = useState(0);\r\n\r\n  const [urbanShare, setUrbanShare] = useState(0);\r\n  const [ruralShare, setRuralShare] = useState(0);\r\n  const [motorwayShare, setMotorwayShare] = useState(0);\r\n\r\n  // Phases \r\n  const [phase, setPhase] = useState(\"Pre-Test\");\r\n\r\n  const [testStatus, setTestStatus] = useState(0);\r\n\r\n  // 0 = PRE-TEST\r\n  // 1 = IN PROGRESS\r\n  // 2 = PASS\r\n  // 3 = FAIL \r\n  const errorStatus = [\r\n    \"MAX IDLING TIME!\",\r\n    \"MAX SPEED!\",\r\n    \"HIGH TIME!\",\r\n    \"LOW TIME!\",\r\n    \"U MIN DISTANCE!\",\r\n    \"R MIN DISTANCE!\",\r\n    \"M MIN DISTANCE!\",\r\n    \"U MIN SHARE!\",\r\n    \"R MIN SHARE!\",\r\n    \"M MIN SHARE!\",\r\n    \"U MAX SHARE!\",\r\n    \"R MAX SHARE!\",\r\n    \"M MAX SHARE!\",\r\n    \"MAX ALTITUDE!\",\r\n  ]\r\n\r\n  // Failure Switches\r\n  const [error4, setError4] = useState(false);\r\n  const [error5, setError5] = useState(false);\r\n  const [error6, setError6] = useState(false);\r\n  const [error7, setError7] = useState(false);\r\n  const [error8, setError8] = useState(false);\r\n  const [error9, setError9] = useState(false);\r\n  const [error10, setError10] = useState(false);\r\n  const [error11, setError11] = useState(false);\r\n  const [error12, setError12] = useState(false);\r\n  const [error13, setError13] = useState(false);\r\n  const [error14, setError14] = useState(false);\r\n  const [error15, setError15] = useState(false);\r\n  const [error16, setError16] = useState(false);\r\n  const [error17, setError17] = useState(false);\r\n\r\n  // Indexes and Switches\r\n  const [index, setIndex] = useState(0);\r\n  const [isOn, setIsOn] = useState(false);\r\n\r\n  function success(pos) {\r\n    setLatitude(pos.coords.latitude);\r\n    setLongitude(pos.coords.longitude);\r\n    setAccuracy(pos.coords.accuracy);\r\n    setGpsSpeed(pos.coords.speed);\r\n    setAltitude(pos.coords.altitude);\r\n    setTimestamp(pos.timestamp);\r\n  }\r\n\r\n  useInterval(() => {\r\n    setGpsSpeed((gpsSpeed === null) ? 0 : gpsSpeed); // set to 0 to mask null value\r\n    setCoordinates(\r\n      coordinates.concat(...[\r\n        latitude,\r\n        longitude,\r\n        altitude,\r\n        speed,\r\n        gpsSpeed,\r\n        timestamp,\r\n        accuracy\r\n      ])\r\n    )\r\n\r\n    console.log(JSON.stringify(coordinates));\r\n    localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n\r\n    // log lats and longs (new):\r\n    // console.log(\"🔃 \" + latitude)\r\n    // console.log(\"🔁 \" + longitude)\r\n\r\n    let end = {\r\n      latitude: latitude,\r\n      longitude: longitude,\r\n    }\r\n\r\n    let oldLat = coordinates[index];\r\n    let oldLng = coordinates[index + 1];\r\n\r\n    setIndex(i => i + 7)\r\n\r\n    let start = {\r\n      latitude: oldLat,\r\n      longitude: oldLng,\r\n    }\r\n\r\n    // log lats and longs (old):\r\n    // console.log(\"🔃old \" + start.latitude)\r\n    // console.log(\"🔁old \" + start.longitude)\r\n\r\n    let havDis = haversine(start, end, { unit: 'km' })\r\n\r\n    if (start.latitude === 0 && start.longitude === 0) {\r\n      return\r\n    }\r\n\r\n    setDistance(prev => prev + havDis);\r\n\r\n    // log cumulative distance:\r\n    // console.log(\"💨 \" + distance);\r\n\r\n    let startTime = coordinates[index - 2];\r\n    let endTime = timestamp;\r\n    let deltaT = (endTime - startTime) / 3.6e+6; // ms -> hr;\r\n    deltaT = (deltaT === 0) ? 1 : deltaT; // set to 1 to mask NaN error\r\n\r\n    // console.log(\"⏳ \" + deltaT)\r\n\r\n    if (havDis > 0) { setSpeed(havDis / deltaT) };\r\n\r\n    if (speed >= 0 && speed < 1 && start.latitude === 0) {\r\n      setIdleIndex(prev => prev + 2 * (dataRate / 1000)) // stopwatch count in [s]\r\n    } else if (speed >= 0 && speed < 1) {\r\n      setIdleIndex(prev => prev + (dataRate / 1000))\r\n    }\r\n\r\n    if (speed === 0 && isOn === false) {\r\n      setPhase(\"Pre-Test\")\r\n    } else if (isColdStart === true) {\r\n      setPhase(\"Cold Start\")\r\n    } else if (speed < urbanMax) {\r\n      setPhase(\"U\");\r\n    } else if (speed < ruralMax) {\r\n      setPhase(\"R\");\r\n    } else if (speed < motorwayMax) {\r\n      setPhase(\"M\")\r\n    } else {\r\n      setPhase(\"EXTREME\")\r\n    }\r\n\r\n    if (speed < urbanMax && speed > 0) {\r\n      setUrbanDist(prev => prev + havDis);\r\n    }\r\n    if (speed < ruralMax && speed > urbanMax) {\r\n      setRuralDist(prev => prev + havDis);\r\n    }\r\n    if (speed < motorwayMax && speed > ruralMax) {\r\n      setMotorwayDist(prev => prev + havDis)\r\n    }\r\n\r\n    setUrbanShare(distance === 0 ? 0 : (urbanDist / distance) * 100);\r\n    setRuralShare(distance === 0 ? 0 : (ruralDist / distance) * 100);\r\n    setMotorwayShare(distance === 0 ? 0 : (motorwayDist / distance) * 100);\r\n\r\n    // BC VERIFICATION\r\n    // Ordered for checking priority and code efficiency\r\n    setTestStatus(1); // set to in-progress the beginning\r\n    // HARD FAILURES (Break on 4, 5 and 6) \r\n    // Time\r\n    if (idleIndex >= idleTime) {\r\n      setError4(errorStatus[4 - 4]);\r\n      setIsOn(false);\r\n      stopWatch();\r\n    }\r\n\r\n    // Speed\r\n    if (speed > motorwayMax) {\r\n      setError5(errorStatus[5 - 4]);\r\n      setIsOn(false);\r\n      stopWatch();\r\n    }\r\n\r\n    // Time\r\n    if (maxTimeReached) {\r\n      setError6(errorStatus[6 - 4]);\r\n      setIsOn(false);\r\n      stopWatch();\r\n    }\r\n\r\n    // SOFT FAILURES\r\n    // Time \r\n    if (!minTimeReached) {\r\n      setError7(errorStatus[7 - 4]);\r\n    } else setError7(false);\r\n\r\n    // Distance [km]\r\n    if (urbanDist < urmMinDist) {\r\n      setError8(errorStatus[8 - 4]);\r\n    } else setError8(false);\r\n    if (ruralDist < urmMinDist) {\r\n      setError9(errorStatus[9 - 4]);\r\n    } else setError9(false);\r\n    if (motorwayDist < urmMinDist) {\r\n      setError10(errorStatus[10 - 4]);\r\n    } else setError10(false);\r\n\r\n    // Min Distance Share [%]\r\n    if (urbanShare < uMinShare) {\r\n      setError11(errorStatus[11 - 4]);\r\n    } else setError11(false);\r\n    if (ruralShare < rMinShare) {\r\n      setError12(errorStatus[12 - 4]);\r\n    } else setError12(false);\r\n    if (motorwayShare < mMinShare) {\r\n      setError13(errorStatus[13 - 4]);\r\n    } else setError13(false);\r\n\r\n    // Max Distance Share [%]\r\n    if (urbanShare > uMaxShare) {\r\n      setError14(errorStatus[14 - 4]);\r\n    } else setError14(false);\r\n    if (ruralShare > rMaxShare) {\r\n      setError15(errorStatus[15 - 4]);\r\n    } else setError15(false);\r\n    if (motorwayShare > mMaxShare) {\r\n      setError16(errorStatus[16 - 4]);\r\n    } else setError16(false);\r\n\r\n  }, isOn ? dataRate : null\r\n  )\r\n\r\n  function error(err) {\r\n    console.warn('ERROR(' + err.code + '): ' + err.message);\r\n  }\r\n\r\n  options = {\r\n    enableHighAccuracy: true,\r\n    maximumAge: 0\r\n  };\r\n\r\n  function startWatch() {\r\n    // console.log(\"Starting Watch.\")\r\n    if (\"geolocation\" in navigator && \"watchPosition\" in navigator.geolocation) {\r\n      id = navigator.geolocation.watchPosition(success, error, options);\r\n    } else {\r\n      console.log(\"Geolocation not available.\")\r\n    }\r\n  }\r\n\r\n  function stopWatch() {\r\n    // console.log(\"Stopping Watch.\");\r\n    navigator.geolocation.clearWatch(id);\r\n\r\n    setStartAlt(coordinates[2]);\r\n    setEndAlt(altitude);\r\n\r\n    if (Math.abs(startAlt - endAlt) > maxAltChange) {\r\n      setError17(errorStatus[17 - 4]);\r\n    }\r\n\r\n    if (error4 || error5 || error6 || error7 || error8 || error9 || error10 || error11 || error12 || error13 || error14 || error15 || error16 || error17) {\r\n      setTestStatus(3)\r\n      setFailPlaying(true);\r\n      return;\r\n    } else {\r\n      setTestStatus(2)\r\n      console.log(\"Test Passed.\")\r\n      setPassPlaying(true);\r\n    }\r\n  }\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <React.Fragment>\r\n        <div>[TEST H]</div>\r\n        <Sound\r\n          playStatus={startPlaying ? Sound.status.PLAYING : Sound.status.STOPPED}\r\n          url={startSound}\r\n          onFinishedPlaying={() => setStartPlaying(!startPlaying)}\r\n        />\r\n        <Sound\r\n          playStatus={stopPlaying ? Sound.status.PLAYING : Sound.status.STOPPED}\r\n          url={stopSound}\r\n          onFinishedPlaying={() => setStopPlaying(!stopPlaying)}\r\n        />\r\n        <Sound\r\n          playStatus={passPlaying ? Sound.status.PLAYING : Sound.status.STOPPED}\r\n          url={passSound}\r\n          onFinishedPlaying={() => setPassPlaying(!passPlaying)}\r\n        />\r\n        <Sound\r\n          playStatus={failPlaying ? Sound.status.PLAYING : Sound.status.STOPPED}\r\n          url={failSound}\r\n          onFinishedPlaying={() => setFailPlaying(!failPlaying)}\r\n        />\r\n        <Timer\r\n          initialTime={0}\r\n          startImmediately={false}\r\n          lastUnit=\"m\"\r\n          checkpoints={[\r\n            {\r\n              time: coldStartEnd * 60000,\r\n              callback: () => setIsColdStart(false),\r\n            },\r\n            {\r\n              time: maxTestTime * 60000,\r\n              callback: () => setMaxTimeReached(true),\r\n            },\r\n            {\r\n              time: minTestTime * 60000,\r\n              callback: () => setMinTimeReached(true),\r\n            }\r\n          ]}\r\n          onStart={() => {\r\n            // console.log('onStart hook');\r\n            startWatch();\r\n            setIsOn(true);\r\n            setTestStatus(1);\r\n            setStartPlaying(true);\r\n          }}\r\n          onStop={() => {\r\n            // console.log('onStop hook');\r\n            stopWatch();\r\n            setIsOn(false);\r\n            setPhase(\"Post-Test\");\r\n            setStopPlaying(true);\r\n          }}\r\n          onReset={() => {\r\n            // console.log('onReset hook')\r\n            setTestStatus(0);\r\n            setFailPlaying(false);\r\n            navigator.geolocation.clearWatch(id);\r\n            setCoordinates([0, 0, 0, 0, 0, 0, 0]);\r\n            setIndex(0);\r\n            setIdleIndex(0);\r\n            setUrbanDist(0);\r\n            setRuralDist(0);\r\n            setMotorwayDist(0);\r\n            setUrbanShare(0);\r\n            setRuralShare(0);\r\n            setMotorwayShare(0);\r\n            setAccuracy(0);\r\n            setSpeed(0);\r\n            setGpsSpeed(0);\r\n            setPhase(\"Pre-Test\");\r\n            setDistance(0);\r\n            // setErrorStatusDisplay([]);\r\n            console.log(\"Reset.\")\r\n            // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n          }}\r\n        >\r\n          {({ start, resume, pause, stop, reset, timerState }) => (\r\n            <React.Fragment>\r\n              <Timer.Minutes /> Min&nbsp;\r\n              <Timer.Seconds /> Sec&nbsp;\r\n              <StartStopButton startWatch={start} stopWatch={stop} resetWatch={reset} />\r\n              <button onClick={reset} disabled={isOn}>Reset</button>\r\n            </React.Fragment>\r\n          )}\r\n        </Timer>\r\n        <div>Speed (Derived) [km/h]/[mph] :</div>\r\n        <div className=\"Data-Label\">{Math.round(speed * 10) / 10}, {Math.round((speed / 1.609344498) * 10) / 10} </div>\r\n\r\n\r\n        <Grid container spacing={3}>\r\n\r\n          <Grid className={classes.gridItem} item xs={12}>\r\n            <div>Distance Shares (U,R,M) [km]:</div>\r\n          </Grid>\r\n\r\n          <Grid className={classes.gridItem} item xs={4}>\r\n            <div>{Math.round(urbanDist * 1000) / 1000}, {Math.round(ruralDist * 1000) / 1000}, {Math.round(motorwayDist * 1000) / 1000}</div>\r\n          </Grid>\r\n\r\n          <Grid className={classes.gridItem} item xs={12}>\r\n            <div>Trip segment (U,R,M):</div>\r\n          </Grid>\r\n\r\n          <Grid className={classes.gridItem} item xs={4}>\r\n            <div>\r\n              {phase}\r\n            </div>\r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n            <div>% Shares (U,R,M) [km]:</div>\r\n          </Grid>\r\n\r\n          <Grid item xs={4}>\r\n            <div className={classes.paper}>{Math.round(urbanShare)}, {Math.round(ruralShare)}, {Math.round(motorwayShare)}</div>\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n\r\n\r\n        <div>Cumulative Distance [km]:</div>\r\n        <div className=\"Data-Label\">{distance === 0 ? 0 : Math.round(distance * 100) / 100}</div>\r\n        <div>Test Status (P/F):</div>\r\n        <div className=\"Data-Label\">{testStatus === 3 && \"FAIL\"} {testStatus === 2 && \"PASS\"} {testStatus === 1 && \"IN PROGRESS\"} {testStatus === 0 && \"PRE-TEST\"}</div>\r\n        {/* <div>Failure Reason (s): </div> */}\r\n        <div>Idling Timer [s]:</div>\r\n        <div className=\"Data-Label\">{idleIndex}</div>\r\n\r\n      </React.Fragment>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default WatchTracker"]},"metadata":{},"sourceType":"module"}