{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tilak\\\\OneDrive\\\\Documents\\\\GitHub\\\\pwa-for-rde-test\\\\src\\\\components\\\\WatchTracker.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport useInterval from \"../hooks/useInterval\";\nimport StartStopButton from \"./StartStopButton\";\nimport Timer from \"react-compound-timer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst haversine = require('haversine');\n\nfunction WatchTracker() {\n  _s();\n\n  let id, options;\n  let urbanMax = 33;\n  let ruralMax = 55;\n  let motorwayMax = 80;\n  let uMaxShare = 40;\n  let uMinShare = 5;\n  let rMaxShare = 40;\n  let rMinShare = 5;\n  let mMaxShare = 40;\n  let mMinShare = 5;\n  let urmDistShare;\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [accuracy, setAccuracy] = useState(0);\n  const [gpsSpeed, setGpsSpeed] = useState(0);\n  const [altitude, setAltitude] = useState(0);\n  const [timestamp, setTimestamp] = useState(0);\n  const [distance, setDistance] = useState(0);\n  const [speed, setSpeed] = useState(0);\n  const [urbanDist, setUrbanDist] = useState(0);\n  const [ruralDist, setRuralDist] = useState(0);\n  const [motorwayDist, setMotorwayDist] = useState(0);\n  const [urbanShare, setUrbanShare] = useState(0);\n  const [ruralShare, setRuralShare] = useState(0);\n  const [motorwayShare, setMotorwayShare] = useState(0);\n  const [phase, setPhase] = useState(\"Pre-Test\");\n  const [testStatus, setTestStatus] = useState(0); // 0 = PRE-TEST\n  // 1 = IN-PROGRESS\n  // 2 = PASS\n  // 3 = FAIL\n\n  const [coordinates, setCoordinates] = useState([0, 0, 0, 0, 0, 0, 0]);\n  const [index, setIndex] = useState(0);\n  const [isOn, setIsOn] = useState(false);\n\n  function success(pos) {\n    setLatitude(pos.coords.latitude);\n    setLongitude(pos.coords.longitude);\n    setAccuracy(pos.coords.accuracy);\n    setGpsSpeed(pos.coords.speed);\n    setAltitude(pos.coords.altitude);\n    setTimestamp(pos.timestamp);\n    setTestStatus(1);\n  }\n\n  useInterval(() => {\n    setGpsSpeed(gpsSpeed === null ? 0 : gpsSpeed); // set to 0 to mask null value\n\n    setCoordinates(coordinates.concat(...[latitude, longitude, altitude, speed, gpsSpeed, timestamp, accuracy]));\n    console.log(JSON.stringify(coordinates));\n    localStorage.setItem(\"coordinates\", JSON.stringify(coordinates)); // log lats and longs (new):\n    // console.log(\"🔃 \" + latitude)\n    // console.log(\"🔁 \" + longitude)\n\n    let end = {\n      latitude: latitude,\n      longitude: longitude\n    };\n    let oldLat = coordinates[index];\n    let oldLng = coordinates[index + 1];\n    setIndex(i => i + 7);\n    let start = {\n      latitude: oldLat,\n      longitude: oldLng\n    }; // log lats and longs (old):\n    // console.log(\"🔃old \" + start.latitude)\n    // console.log(\"🔁old \" + start.longitude)\n\n    let havDis = haversine(start, end, {\n      unit: 'km'\n    });\n\n    if (start.latitude === 0 && start.longitude === 0) {\n      return;\n    }\n\n    setDistance(prev => prev + havDis); // log cumulative distance:\n\n    console.log(\"💨 \" + distance);\n    let startTime = coordinates[index - 2];\n    let endTime = timestamp;\n    let deltaT = (endTime - startTime) / 3.6e+6; // ms -> hr;\n\n    deltaT = deltaT === 0 ? 1 : deltaT; // set to 1 to mask NaN error\n\n    console.log(\"⏳ \" + deltaT);\n\n    if (havDis > 0) {\n      setSpeed(havDis / deltaT);\n    }\n\n    ;\n\n    if (speed === 0 && isOn === false) {\n      setPhase(\"Pre-Test\");\n    } else if (speed < urbanMax) {\n      setPhase(\"U\");\n    } else if (speed < ruralMax) {\n      setPhase(\"R\");\n    } else if (speed < motorwayMax) {\n      setPhase(\"M\");\n    } else {\n      setPhase(\"EXTREME\");\n    }\n\n    if (speed < urbanMax) {\n      setUrbanDist(prev => prev + havDis);\n    } else if (speed < ruralMax) {\n      setRuralDist(prev => prev + havDis);\n    } else if (speed < motorwayMax) {\n      setMotorwayDist(prev => prev + havDis);\n    } else if (speed > motorwayMax) {\n      setTestStatus(3);\n    }\n\n    setUrbanShare(distance === 0 ? 0 : urbanDist / distance * 100);\n    setRuralShare(distance === 0 ? 0 : ruralDist / distance * 100);\n    setMotorwayShare(distance === 0 ? 0 : motorwayDist / distance * 100);\n  }, isOn ? 500 : null);\n\n  function error(err) {\n    console.warn('ERROR(' + err.code + '): ' + err.message);\n  }\n\n  options = {\n    enableHighAccuracy: true,\n    maximumAge: 0\n  };\n\n  function startWatch() {\n    // console.log(\"Starting Watch.\")\n    if (\"geolocation\" in navigator && \"watchPosition\" in navigator.geolocation) {\n      id = navigator.geolocation.watchPosition(success, error, options);\n    } else {\n      console.log(\"Geolocation not available.\");\n    }\n  }\n\n  function stopWatch() {\n    // console.log(\"Stopping Watch.\");\n    navigator.geolocation.clearWatch(id);\n    setDistance(0);\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"[TEST 8c]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Timer, {\n      initialTime: 0,\n      startImmediately: false,\n      onStart: () => {\n        // console.log('onStart hook');\n        startWatch();\n        setIsOn(true);\n        setTestStatus(1);\n      },\n      onStop: () => {\n        // console.log('onStop hook');\n        stopWatch();\n        setIsOn(false);\n        setPhase(\"Post-Test\");\n      },\n      onReset: () => {\n        // console.log('onReset hook')\n        stopWatch();\n        setCoordinates([0, 0, 0, 0, 0, 0, 0]);\n        setIndex(0);\n        setUrbanDist(0);\n        setRuralDist(0);\n        setMotorwayDist(0);\n        setUrbanShare(0);\n        setRuralShare(0);\n        setMotorwayShare(0);\n        setAccuracy(0);\n        setSpeed(0);\n        setGpsSpeed(0);\n        setPhase(\"Pre-Test\");\n        setTestStatus(0);\n        console.log(\"Reset.\"); // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\n      },\n      children: ({\n        start,\n        resume,\n        pause,\n        stop,\n        reset,\n        timerState\n      }) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Timer.Hours, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this), \" Hrs\\xA0\", /*#__PURE__*/_jsxDEV(Timer.Minutes, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this), \" Min\\xA0\", /*#__PURE__*/_jsxDEV(Timer.Seconds, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }, this), \" Sec\\xA0\", /*#__PURE__*/_jsxDEV(StartStopButton, {\n          startWatch: start,\n          stopWatch: stop,\n          resetWatch: reset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: reset,\n          disabled: isOn,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Speed (Derived) [km/h]/[mph] :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: [Math.round(speed * 10) / 10, \", \", Math.round(speed / 1.609344498 * 10) / 10, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Distance Shares (U,R,M) [km]:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: [Math.round(urbanDist * 1000) / 1000, \", \", Math.round(ruralDist * 1000) / 1000, \", \", Math.round(motorwayDist * 1000) / 1000]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Trip segment (U,R,M):\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: phase\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"% Shares (U,R,M) [km]:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: [Math.round(urbanShare), \", \", Math.round(ruralShare), \", \", Math.round(motorwayShare)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"GPS Accuracy [m], Cumulative Distance [km]:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: [accuracy === null ? 0 : Math.round(accuracy * 10) / 10, \", \", distance === 0 ? 0 : Math.round(distance * 100) / 100]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Test Status (P/F):\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: [testStatus === 3 && \"FAIL\", \" \", testStatus === 2 && \"PASS\", \" \", testStatus === 1 && \"IN PROGRESS\", \" \", testStatus === 0 && \"PRE-TEST\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WatchTracker, \"kmVKiDyTFVgQzD+iDNZu7X3Mla8=\", false, function () {\n  return [useInterval];\n});\n\n_c = WatchTracker;\nexport default WatchTracker;\n\nvar _c;\n\n$RefreshReg$(_c, \"WatchTracker\");","map":{"version":3,"sources":["C:/Users/tilak/OneDrive/Documents/GitHub/pwa-for-rde-test/src/components/WatchTracker.js"],"names":["React","useState","useInterval","StartStopButton","Timer","haversine","require","WatchTracker","id","options","urbanMax","ruralMax","motorwayMax","uMaxShare","uMinShare","rMaxShare","rMinShare","mMaxShare","mMinShare","urmDistShare","latitude","setLatitude","longitude","setLongitude","accuracy","setAccuracy","gpsSpeed","setGpsSpeed","altitude","setAltitude","timestamp","setTimestamp","distance","setDistance","speed","setSpeed","urbanDist","setUrbanDist","ruralDist","setRuralDist","motorwayDist","setMotorwayDist","urbanShare","setUrbanShare","ruralShare","setRuralShare","motorwayShare","setMotorwayShare","phase","setPhase","testStatus","setTestStatus","coordinates","setCoordinates","index","setIndex","isOn","setIsOn","success","pos","coords","concat","console","log","JSON","stringify","localStorage","setItem","end","oldLat","oldLng","i","start","havDis","unit","prev","startTime","endTime","deltaT","error","err","warn","code","message","enableHighAccuracy","maximumAge","startWatch","navigator","geolocation","watchPosition","stopWatch","clearWatch","resume","pause","stop","reset","timerState","Math","round"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport useInterval from \"../hooks/useInterval\";\r\nimport StartStopButton from \"./StartStopButton\";\r\nimport Timer from \"react-compound-timer\";\r\n\r\nconst haversine = require('haversine')\r\n\r\nfunction WatchTracker() {\r\n  let id, options;\r\n\r\n  let urbanMax = 33;\r\n  let ruralMax = 55;\r\n  let motorwayMax = 80;\r\n\r\n  let uMaxShare = 40;\r\n  let uMinShare = 5;\r\n  let rMaxShare = 40;\r\n  let rMinShare = 5;\r\n  let mMaxShare = 40;\r\n  let mMinShare = 5;\r\n\r\n  let urmDistShare\r\n\r\n  const [latitude, setLatitude] = useState(0);\r\n  const [longitude, setLongitude] = useState(0);\r\n  const [accuracy, setAccuracy] = useState(0);\r\n  const [gpsSpeed, setGpsSpeed] = useState(0);\r\n  const [altitude, setAltitude] = useState(0);\r\n  const [timestamp, setTimestamp] = useState(0);\r\n\r\n  const [distance, setDistance] = useState(0);\r\n  const [speed, setSpeed] = useState(0);\r\n\r\n  const [urbanDist, setUrbanDist] = useState(0);\r\n  const [ruralDist, setRuralDist] = useState(0);\r\n  const [motorwayDist, setMotorwayDist] = useState(0);\r\n\r\n  const [urbanShare, setUrbanShare] = useState(0);\r\n  const [ruralShare, setRuralShare] = useState(0);\r\n  const [motorwayShare, setMotorwayShare] = useState(0);\r\n\r\n  const [phase, setPhase] = useState(\"Pre-Test\");\r\n\r\n  const [testStatus, setTestStatus] = useState(0);\r\n  // 0 = PRE-TEST\r\n  // 1 = IN-PROGRESS\r\n  // 2 = PASS\r\n  // 3 = FAIL\r\n\r\n  const [coordinates, setCoordinates] = useState([0, 0, 0, 0, 0, 0, 0]);\r\n\r\n  const [index, setIndex] = useState(0);\r\n\r\n  const [isOn, setIsOn] = useState(false);\r\n\r\n  function success(pos) {\r\n    setLatitude(pos.coords.latitude);\r\n    setLongitude(pos.coords.longitude);\r\n    setAccuracy(pos.coords.accuracy);\r\n    setGpsSpeed(pos.coords.speed);\r\n    setAltitude(pos.coords.altitude);\r\n    setTimestamp(pos.timestamp);\r\n\r\n    setTestStatus(1)\r\n  }\r\n\r\n  useInterval(() => {\r\n    setGpsSpeed((gpsSpeed === null) ? 0 : gpsSpeed); // set to 0 to mask null value\r\n    setCoordinates(\r\n      coordinates.concat(...[\r\n        latitude,\r\n        longitude,\r\n        altitude,\r\n        speed,\r\n        gpsSpeed,\r\n        timestamp,\r\n        accuracy\r\n      ])\r\n    )\r\n\r\n    console.log(JSON.stringify(coordinates));\r\n    localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n\r\n    // log lats and longs (new):\r\n    // console.log(\"🔃 \" + latitude)\r\n    // console.log(\"🔁 \" + longitude)\r\n\r\n    let end = {\r\n      latitude: latitude,\r\n      longitude: longitude,\r\n    }\r\n\r\n    let oldLat = coordinates[index];\r\n    let oldLng = coordinates[index + 1];\r\n\r\n    setIndex(i => i + 7)\r\n\r\n    let start = {\r\n      latitude: oldLat,\r\n      longitude: oldLng,\r\n    }\r\n\r\n    // log lats and longs (old):\r\n    // console.log(\"🔃old \" + start.latitude)\r\n    // console.log(\"🔁old \" + start.longitude)\r\n\r\n\r\n    let havDis = haversine(start, end, { unit: 'km' })\r\n\r\n    if (start.latitude === 0 && start.longitude === 0) {\r\n      return\r\n    }\r\n\r\n    setDistance(prev => prev + havDis);\r\n\r\n    // log cumulative distance:\r\n    console.log(\"💨 \" + distance);\r\n\r\n    let startTime = coordinates[index - 2];\r\n    let endTime = timestamp;\r\n    let deltaT = (endTime - startTime) / 3.6e+6; // ms -> hr;\r\n    deltaT = (deltaT === 0) ? 1 : deltaT; // set to 1 to mask NaN error\r\n\r\n    console.log(\"⏳ \" + deltaT)\r\n\r\n    if (havDis > 0) { setSpeed(havDis / deltaT) };\r\n\r\n    if (speed === 0 && isOn === false) {\r\n      setPhase(\"Pre-Test\")\r\n    } else if (speed < urbanMax) {\r\n      setPhase(\"U\");\r\n    } else if (speed < ruralMax) {\r\n      setPhase(\"R\");\r\n    } else if (speed < motorwayMax) {\r\n      setPhase(\"M\")\r\n    } else {\r\n      setPhase(\"EXTREME\")\r\n    }\r\n\r\n    if (speed < urbanMax) {\r\n      setUrbanDist(prev => prev + havDis);\r\n    } else if (speed < ruralMax) {\r\n      setRuralDist(prev => prev + havDis);\r\n    } else if (speed < motorwayMax) {\r\n      setMotorwayDist(prev => prev + havDis)\r\n    } else if (speed > motorwayMax) {\r\n      setTestStatus(3);\r\n    }\r\n\r\n    setUrbanShare(distance === 0 ? 0 : (urbanDist / distance) * 100);\r\n    setRuralShare(distance === 0 ? 0 : (ruralDist / distance) * 100);\r\n    setMotorwayShare(distance === 0 ? 0 : (motorwayDist / distance) * 100);\r\n\r\n  }, isOn ? 500 : null\r\n  )\r\n\r\n  function error(err) {\r\n    console.warn('ERROR(' + err.code + '): ' + err.message);\r\n  }\r\n\r\n  options = {\r\n    enableHighAccuracy: true,\r\n    maximumAge: 0\r\n  };\r\n\r\n  function startWatch() {\r\n    // console.log(\"Starting Watch.\")\r\n    if (\"geolocation\" in navigator && \"watchPosition\" in navigator.geolocation) {\r\n      id = navigator.geolocation.watchPosition(success, error, options);\r\n    } else {\r\n      console.log(\"Geolocation not available.\")\r\n    }\r\n  }\r\n\r\n  function stopWatch() {\r\n    // console.log(\"Stopping Watch.\");\r\n    navigator.geolocation.clearWatch(id);\r\n    setDistance(0);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>[TEST 8c]</div>\r\n      <Timer\r\n        initialTime={0}\r\n        startImmediately={false}\r\n        onStart={() => {\r\n          // console.log('onStart hook');\r\n          startWatch();\r\n          setIsOn(true);\r\n          setTestStatus(1);\r\n        }}\r\n        onStop={() => {\r\n          // console.log('onStop hook');\r\n          stopWatch();\r\n          setIsOn(false);\r\n          setPhase(\"Post-Test\");\r\n        }}\r\n        onReset={() => {\r\n          // console.log('onReset hook')\r\n          stopWatch();\r\n          setCoordinates([0, 0, 0, 0, 0, 0, 0]);\r\n          setIndex(0);\r\n          setUrbanDist(0);\r\n          setRuralDist(0);\r\n          setMotorwayDist(0);\r\n          setUrbanShare(0);\r\n          setRuralShare(0);\r\n          setMotorwayShare(0);\r\n          setAccuracy(0);\r\n          setSpeed(0);\r\n          setGpsSpeed(0);\r\n          setPhase(\"Pre-Test\");\r\n          setTestStatus(0);\r\n          console.log(\"Reset.\")\r\n          // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n        }}\r\n      >\r\n        {({ start, resume, pause, stop, reset, timerState }) => (\r\n          <React.Fragment>\r\n            <Timer.Hours /> Hrs&nbsp;\r\n            <Timer.Minutes /> Min&nbsp;\r\n            <Timer.Seconds /> Sec&nbsp;\r\n            <StartStopButton startWatch={start} stopWatch={stop} resetWatch={reset} />\r\n            <button onClick={reset} disabled={isOn}>Reset</button>\r\n          </React.Fragment>\r\n        )}\r\n      </Timer>\r\n      <div>Speed (Derived) [km/h]/[mph] :</div>\r\n      <div className=\"Data-Label\">{Math.round(speed * 10) / 10}, {Math.round((speed / 1.609344498) * 10) / 10} </div>\r\n      <div>Distance Shares (U,R,M) [km]:</div>\r\n      <div className=\"Data-Label\">{Math.round(urbanDist * 1000) / 1000}, {Math.round(ruralDist * 1000) / 1000}, {Math.round(motorwayDist * 1000) / 1000}</div>\r\n      <div>Trip segment (U,R,M):</div>\r\n      <div className=\"Data-Label\">\r\n        {phase}\r\n      </div>\r\n      <div>% Shares (U,R,M) [km]:</div>\r\n      <div className=\"Data-Label\">{Math.round(urbanShare)}, {Math.round(ruralShare)}, {Math.round(motorwayShare)}</div>\r\n      <div>GPS Accuracy [m], Cumulative Distance [km]:</div>\r\n      <div className=\"Data-Label\">{accuracy === null ? 0 : Math.round(accuracy * 10) / 10}, {distance === 0 ? 0 : Math.round(distance * 100) / 100}</div>\r\n      <div>Test Status (P/F):</div>\r\n      <div className=\"Data-Label\">{testStatus === 3 && \"FAIL\"} {testStatus === 2 && \"PASS\"} {testStatus === 1 && \"IN PROGRESS\"} {testStatus === 0 && \"PRE-TEST\"}</div>\r\n    </React.Fragment>\r\n  )\r\n\r\n}\r\n\r\nexport default WatchTracker"]},"metadata":{},"sourceType":"module"}