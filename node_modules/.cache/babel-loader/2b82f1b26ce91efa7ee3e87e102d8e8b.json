{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tilak\\\\OneDrive\\\\Documents\\\\GitHub\\\\pwa-for-rde-test\\\\src\\\\components\\\\WatchTracker.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport useInterval from \"../hooks/useInterval\";\nimport StartStopButton from \"./StartStopButton\";\nimport Timer from 'react-compound-timer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst haversine = require('haversine');\n\nfunction WatchTracker() {\n  _s();\n\n  let id, options;\n  let urbanMax = 33;\n  let ruralMax = 55;\n  let motorwayMax = 80;\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [accuracy, setAccuracy] = useState(0);\n  const [gpsSpeed, setGpsSpeed] = useState(0);\n  const [altitude, setAltitude] = useState(0);\n  const [timestamp, setTimestamp] = useState(0);\n  const [distance, setDistance] = useState(0);\n  const [speed, setSpeed] = useState(0);\n  const [displaySpd, setDisplaySpd] = useState(0);\n  const [urbanDist, setUrbanDist] = useState(0);\n  const [ruralDist, setRuralDist] = useState(0);\n  const [motorwayDist, setMotorwayDist] = useState(0);\n  const [urbanShare, setUrbanShare] = useState(0);\n  const [ruralShare, setRuralShare] = useState(0);\n  const [motorwayShare, setMotorwayShare] = useState(0);\n  const [phase, setPhase] = useState(\"Pre-Test\");\n  const [testPass, setTestPass] = useState(\"FAIL\");\n  const [coordinates, setCoordinates] = useState([0, 0, 0, 0, 0, 0, 0]);\n  const [index, setIndex] = useState(0);\n  const [isOn, setIsOn] = useState(false);\n\n  function success(pos) {\n    setLatitude(pos.coords.latitude);\n    setLongitude(pos.coords.longitude);\n    setAccuracy(pos.coords.accuracy); // setGpsSpeed(Math.round(pos.coords.speed * 100) / 100);\n\n    setGpsSpeed(pos.coords.speed);\n    setAltitude(pos.coords.altitude);\n    setTimestamp(pos.timestamp);\n  }\n\n  useInterval(() => {\n    setGpsSpeed(gpsSpeed === null ? 0 : gpsSpeed); // set to 0 to mask null value\n\n    setCoordinates(coordinates.concat(...[latitude, longitude, altitude, speed, gpsSpeed, timestamp, accuracy]));\n\n    if (speed === 0 && isOn === false) {\n      setPhase(\"Pre-Test\");\n    } else if (speed < urbanMax) {\n      setPhase(\"U\");\n    } else if (speed < ruralMax) {\n      setPhase(\"R\");\n    } else if (speed < motorwayMax) {\n      setPhase(\"M\");\n    } else {\n      setPhase(\"EXTREME\");\n    }\n\n    console.log(JSON.stringify(coordinates));\n    localStorage.setItem(\"coordinates\", JSON.stringify(coordinates)); // log lats and longs (new):\n    // console.log(\"üîÉ \" + latitude)\n    // console.log(\"üîÅ \" + longitude)\n\n    let end = {\n      latitude: latitude,\n      longitude: longitude\n    };\n    let oldLat = coordinates[index];\n    let oldLng = coordinates[index + 1];\n    setIndex(i => i + 7);\n    let start = {\n      latitude: oldLat,\n      longitude: oldLng\n    }; // log lats and longs (old):\n    // console.log(\"üîÉold \" + start.latitude)\n    // console.log(\"üîÅold \" + start.longitude)\n\n    let havDis = haversine(start, end, {\n      unit: 'km'\n    });\n\n    if (start.latitude === 0 && start.longitude === 0) {\n      return;\n    }\n\n    setDistance(prev => prev + havDis); // log cumulative distance:\n\n    console.log(\"üí® \" + distance);\n    let startTime = coordinates[index - 2];\n    let endTime = timestamp;\n    let deltaT = (endTime - startTime) / 3.6e+6; // ms -> hr;\n\n    deltaT = deltaT === 0 ? 1 : deltaT; // set to 1 to mask NaN error\n\n    console.log(\"‚è≥ \" + deltaT);\n    setSpeed(havDis / deltaT);\n    let displaySpd = Math.round(havDis / deltaT * 10) / 10; // round to 1dp\n\n    setDisplaySpd(displaySpd);\n\n    if (speed < urbanMax) {\n      setUrbanDist(prev => prev + havDis);\n    } else if (speed < ruralMax) {\n      setRuralDist(prev => prev + havDis);\n    } else if (speed < motorwayMax) {\n      setMotorwayDist(prev => prev + havDis);\n    } else if (speed > motorwayMax) {\n      // console.log(\"Max Speed Exceeded!\")\n      setTestPass(\"FAIL\");\n    }\n\n    setUrbanShare(distance === 0 ? 0 : Math.round(urbanDist / distance * 100));\n    setRuralShare(distance === 0 ? 0 : Math.round(ruralDist / distance * 100));\n    setMotorwayShare(distance === 0 ? 0 : Math.round(motorwayDist / distance * 100));\n  }, isOn ? 500 : null);\n\n  function error(err) {\n    console.warn('ERROR(' + err.code + '): ' + err.message);\n  }\n\n  options = {\n    enableHighAccuracy: true,\n    maximumAge: 0\n  };\n\n  function startWatch() {\n    // console.log(\"Starting Watch.\")\n    if (\"geolocation\" in navigator && \"watchPosition\" in navigator.geolocation) {\n      id = navigator.geolocation.watchPosition(success, error, options);\n    } else {\n      console.log(\"Geolocation not available.\");\n    }\n  }\n\n  function stopWatch() {\n    // console.log(\"Stopping Watch.\");\n    navigator.geolocation.clearWatch(id);\n    setDistance(0);\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"[TEST 8a]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Timer, {\n      initialTime: 0,\n      startImmediately: false,\n      onStart: () => {\n        // console.log('onStart hook');\n        startWatch();\n        setIsOn(true);\n      },\n      onStop: () => {\n        // console.log('onStop hook');\n        stopWatch();\n        setIsOn(false);\n        setPhase(\"Post-Test\");\n      },\n      onReset: () => {\n        // console.log('onReset hook')\n        stopWatch();\n        setIsOn(false);\n        setCoordinates([0, 0, 0, 0, 0, 0, 0]);\n        setIndex(0);\n        setUrbanDist(0);\n        setRuralDist(0);\n        setMotorwayDist(0);\n        setUrbanShare(0);\n        setRuralShare(0);\n        setMotorwayShare(0);\n        setAccuracy(0);\n        setSpeed(0);\n        setGpsSpeed(0);\n        setPhase(\"Pre-Test\");\n        console.log(\"Reset.\"); // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\n      },\n      children: ({\n        start,\n        resume,\n        pause,\n        stop,\n        reset,\n        timerState\n      }) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Timer.Hours, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this), \" Hrs\\xA0\", /*#__PURE__*/_jsxDEV(Timer.Minutes, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this), \" Min\\xA0\", /*#__PURE__*/_jsxDEV(Timer.Seconds, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this), \" Sec\\xA0\", /*#__PURE__*/_jsxDEV(StartStopButton, {\n          startWatch: start,\n          stopWatch: stop,\n          resetWatch: reset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: reset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Speed (GPS, Derived) [km/h]:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: gpsSpeed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: displaySpd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Distance Shares (U,R,M) [km]:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: [urbanDist, \", \", ruralDist, \", \", motorwayDist]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Trip segment (U,R,M):\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: phase\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"% Shares (U,R,M) [km]:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: [urbanShare, \", \", ruralShare, \", \", motorwayShare]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"GPS Accuracy [m]:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: accuracy === null ? 0 : Math.round(accuracy)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Test Status (P/F):\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: testPass\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WatchTracker, \"hxSZ3I9+z1LUff9MV+BD9LlS9z4=\", false, function () {\n  return [useInterval];\n});\n\n_c = WatchTracker;\nexport default WatchTracker;\n\nvar _c;\n\n$RefreshReg$(_c, \"WatchTracker\");","map":{"version":3,"sources":["C:/Users/tilak/OneDrive/Documents/GitHub/pwa-for-rde-test/src/components/WatchTracker.js"],"names":["React","useState","useInterval","StartStopButton","Timer","haversine","require","WatchTracker","id","options","urbanMax","ruralMax","motorwayMax","latitude","setLatitude","longitude","setLongitude","accuracy","setAccuracy","gpsSpeed","setGpsSpeed","altitude","setAltitude","timestamp","setTimestamp","distance","setDistance","speed","setSpeed","displaySpd","setDisplaySpd","urbanDist","setUrbanDist","ruralDist","setRuralDist","motorwayDist","setMotorwayDist","urbanShare","setUrbanShare","ruralShare","setRuralShare","motorwayShare","setMotorwayShare","phase","setPhase","testPass","setTestPass","coordinates","setCoordinates","index","setIndex","isOn","setIsOn","success","pos","coords","concat","console","log","JSON","stringify","localStorage","setItem","end","oldLat","oldLng","i","start","havDis","unit","prev","startTime","endTime","deltaT","Math","round","error","err","warn","code","message","enableHighAccuracy","maximumAge","startWatch","navigator","geolocation","watchPosition","stopWatch","clearWatch","resume","pause","stop","reset","timerState"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport useInterval from \"../hooks/useInterval\";\r\nimport StartStopButton from \"./StartStopButton\";\r\nimport Timer from 'react-compound-timer'\r\n\r\nconst haversine = require('haversine')\r\n\r\nfunction WatchTracker() {\r\n  let id, options;\r\n\r\n  let urbanMax = 33;\r\n  let ruralMax = 55;\r\n  let motorwayMax = 80;\r\n\r\n  const [latitude, setLatitude] = useState(0);\r\n  const [longitude, setLongitude] = useState(0);\r\n  const [accuracy, setAccuracy] = useState(0);\r\n  const [gpsSpeed, setGpsSpeed] = useState(0);\r\n  const [altitude, setAltitude] = useState(0);\r\n  const [timestamp, setTimestamp] = useState(0);\r\n\r\n  const [distance, setDistance] = useState(0);\r\n  const [speed, setSpeed] = useState(0);\r\n  const [displaySpd, setDisplaySpd] = useState(0);\r\n\r\n  const [urbanDist, setUrbanDist] = useState(0);\r\n  const [ruralDist, setRuralDist] = useState(0);\r\n  const [motorwayDist, setMotorwayDist] = useState(0);\r\n\r\n  const [urbanShare, setUrbanShare] = useState(0);\r\n  const [ruralShare, setRuralShare] = useState(0);\r\n  const [motorwayShare, setMotorwayShare] = useState(0);\r\n\r\n  const [phase, setPhase] = useState(\"Pre-Test\");\r\n\r\n  const [testPass, setTestPass] = useState(\"FAIL\");\r\n\r\n  const [coordinates, setCoordinates] = useState([0, 0, 0, 0, 0, 0, 0]);\r\n\r\n  const [index, setIndex] = useState(0);\r\n\r\n  const [isOn, setIsOn] = useState(false);\r\n\r\n  function success(pos) {\r\n\r\n    setLatitude(pos.coords.latitude);\r\n    setLongitude(pos.coords.longitude);\r\n    setAccuracy(pos.coords.accuracy);\r\n    // setGpsSpeed(Math.round(pos.coords.speed * 100) / 100);\r\n    setGpsSpeed(pos.coords.speed);\r\n    setAltitude(pos.coords.altitude);\r\n    setTimestamp(pos.timestamp);\r\n\r\n  }\r\n\r\n  useInterval(() => {\r\n    setGpsSpeed((gpsSpeed === null) ? 0 : gpsSpeed); // set to 0 to mask null value\r\n    setCoordinates(\r\n      coordinates.concat(...[\r\n        latitude,\r\n        longitude,\r\n        altitude,\r\n        speed,\r\n        gpsSpeed,\r\n        timestamp,\r\n        accuracy\r\n      ])\r\n    )\r\n\r\n    if (speed === 0 && isOn === false) {\r\n      setPhase(\"Pre-Test\")\r\n    } else if (speed < urbanMax) {\r\n      setPhase(\"U\");\r\n    } else if (speed < ruralMax) {\r\n      setPhase(\"R\");\r\n    } else if (speed < motorwayMax) {\r\n      setPhase(\"M\")\r\n    } else {\r\n      setPhase(\"EXTREME\")\r\n    }\r\n\r\n    console.log(JSON.stringify(coordinates));\r\n    localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n\r\n    // log lats and longs (new):\r\n    // console.log(\"üîÉ \" + latitude)\r\n    // console.log(\"üîÅ \" + longitude)\r\n\r\n    let end = {\r\n      latitude: latitude,\r\n      longitude: longitude,\r\n    }\r\n\r\n    let oldLat = coordinates[index];\r\n    let oldLng = coordinates[index + 1];\r\n\r\n    setIndex(i => i + 7)\r\n\r\n    let start = {\r\n      latitude: oldLat,\r\n      longitude: oldLng,\r\n    }\r\n\r\n    // log lats and longs (old):\r\n    // console.log(\"üîÉold \" + start.latitude)\r\n    // console.log(\"üîÅold \" + start.longitude)\r\n\r\n    let havDis = haversine(start, end, { unit: 'km' })\r\n\r\n    if (start.latitude === 0 && start.longitude === 0) {\r\n      return\r\n    }\r\n\r\n    setDistance(prev => prev + havDis);\r\n\r\n    // log cumulative distance:\r\n    console.log(\"üí® \" + distance);\r\n\r\n    let startTime = coordinates[index - 2];\r\n    let endTime = timestamp;\r\n    let deltaT = (endTime - startTime) / 3.6e+6; // ms -> hr;\r\n    deltaT = (deltaT === 0) ? 1 : deltaT; // set to 1 to mask NaN error\r\n\r\n    console.log(\"‚è≥ \" + deltaT)\r\n\r\n    setSpeed(havDis / deltaT);\r\n    let displaySpd = Math.round((havDis / deltaT) * 10) / 10 // round to 1dp\r\n    setDisplaySpd(displaySpd);\r\n\r\n    if (speed < urbanMax) {\r\n      setUrbanDist(prev => prev + havDis);\r\n    } else if (speed < ruralMax) {\r\n      setRuralDist(prev => prev + havDis);\r\n    } else if (speed < motorwayMax) {\r\n      setMotorwayDist(prev => prev + havDis)\r\n    } else if (speed > motorwayMax) {\r\n      // console.log(\"Max Speed Exceeded!\")\r\n      setTestPass(\"FAIL\");\r\n    }\r\n\r\n    setUrbanShare(distance === 0 ? 0 : Math.round((urbanDist / distance) * 100));\r\n    setRuralShare(distance === 0 ? 0 : Math.round((ruralDist / distance) * 100));\r\n    setMotorwayShare(distance === 0 ? 0 : Math.round((motorwayDist / distance) * 100));\r\n\r\n  }, isOn ? 500 : null\r\n  )\r\n\r\n  function error(err) {\r\n    console.warn('ERROR(' + err.code + '): ' + err.message);\r\n  }\r\n\r\n  options = {\r\n    enableHighAccuracy: true,\r\n    maximumAge: 0\r\n  };\r\n\r\n  function startWatch() {\r\n    // console.log(\"Starting Watch.\")\r\n    if (\"geolocation\" in navigator && \"watchPosition\" in navigator.geolocation) {\r\n      id = navigator.geolocation.watchPosition(success, error, options);\r\n    } else {\r\n      console.log(\"Geolocation not available.\")\r\n    }\r\n  }\r\n\r\n  function stopWatch() {\r\n    // console.log(\"Stopping Watch.\");\r\n    navigator.geolocation.clearWatch(id);\r\n    setDistance(0);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>[TEST 8a]</div>\r\n      <Timer\r\n        initialTime={0}\r\n        startImmediately={false}\r\n        onStart={() => {\r\n          // console.log('onStart hook');\r\n          startWatch();\r\n          setIsOn(true);\r\n        }}\r\n        onStop={() => {\r\n          // console.log('onStop hook');\r\n          stopWatch();\r\n          setIsOn(false);\r\n          setPhase(\"Post-Test\");\r\n        }}\r\n        onReset={() => {\r\n          // console.log('onReset hook')\r\n          stopWatch();\r\n          setIsOn(false);\r\n          setCoordinates([0, 0, 0, 0, 0, 0, 0]);\r\n          setIndex(0);\r\n          setUrbanDist(0);\r\n          setRuralDist(0);\r\n          setMotorwayDist(0);\r\n          setUrbanShare(0);\r\n          setRuralShare(0);\r\n          setMotorwayShare(0);\r\n          setAccuracy(0);\r\n          setSpeed(0);\r\n          setGpsSpeed(0);\r\n          setPhase(\"Pre-Test\");\r\n          console.log(\"Reset.\")\r\n          // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n        }}\r\n      >\r\n        {({ start, resume, pause, stop, reset, timerState }) => (\r\n          <React.Fragment>\r\n            <Timer.Hours /> Hrs&nbsp;\r\n            <Timer.Minutes /> Min&nbsp;\r\n            <Timer.Seconds /> Sec&nbsp;\r\n            <StartStopButton startWatch={start} stopWatch={stop} resetWatch={reset} />\r\n            <button onClick={reset}>Reset</button>\r\n          </React.Fragment>\r\n        )}\r\n      </Timer>\r\n      <div>Speed (GPS, Derived) [km/h]:</div>\r\n      <div className=\"Data-Label\">{gpsSpeed}</div>\r\n      <div className=\"Data-Label\">{displaySpd}</div>\r\n      <div>Distance Shares (U,R,M) [km]:</div>\r\n      <div className=\"Data-Label\">{urbanDist}, {ruralDist}, {motorwayDist}</div>\r\n      <div>Trip segment (U,R,M):</div>\r\n      <div className=\"Data-Label\">\r\n        {phase}\r\n      </div>\r\n      <div>% Shares (U,R,M) [km]:</div>\r\n      <div className=\"Data-Label\">{urbanShare}, {ruralShare}, {motorwayShare}</div>\r\n      <div>GPS Accuracy [m]:</div>\r\n      <div className=\"Data-Label\">{accuracy === null ? 0 : Math.round(accuracy)}</div>\r\n      <div>Test Status (P/F):</div>\r\n      <div className=\"Data-Label\">{testPass}</div>\r\n    </React.Fragment>\r\n  )\r\n\r\n}\r\n\r\nexport default WatchTracker"]},"metadata":{},"sourceType":"module"}