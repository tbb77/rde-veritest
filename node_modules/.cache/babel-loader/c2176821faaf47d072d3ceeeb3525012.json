{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tilak\\\\OneDrive\\\\Documents\\\\GitHub\\\\pwa-for-rde-test\\\\src\\\\components\\\\WatchTrackerHooks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport useInterval from \"../hooks/useInterval\";\nimport StartStopButton from \"./StartStopButton\";\nimport Timer from 'react-compound-timer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst haversine = require('haversine');\n\nfunction WatchTracker() {\n  _s();\n\n  let id, options;\n  let urbanMax = 33;\n  let ruralMax = 55;\n  let motorwayMax = 80;\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [accuracy, setAccuracy] = useState(0);\n  const [gpsSpeed, setGpsSpeed] = useState(0);\n  const [altitude, setAltitude] = useState(0);\n  const [timestamp, setTimestamp] = useState(0);\n  const [distance, setDistance] = useState(0);\n  const [speed, setSpeed] = useState(0);\n  const [slowDist, setSlowDist] = useState(0);\n  const [mediumDist, setMediumDist] = useState(0);\n  const [fastDist, setFastDist] = useState(0);\n  const [coordinates, setCoordinates] = useState([0, 0, 0, 0, 0, 0, 0]);\n  const [index, setIndex] = useState(0);\n  const [isOn, setIsOn] = useState(false); // !!PROBLEM IN DEFINING THESE HERE - not updating in useinterval below!! Can't put inside useInterval, Tried useState but that also doesnt work\n  // let oldLat = usePrevious(latitude);\n  // let oldLng = usePrevious(longitude);\n  // let oldLat = 0;\n  // let oldLng = 0;\n  // const [oldLat, setOldLat] = useState(0);\n  // const [oldLng, setOldLng] = useState(0);\n\n  function success(pos) {\n    // oldLat = pos.coords.latitude;\n    // oldLng = pos.coords.longitude;\n    // start = {\n    //   latitude: oldLat,\n    //   longitude: oldLng,\n    // }\n    // start.latitude = oldLat;\n    // start.longitude = oldLng;\n    setLatitude(pos.coords.latitude);\n    setLongitude(pos.coords.longitude);\n    setAccuracy(pos.coords.accuracy);\n    setGpsSpeed(pos.coords.speed);\n    setAltitude(pos.coords.altitude);\n    setTimestamp(pos.timestamp);\n  } // setOldLat(latitude);\n  // setOldLng(longitude);\n\n\n  useInterval(() => {\n    setGpsSpeed(gpsSpeed === null ? 0 : gpsSpeed); // set to 0 to mask null value\n\n    setCoordinates(coordinates.concat(...[latitude, longitude, altitude, speed, gpsSpeed, timestamp, accuracy])); // console.log(JSON.stringify(coordinates));\n    // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\n    // log lats and longs (new):\n\n    console.log(\"lat:\" + latitude);\n    console.log(\"lng:\" + longitude);\n    let end = {\n      latitude: latitude,\n      longitude: longitude\n    };\n    let oldLat = coordinates[index];\n    let oldLng = coordinates[index + 1];\n    setIndex(i => i + 7);\n    let start = {\n      latitude: oldLat,\n      longitude: oldLng\n    }; // log lats and longs (old):\n\n    console.log(\"oldLat: \" + start.latitude);\n    console.log(\"oldLng: \" + start.longitude);\n    let havDis = haversine(start, end, {\n      unit: 'km'\n    });\n\n    if (start.latitude === 0 && start.longitude === 0) {\n      return;\n    }\n\n    setDistance(prev => prev + havDis); // log cumulative distance:\n\n    console.log(distance);\n    let startTime = coordinates[index + 5];\n    let endTime = timestamp;\n    let deltaT = (endTime - startTime) / 3.6e+6; // ms -> hr;\n\n    deltaT = deltaT === 0 ? 1 : deltaT; // set to 1 to mask NaN error\n\n    let roundedSpd = Math.round(havDis / deltaT * 10) / 10; // round to 1dp\n\n    setSpeed(roundedSpd);\n\n    if (speed < urbanMax) {\n      setSlowDist(prev => prev + havDis);\n    } else if (speed < ruralMax) {\n      setMediumDist(prev => prev + havDis);\n    } else if (speed < motorwayMax) {\n      setFastDist(prev => prev + havDis);\n    }\n  }, isOn ? 1000 : null);\n\n  function error(err) {\n    console.warn('ERROR(' + err.code + '): ' + err.message);\n  }\n\n  options = {\n    enableHighAccuracy: true,\n    maximumAge: 0\n  };\n\n  function startWatch() {\n    console.log(\"Starting Watch.\");\n\n    if (\"geolocation\" in navigator && \"watchPosition\" in navigator.geolocation) {\n      id = navigator.geolocation.watchPosition(success, error, options);\n    } else {\n      console.log(\"Geolocation not available.\");\n    }\n  }\n\n  function stopWatch() {\n    console.log(\"Stopping Watch.\");\n    navigator.geolocation.clearWatch(id);\n    setDistance(0);\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"[TESTS E, F]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Timer, {\n      initialTime: 0,\n      startImmediately: false,\n      onStart: () => {\n        // console.log('onStart hook');\n        startWatch();\n        setIsOn(true);\n      },\n      onStop: () => {\n        // console.log('onStop hook');\n        stopWatch();\n        setIsOn(false);\n      },\n      onReset: () => {\n        // console.log('onReset hook')\n        setIsOn(false);\n        stopWatch();\n        setCoordinates([0, 0, 0, 0, 0, 0, 0]);\n        setIndex(0);\n        console.log(\"Reset.\"); // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\n      },\n      children: ({\n        start,\n        resume,\n        pause,\n        stop,\n        reset,\n        timerState\n      }) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Timer.Hours, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this), \" Hrs\\xA0\", /*#__PURE__*/_jsxDEV(Timer.Minutes, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this), \" Min\\xA0\", /*#__PURE__*/_jsxDEV(Timer.Seconds, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this), \" Sec\\xA0\", /*#__PURE__*/_jsxDEV(StartStopButton, {\n          startWatch: start,\n          stopWatch: stop,\n          resetWatch: reset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: reset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Speed (GPS, Derived) [km/h]:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Data-Label\",\n      children: [gpsSpeed, \", \", speed]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"U Distance is\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WatchTracker, \"n/PxmMftt8bujyVSjeQHxXJCq/E=\", false, function () {\n  return [useInterval];\n});\n\n_c = WatchTracker;\nexport default WatchTracker;\n\nvar _c;\n\n$RefreshReg$(_c, \"WatchTracker\");","map":{"version":3,"sources":["C:/Users/tilak/OneDrive/Documents/GitHub/pwa-for-rde-test/src/components/WatchTrackerHooks.js"],"names":["React","useState","useInterval","StartStopButton","Timer","haversine","require","WatchTracker","id","options","urbanMax","ruralMax","motorwayMax","latitude","setLatitude","longitude","setLongitude","accuracy","setAccuracy","gpsSpeed","setGpsSpeed","altitude","setAltitude","timestamp","setTimestamp","distance","setDistance","speed","setSpeed","slowDist","setSlowDist","mediumDist","setMediumDist","fastDist","setFastDist","coordinates","setCoordinates","index","setIndex","isOn","setIsOn","success","pos","coords","concat","console","log","end","oldLat","oldLng","i","start","havDis","unit","prev","startTime","endTime","deltaT","roundedSpd","Math","round","error","err","warn","code","message","enableHighAccuracy","maximumAge","startWatch","navigator","geolocation","watchPosition","stopWatch","clearWatch","resume","pause","stop","reset","timerState"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport useInterval from \"../hooks/useInterval\";\r\nimport StartStopButton from \"./StartStopButton\";\r\nimport Timer from 'react-compound-timer'\r\n\r\nconst haversine = require('haversine')\r\n\r\nfunction WatchTracker() {\r\n  let id, options;\r\n\r\n  let urbanMax = 33;\r\n  let ruralMax = 55;\r\n  let motorwayMax = 80;\r\n\r\n  const [latitude, setLatitude] = useState(0);\r\n  const [longitude, setLongitude] = useState(0);\r\n  const [accuracy, setAccuracy] = useState(0);\r\n  const [gpsSpeed, setGpsSpeed] = useState(0);\r\n  const [altitude, setAltitude] = useState(0);\r\n  const [timestamp, setTimestamp] = useState(0);\r\n\r\n\r\n  const [distance, setDistance] = useState(0);\r\n  const [speed, setSpeed] = useState(0);\r\n\r\n  const [slowDist, setSlowDist] = useState(0);\r\n  const [mediumDist, setMediumDist] = useState(0);\r\n  const [fastDist, setFastDist] = useState(0);\r\n\r\n  const [coordinates, setCoordinates] = useState([0, 0, 0, 0, 0, 0, 0]);\r\n\r\n  const [index, setIndex] = useState(0);\r\n\r\n  const [isOn, setIsOn] = useState(false);\r\n\r\n  // !!PROBLEM IN DEFINING THESE HERE - not updating in useinterval below!! Can't put inside useInterval, Tried useState but that also doesnt work\r\n  // let oldLat = usePrevious(latitude);\r\n  // let oldLng = usePrevious(longitude);\r\n\r\n  // let oldLat = 0;\r\n  // let oldLng = 0;\r\n\r\n  // const [oldLat, setOldLat] = useState(0);\r\n  // const [oldLng, setOldLng] = useState(0);\r\n\r\n  function success(pos) {\r\n\r\n    // oldLat = pos.coords.latitude;\r\n    // oldLng = pos.coords.longitude;\r\n\r\n    // start = {\r\n    //   latitude: oldLat,\r\n    //   longitude: oldLng,\r\n    // }\r\n\r\n    // start.latitude = oldLat;\r\n    // start.longitude = oldLng;\r\n\r\n    setLatitude(pos.coords.latitude);\r\n    setLongitude(pos.coords.longitude);\r\n    setAccuracy(pos.coords.accuracy);\r\n    setGpsSpeed(pos.coords.speed);\r\n    setAltitude(pos.coords.altitude);\r\n    setTimestamp(pos.timestamp);\r\n\r\n  }\r\n\r\n  // setOldLat(latitude);\r\n  // setOldLng(longitude);\r\n\r\n  useInterval(() => {\r\n    setGpsSpeed((gpsSpeed === null) ? 0 : gpsSpeed); // set to 0 to mask null value\r\n    setCoordinates(\r\n      coordinates.concat(...[\r\n        latitude,\r\n        longitude,\r\n        altitude,\r\n        speed,\r\n        gpsSpeed,\r\n        timestamp,\r\n        accuracy\r\n      ])\r\n    )\r\n\r\n    // console.log(JSON.stringify(coordinates));\r\n    // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n\r\n    // log lats and longs (new):\r\n    console.log(\"lat:\" + latitude)\r\n    console.log(\"lng:\" + longitude)\r\n\r\n    let end = {\r\n      latitude: latitude,\r\n      longitude: longitude,\r\n    }\r\n\r\n    let oldLat = coordinates[index];\r\n    let oldLng = coordinates[index + 1];\r\n\r\n    setIndex(i => i + 7)\r\n\r\n    let start = {\r\n      latitude: oldLat,\r\n      longitude: oldLng,\r\n    }\r\n\r\n    // log lats and longs (old):\r\n    console.log(\"oldLat: \" + start.latitude)\r\n    console.log(\"oldLng: \" + start.longitude)\r\n\r\n    let havDis = haversine(start, end, { unit: 'km' })\r\n\r\n    if (start.latitude === 0 && start.longitude === 0) {\r\n      return\r\n    }\r\n\r\n    setDistance(prev => prev + havDis);\r\n\r\n    // log cumulative distance:\r\n    console.log(distance);\r\n\r\n    let startTime = coordinates[index + 5];\r\n    let endTime = timestamp;\r\n    let deltaT = (endTime - startTime) / 3.6e+6; // ms -> hr;\r\n    deltaT = (deltaT === 0) ? 1 : deltaT; // set to 1 to mask NaN error\r\n    let roundedSpd = Math.round((havDis / deltaT) * 10) / 10 // round to 1dp\r\n    setSpeed(roundedSpd);\r\n\r\n    if (speed < urbanMax) {\r\n      setSlowDist(prev => prev + havDis)\r\n  } else if (speed < ruralMax) {\r\n      setMediumDist(prev => prev + havDis)\r\n  } else if (speed < motorwayMax) {\r\n      setFastDist(prev => prev + havDis)\r\n  }\r\n\r\n  }, isOn ? 1000 : null\r\n  )\r\n\r\n  function error(err) {\r\n    console.warn('ERROR(' + err.code + '): ' + err.message);\r\n  }\r\n\r\n  options = {\r\n    enableHighAccuracy: true,\r\n    maximumAge: 0\r\n  };\r\n\r\n  function startWatch() {\r\n    console.log(\"Starting Watch.\")\r\n    if (\"geolocation\" in navigator && \"watchPosition\" in navigator.geolocation) {\r\n      id = navigator.geolocation.watchPosition(success, error, options);\r\n    } else {\r\n      console.log(\"Geolocation not available.\")\r\n    }\r\n  }\r\n\r\n  function stopWatch() {\r\n    console.log(\"Stopping Watch.\");\r\n    navigator.geolocation.clearWatch(id);\r\n    setDistance(0);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>[TESTS E, F]</div>\r\n      <Timer\r\n        initialTime={0}\r\n        startImmediately={false}\r\n        onStart={() => {\r\n          // console.log('onStart hook');\r\n          startWatch();\r\n          setIsOn(true);\r\n        }}\r\n        onStop={() => {\r\n          // console.log('onStop hook');\r\n          stopWatch();\r\n          setIsOn(false);\r\n        }}\r\n        onReset={() => {\r\n          // console.log('onReset hook')\r\n          setIsOn(false);\r\n          stopWatch();\r\n          setCoordinates([0, 0, 0, 0, 0, 0, 0]);\r\n          setIndex(0);\r\n          console.log(\"Reset.\")\r\n          // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n        }}\r\n      >\r\n        {({ start, resume, pause, stop, reset, timerState }) => (\r\n          <React.Fragment>\r\n            <Timer.Hours /> Hrs&nbsp;\r\n            <Timer.Minutes /> Min&nbsp;\r\n            <Timer.Seconds /> Sec&nbsp;\r\n            <StartStopButton startWatch={start} stopWatch={stop} resetWatch={reset} />\r\n            <button onClick={reset}>Reset</button>\r\n          </React.Fragment>\r\n        )}\r\n      </Timer>\r\n      <div>Speed (GPS, Derived) [km/h]:</div>\r\n      <div className=\"Data-Label\">{gpsSpeed}, {speed}</div>\r\n      <div>U Distance is</div>\r\n    </React.Fragment>\r\n  )\r\n\r\n}\r\n\r\nexport default WatchTracker"]},"metadata":{},"sourceType":"module"}