{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tilak\\\\OneDrive\\\\Documents\\\\GitHub\\\\pwa-for-rde-test\\\\src\\\\components\\\\Tracker.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Timer from 'react-compound-timer';\nimport StartStopButton from './StartStopButton';\nimport useInterval from '../hooks/useInterval';\nimport \"../css/tracker.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst haversine = require('haversine'); // import useSound from 'use-sound' // Leave this for adding sound notifications for later\n\n\nconst Tracker = () => {\n  _s();\n\n  const [delay] = useState(1000);\n  const [isOn, setIsOn] = useState(false);\n  const [coordinates, setCoordinates] = useState([]);\n  const [speed, setSpeed] = useState(0);\n  const [altitude, setAltitude] = useState(0);\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [timestamp, setTimestamp] = useState(0);\n  const [distance, setDistance] = useState(0);\n  const [slowDist, setSlowDist] = useState(0);\n  const [mediumDist, setMediumDist] = useState(0);\n  const [fastDist, setFastDist] = useState(0);\n  useInterval(() => {\n    if (\"geolocation\" in navigator && \"getCurrentPosition\" in navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(pos => {\n        let deltaTime = (pos.timestamp - timestamp) / 1000; // console.log(\"⏳ Time Difference: \" + deltaTime)\n        // console.log(\"🔃 Latitude Difference: \" + (pos.coords.latitude - latitude))\n        // console.log(\"🔁 Longitude Difference: \" + (pos.coords.longitude - longitude))\n\n        let start = {\n          latitude: latitude,\n          longitude: longitude\n        };\n        let end = {\n          latitude: pos.coords.latitude,\n          longitude: pos.coords.longitude\n        };\n        let havDis = haversine(start, end, {\n          unit: 'meter'\n        }); // console.log(\"💨 Distance Travelled: \" + havDis)\n\n        deltaTime = deltaTime === 0 ? 1 : deltaTime;\n        let speed = havDis / deltaTime / 1000 / 60; // console.log(\"🏎 Calculated Speed: \" + speed + \"m/s\")\n\n        setLatitude(pos.coords.latitude);\n        setLongitude(pos.coords.longitude);\n        setAltitude(pos.coords.altitude);\n        setSpeed(speed);\n        setTimestamp(pos.timestamp); // start logging\n\n        if (latitude === 0 && longitude === 0) {\n          return;\n        }\n\n        setDistance(prev => prev + havDis);\n\n        if (speed < 33) {\n          setSlowDist(prev => prev + havDis);\n        } else if (speed < 55) {\n          setMediumDist(prev => prev + havDis);\n        } else if (speed < 80) {\n          setFastDist(prev => prev + havDis);\n        }\n\n        setCoordinates(coordinates.concat([latitude, longitude, altitude, speed, timestamp]));\n        console.log(JSON.stringify(coordinates));\n        localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\n      }, () => {\n        console.log('couldnt be bothered to correctly capture the error so... here you are');\n      }, {\n        enableHighAccuracy: true,\n        maximumAge: 0\n      });\n    } else {\n      console.log(\"Geolocation not available!\");\n    }\n  }, isOn ? delay : null);\n  return /*#__PURE__*/_jsxDEV(Timer, {\n    initialTime: 0,\n    startImmediately: false,\n    onStart: () => {\n      console.log('onStart hook');\n      setIsOn(true);\n    },\n    onStop: () => {\n      console.log('onStop hook');\n      setIsOn(false);\n    },\n    onReset: () => {\n      console.log('onReset hook');\n      setIsOn(false);\n      setCoordinates([]);\n      localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\n    },\n    children: ({\n      start,\n      resume,\n      pause,\n      stop,\n      reset,\n      timerState\n    }) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Timer.Minutes, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 25\n        }, this), \" Min\\xA0\", /*#__PURE__*/_jsxDEV(Timer.Seconds, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }, this), \" Sec\\xA0\", /*#__PURE__*/_jsxDEV(Timer.Milliseconds, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }, this), \" Ms\\xA0\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(StartStopButton, {\n          startWatch: start,\n          stopWatch: stop\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: reset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Tracker, \"HxMo5b/1PGHExcXG3UtTSGnJEcQ=\", false, function () {\n  return [useInterval];\n});\n\n_c = Tracker;\nexport default Tracker;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tracker\");","map":{"version":3,"sources":["C:/Users/tilak/OneDrive/Documents/GitHub/pwa-for-rde-test/src/components/Tracker.js"],"names":["React","useState","Timer","StartStopButton","useInterval","haversine","require","Tracker","delay","isOn","setIsOn","coordinates","setCoordinates","speed","setSpeed","altitude","setAltitude","latitude","setLatitude","longitude","setLongitude","timestamp","setTimestamp","distance","setDistance","slowDist","setSlowDist","mediumDist","setMediumDist","fastDist","setFastDist","navigator","geolocation","getCurrentPosition","pos","deltaTime","start","end","coords","havDis","unit","prev","concat","console","log","JSON","stringify","localStorage","setItem","enableHighAccuracy","maximumAge","resume","pause","stop","reset","timerState"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\r\nimport Timer from 'react-compound-timer'\r\nimport StartStopButton from './StartStopButton'\r\nimport useInterval from '../hooks/useInterval'\r\nimport \"../css/tracker.css\"\r\n\r\nconst haversine = require('haversine')\r\n\r\n\r\n// import useSound from 'use-sound' // Leave this for adding sound notifications for later\r\n\r\nconst Tracker = () => {\r\n\r\n    const [delay] = useState(1000);\r\n    const [isOn, setIsOn] = useState(false)\r\n\r\n    const [coordinates, setCoordinates] = useState([]);\r\n\r\n    const [speed, setSpeed] = useState(0);\r\n    const [altitude, setAltitude] = useState(0);\r\n    const [latitude, setLatitude] = useState(0);\r\n    const [longitude, setLongitude] = useState(0);\r\n    const [timestamp, setTimestamp] = useState(0);\r\n    const [distance, setDistance] = useState(0);\r\n\r\n    const [slowDist, setSlowDist] = useState(0);\r\n    const [mediumDist, setMediumDist] = useState(0);\r\n    const [fastDist, setFastDist] = useState(0);\r\n\r\n\r\n    useInterval(() => {\r\n        if (\"geolocation\" in navigator && \"getCurrentPosition\" in navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                (pos) => {\r\n\r\n                    let deltaTime = (pos.timestamp - timestamp) / 1000\r\n                    // console.log(\"⏳ Time Difference: \" + deltaTime)\r\n                    // console.log(\"🔃 Latitude Difference: \" + (pos.coords.latitude - latitude))\r\n                    // console.log(\"🔁 Longitude Difference: \" + (pos.coords.longitude - longitude))\r\n\r\n                    let start = {\r\n                        latitude: latitude,\r\n                        longitude: longitude,\r\n                    }\r\n                    let end = {\r\n                        latitude: pos.coords.latitude,\r\n                        longitude: pos.coords.longitude,\r\n                    }\r\n\r\n                    let havDis = haversine(start, end, { unit: 'meter' })\r\n                    // console.log(\"💨 Distance Travelled: \" + havDis)\r\n\r\n                    deltaTime = (deltaTime === 0) ? 1 : deltaTime;\r\n                    let speed = (havDis / deltaTime) / 1000 / 60;\r\n                    // console.log(\"🏎 Calculated Speed: \" + speed + \"m/s\")\r\n\r\n                    setLatitude(pos.coords.latitude);\r\n                    setLongitude(pos.coords.longitude);\r\n                    setAltitude(pos.coords.altitude);\r\n                    setSpeed(speed);\r\n                    setTimestamp(pos.timestamp);\r\n\r\n                    // start logging\r\n\r\n                    if (latitude === 0 && longitude === 0) {\r\n                        return\r\n                    }\r\n\r\n                    setDistance(prev => prev + havDis)\r\n\r\n                    if (speed < 33) {\r\n                        setSlowDist(prev => prev + havDis)\r\n                    } else if (speed < 55) {\r\n                        setMediumDist(prev => prev + havDis)\r\n                    } else if (speed < 80) {\r\n                        setFastDist(prev => prev + havDis)\r\n                    }\r\n\r\n                    setCoordinates(coordinates.concat([latitude, longitude, altitude, speed, timestamp]));\r\n                    console.log(JSON.stringify(coordinates));\r\n                    localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n\r\n                },\r\n                () => { console.log('couldnt be bothered to correctly capture the error so... here you are') }\r\n                , {\r\n                    enableHighAccuracy: true,\r\n                    maximumAge: 0\r\n                });\r\n        } else {\r\n            console.log(\"Geolocation not available!\")\r\n        }\r\n    },\r\n        isOn ? delay : null,\r\n    )\r\n\r\n    return (\r\n        <Timer\r\n            initialTime={0}\r\n            startImmediately={false}\r\n            onStart={() => {\r\n                console.log('onStart hook');\r\n                setIsOn(true);\r\n            }}\r\n            onStop={() => {\r\n                console.log('onStop hook');\r\n                setIsOn(false);\r\n            }}\r\n            onReset={() => {\r\n                console.log('onReset hook')\r\n                setIsOn(false);\r\n                setCoordinates([]);\r\n                localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n            }}\r\n        >\r\n            {({ start, resume, pause, stop, reset, timerState }) => (\r\n                <React.Fragment>\r\n                    <div>\r\n                        <Timer.Minutes /> Min&nbsp;\r\n                        <Timer.Seconds /> Sec&nbsp;\r\n                        <Timer.Milliseconds /> Ms&nbsp;\r\n                    </div>\r\n\r\n                    <div>\r\n                        <StartStopButton startWatch={start} stopWatch={stop} />\r\n                        <button onClick={reset}>Reset</button>\r\n                    </div>\r\n\r\n                   \r\n\r\n                </React.Fragment>\r\n            )}\r\n        </Timer >\r\n        \r\n    )\r\n}\r\n\r\nexport default Tracker\r\n"]},"metadata":{},"sourceType":"module"}