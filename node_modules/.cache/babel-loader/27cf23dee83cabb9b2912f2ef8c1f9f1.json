{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tilak\\\\OneDrive\\\\Documents\\\\GitHub\\\\pwa-for-rde-test\\\\src\\\\components\\\\TempTracker.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport useInterval from \"../hooks/useInterval\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TempTracker() {\n  _s();\n\n  let id, options; // On off switch\n\n  const [isOn, setIsOn] = useState(false); // Data logging rate [1 Hz default]\n\n  const [delay] = useState(1000); // BC variables:\n  // let urbanMax = 33;\n  // let ruralMax = 55;\n  // let motorwayMax = 80;\n  // Output Data Array\n\n  const [coordinates, setCoordinates] = useState([]); // Output Data\n  // const [speed, setSpeed] = useState(0);\n\n  const [gpsSpeed, setGpsSpeed] = useState(0);\n  const [altitude, setAltitude] = useState(0);\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [timestamp, setTimestamp] = useState(0); // const [distance, setDistance] = useState(0);\n\n  const [accuracy, setAccuracy] = useState(0); // Trip Segment Distances\n  // const [slowDist, setSlowDist] = useState(0);\n  // const [mediumDist, setMediumDist] = useState(0);\n  // const [fastDist, setFastDist] = useState(0);\n\n  function success(pos) {\n    console.log(\"Starting Watch.\"); // // To start logging\n    // if (latitude === 0 && longitude === 0) {\n    //   return\n    // }\n    // Coordinates array data:\n\n    setLatitude(pos.coords.latitude);\n    setLongitude(pos.coords.longitude);\n    setAltitude(pos.coords.altitude);\n    setGpsSpeed(pos.coords.speed);\n    setTimestamp(pos.timestamp);\n    setAccuracy(pos.coords.accuracy);\n  }\n\n  function error(err) {\n    console.warn('ERROR(' + err.code + '): ' + err.message);\n  }\n\n  options = {\n    enableHighAccuracy: false,\n    maximumAge: 0\n  };\n\n  if (!isOn) {\n    console.log(\"Stopping Watch.\");\n    navigator.geolocation.clearWatch(id);\n  }\n\n  if (isOn === true) {\n    id = navigator.geolocation.watchPosition(success, error, options);\n  }\n\n  const startHandler = () => {\n    setIsOn(true);\n  };\n\n  const stopHandler = () => {\n    setIsOn(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startHandler,\n      children: \"start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopHandler,\n      children: \"stop\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TempTracker, \"3KWKQV+jtWMbnXin4Xr/bak4kZM=\");\n\n_c = TempTracker;\nexport default TempTracker;\n\nvar _c;\n\n$RefreshReg$(_c, \"TempTracker\");","map":{"version":3,"sources":["C:/Users/tilak/OneDrive/Documents/GitHub/pwa-for-rde-test/src/components/TempTracker.js"],"names":["useState","useInterval","TempTracker","id","options","isOn","setIsOn","delay","coordinates","setCoordinates","gpsSpeed","setGpsSpeed","altitude","setAltitude","latitude","setLatitude","longitude","setLongitude","timestamp","setTimestamp","accuracy","setAccuracy","success","pos","console","log","coords","speed","error","err","warn","code","message","enableHighAccuracy","maximumAge","navigator","geolocation","clearWatch","watchPosition","startHandler","stopHandler"],"mappings":"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","sourcesContent":["import { useState } from \"react\"\r\nimport useInterval from \"../hooks/useInterval\"\r\n\r\nfunction TempTracker() {\r\n  let id, options;\r\n\r\n  // On off switch\r\n  const [isOn, setIsOn] = useState(false);\r\n\r\n  // Data logging rate [1 Hz default]\r\n  const [delay] = useState(1000);\r\n\r\n  // BC variables:\r\n  // let urbanMax = 33;\r\n  // let ruralMax = 55;\r\n  // let motorwayMax = 80;\r\n\r\n  // Output Data Array\r\n  const [coordinates, setCoordinates] = useState([]);\r\n\r\n  // Output Data\r\n  // const [speed, setSpeed] = useState(0);\r\n  const [gpsSpeed, setGpsSpeed] = useState(0);\r\n  const [altitude, setAltitude] = useState(0);\r\n  const [latitude, setLatitude] = useState(0);\r\n  const [longitude, setLongitude] = useState(0);\r\n  const [timestamp, setTimestamp] = useState(0);\r\n  // const [distance, setDistance] = useState(0);\r\n  const [accuracy, setAccuracy] = useState(0);\r\n\r\n  // Trip Segment Distances\r\n  // const [slowDist, setSlowDist] = useState(0);\r\n  // const [mediumDist, setMediumDist] = useState(0);\r\n  // const [fastDist, setFastDist] = useState(0);\r\n\r\n  function success(pos) {\r\n    console.log(\"Starting Watch.\")\r\n\r\n    // // To start logging\r\n    // if (latitude === 0 && longitude === 0) {\r\n    //   return\r\n    // }\r\n\r\n    // Coordinates array data:\r\n    setLatitude(pos.coords.latitude);\r\n    setLongitude(pos.coords.longitude);\r\n    setAltitude(pos.coords.altitude);\r\n    setGpsSpeed(pos.coords.speed);\r\n    setTimestamp(pos.timestamp);\r\n    setAccuracy(pos.coords.accuracy);\r\n  }\r\n  \r\n  function error(err) {\r\n    console.warn('ERROR(' + err.code + '): ' + err.message);\r\n  }\r\n  \r\n  options = {\r\n    enableHighAccuracy: false,\r\n    maximumAge: 0\r\n  };  \r\n\r\n  if (!isOn) {\r\n    console.log(\"Stopping Watch.\");\r\n    navigator.geolocation.clearWatch(id);\r\n  }\r\n\r\n  if (isOn === true) {\r\n    id = navigator.geolocation.watchPosition(success, error, options);\r\n  }\r\n\r\n  const startHandler = () => {\r\n    setIsOn(true);\r\n  }\r\n\r\n  const stopHandler = () => {\r\n    setIsOn(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={startHandler}>start</button>\r\n      <button onClick={stopHandler}>stop</button>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default TempTracker"]},"metadata":{},"sourceType":"module"}