{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tilak\\\\OneDrive\\\\Documents\\\\GitHub\\\\pwa-for-rde-test\\\\src\\\\components\\\\WatchTrackerHooks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport useInterval from \"../hooks/useInterval\";\nimport StartStopButton from \"./StartStopButton\";\nimport Timer from 'react-compound-timer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst haversine = require('haversine');\n\nfunction WatchTracker() {\n  _s();\n\n  let id, options;\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [accuracy, setAccuracy] = useState(0);\n  const [gpsSpeed, setGpsSpeed] = useState(0);\n  const [altitude, setAltitude] = useState(0);\n  const [timestamp, setTimestamp] = useState(0);\n  const [distance, setDistance] = useState(0);\n  const [speed, setSpeed] = useState(0);\n  const [coordinates, setCoordinates] = useState([0, 0, 0, 0, 0, 0, 0]);\n  const [index, setIndex] = useState(0);\n  const [isOn, setIsOn] = useState(false); // !!PROBLEM IN DEFINING THESE HERE - not updating in useinterval below!! Can't put inside useInterval, Tried useState but that also doesnt work\n  // let oldLat = usePrevious(latitude);\n  // let oldLng = usePrevious(longitude);\n  // let oldLat = 0;\n  // let oldLng = 0;\n  // const [oldLat, setOldLat] = useState(0);\n  // const [oldLng, setOldLng] = useState(0);\n\n  function success(pos) {\n    // oldLat = pos.coords.latitude;\n    // oldLng = pos.coords.longitude;\n    // start = {\n    //   latitude: oldLat,\n    //   longitude: oldLng,\n    // }\n    // start.latitude = oldLat;\n    // start.longitude = oldLng;\n    setLatitude(pos.coords.latitude);\n    setLongitude(pos.coords.longitude);\n    setAccuracy(pos.coords.accuracy);\n    setGpsSpeed(pos.coords.speed);\n    setAltitude(pos.coords.altitude);\n    setTimestamp(pos.timestamp);\n  } // setOldLat(latitude);\n  // setOldLng(longitude);\n\n\n  useInterval(() => {\n    setCoordinates(coordinates.concat(...[latitude, longitude, altitude, speed, gpsSpeed, timestamp, accuracy])); // console.log(JSON.stringify(coordinates));\n    // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\n    // log lats and longs (new):\n\n    console.log(\"lat:\" + latitude);\n    console.log(\"lng:\" + longitude);\n    let end = {\n      latitude: latitude,\n      longitude: longitude\n    };\n    let oldLat = coordinates[index];\n    let oldLng = coordinates[index + 1];\n    setIndex(i => i + 7);\n    let start = {\n      latitude: oldLat,\n      longitude: oldLng\n    }; // log lats and longs (old):\n\n    console.log(\"oldLat: \" + start.latitude);\n    console.log(\"oldLng: \" + start.longitude);\n    let havDis = haversine(start, end, {\n      unit: 'km'\n    });\n    setDistance(prev => prev + havDis); // log cumulative distance:\n\n    console.log(distance);\n  }, isOn ? 1000 : null);\n\n  function error(err) {\n    console.warn('ERROR(' + err.code + '): ' + err.message);\n  }\n\n  options = {\n    enableHighAccuracy: true,\n    maximumAge: 0\n  };\n\n  function startWatch() {\n    console.log(\"Starting Watch.\");\n\n    if (\"geolocation\" in navigator && \"watchPosition\" in navigator.geolocation) {\n      id = navigator.geolocation.watchPosition(success, error, options);\n    } else {\n      console.log(\"Geolocation not available.\");\n    }\n  }\n\n  function stopWatch() {\n    console.log(\"Stopping Watch.\");\n    navigator.geolocation.clearWatch(id);\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"[TESTS E, F]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Timer, {\n      initialTime: 0,\n      startImmediately: false,\n      onStart: () => {\n        console.log('onStart hook');\n        startWatch();\n        setIsOn(true);\n      },\n      onStop: () => {\n        console.log('onStop hook');\n        stopWatch();\n        setIsOn(false);\n      },\n      onReset: () => {\n        console.log('onReset hook');\n        setIsOn(false);\n        setCoordinates([0, 0, 0, 0, 0, 0, 0]);\n        setIndex(0); // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\n      },\n      children: ({\n        start,\n        resume,\n        pause,\n        stop,\n        reset,\n        timerState\n      }) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Timer.Hours, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this), \" Hrs\\xA0\", /*#__PURE__*/_jsxDEV(Timer.Minutes, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this), \" Min\\xA0\", /*#__PURE__*/_jsxDEV(Timer.Seconds, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this), \" Sec\\xA0\", /*#__PURE__*/_jsxDEV(StartStopButton, {\n          startWatch: start,\n          stopWatch: stop\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: reset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WatchTracker, \"wljkl24n7l2USsk1+akjLLu/iDc=\", false, function () {\n  return [useInterval];\n});\n\n_c = WatchTracker;\nexport default WatchTracker;\n\nvar _c;\n\n$RefreshReg$(_c, \"WatchTracker\");","map":{"version":3,"sources":["C:/Users/tilak/OneDrive/Documents/GitHub/pwa-for-rde-test/src/components/WatchTrackerHooks.js"],"names":["React","useState","useInterval","StartStopButton","Timer","haversine","require","WatchTracker","id","options","latitude","setLatitude","longitude","setLongitude","accuracy","setAccuracy","gpsSpeed","setGpsSpeed","altitude","setAltitude","timestamp","setTimestamp","distance","setDistance","speed","setSpeed","coordinates","setCoordinates","index","setIndex","isOn","setIsOn","success","pos","coords","concat","console","log","end","oldLat","oldLng","i","start","havDis","unit","prev","error","err","warn","code","message","enableHighAccuracy","maximumAge","startWatch","navigator","geolocation","watchPosition","stopWatch","clearWatch","resume","pause","stop","reset","timerState"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport useInterval from \"../hooks/useInterval\";\r\nimport StartStopButton from \"./StartStopButton\";\r\nimport Timer from 'react-compound-timer'\r\n\r\nconst haversine = require('haversine')\r\n\r\nfunction WatchTracker() {\r\n  let id, options;\r\n\r\n  const [latitude, setLatitude] = useState(0);\r\n  const [longitude, setLongitude] = useState(0);\r\n  const [accuracy, setAccuracy] = useState(0);\r\n  const [gpsSpeed, setGpsSpeed] = useState(0);\r\n  const [altitude, setAltitude] = useState(0);\r\n  const [timestamp, setTimestamp] = useState(0);\r\n\r\n\r\n  const [distance, setDistance] = useState(0);\r\n  const [speed, setSpeed] = useState(0);\r\n\r\n\r\n  const [coordinates, setCoordinates] = useState([0, 0, 0, 0, 0, 0, 0]);\r\n\r\n  const [index, setIndex] = useState(0);\r\n\r\n  const [isOn, setIsOn] = useState(false);\r\n\r\n  // !!PROBLEM IN DEFINING THESE HERE - not updating in useinterval below!! Can't put inside useInterval, Tried useState but that also doesnt work\r\n  // let oldLat = usePrevious(latitude);\r\n  // let oldLng = usePrevious(longitude);\r\n\r\n  // let oldLat = 0;\r\n  // let oldLng = 0;\r\n\r\n  // const [oldLat, setOldLat] = useState(0);\r\n  // const [oldLng, setOldLng] = useState(0);\r\n\r\n  function success(pos) {\r\n\r\n    // oldLat = pos.coords.latitude;\r\n    // oldLng = pos.coords.longitude;\r\n\r\n    // start = {\r\n    //   latitude: oldLat,\r\n    //   longitude: oldLng,\r\n    // }\r\n\r\n    // start.latitude = oldLat;\r\n    // start.longitude = oldLng;\r\n\r\n    setLatitude(pos.coords.latitude);\r\n    setLongitude(pos.coords.longitude);\r\n    setAccuracy(pos.coords.accuracy);\r\n    setGpsSpeed(pos.coords.speed);\r\n    setAltitude(pos.coords.altitude);\r\n    setTimestamp(pos.timestamp);\r\n\r\n  }\r\n\r\n  // setOldLat(latitude);\r\n  // setOldLng(longitude);\r\n\r\n  useInterval(() => {\r\n    setCoordinates(\r\n      coordinates.concat(...[\r\n        latitude,\r\n        longitude,\r\n        altitude,\r\n        speed,\r\n        gpsSpeed,\r\n        timestamp,\r\n        accuracy\r\n      ])\r\n    )\r\n\r\n    // console.log(JSON.stringify(coordinates));\r\n    // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n\r\n    // log lats and longs (new):\r\n    console.log(\"lat:\" + latitude)\r\n    console.log(\"lng:\" + longitude)\r\n\r\n    let end = {\r\n      latitude: latitude,\r\n      longitude: longitude,\r\n    }\r\n\r\n    let oldLat = coordinates[index];\r\n    let oldLng = coordinates[index + 1];\r\n\r\n    setIndex(i => i + 7)\r\n\r\n    let start = {\r\n      latitude: oldLat,\r\n      longitude: oldLng,\r\n    }\r\n\r\n    // log lats and longs (old):\r\n    console.log(\"oldLat: \" + start.latitude)\r\n    console.log(\"oldLng: \" + start.longitude)\r\n\r\n    let havDis = haversine(start, end, { unit: 'km' })\r\n\r\n    setDistance(prev => prev + havDis);\r\n\r\n    // log cumulative distance:\r\n    console.log(distance);\r\n\r\n  }, isOn ? 1000 : null\r\n  )\r\n\r\n  function error(err) {\r\n    console.warn('ERROR(' + err.code + '): ' + err.message);\r\n  }\r\n\r\n  options = {\r\n    enableHighAccuracy: true,\r\n    maximumAge: 0\r\n  };\r\n\r\n  function startWatch() {\r\n    console.log(\"Starting Watch.\")\r\n    if (\"geolocation\" in navigator && \"watchPosition\" in navigator.geolocation) {\r\n      id = navigator.geolocation.watchPosition(success, error, options);\r\n    } else {\r\n      console.log(\"Geolocation not available.\")\r\n    }\r\n  }\r\n\r\n  function stopWatch() {\r\n    console.log(\"Stopping Watch.\");\r\n    navigator.geolocation.clearWatch(id);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>[TESTS E, F]</div>\r\n      <Timer\r\n        initialTime={0}\r\n        startImmediately={false}\r\n        onStart={() => {\r\n          console.log('onStart hook');\r\n          startWatch();\r\n          setIsOn(true);\r\n        }}\r\n        onStop={() => {\r\n          console.log('onStop hook');\r\n          stopWatch();\r\n          setIsOn(false);\r\n        }}\r\n        onReset={() => {\r\n          console.log('onReset hook')\r\n          setIsOn(false);\r\n          setCoordinates([0, 0, 0, 0, 0, 0, 0]);\r\n          setIndex(0);\r\n          // localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n        }}\r\n      >\r\n        {({ start, resume, pause, stop, reset, timerState }) => (\r\n          <React.Fragment>\r\n            <Timer.Hours /> Hrs&nbsp;\r\n            <Timer.Minutes /> Min&nbsp;\r\n            <Timer.Seconds /> Sec&nbsp;\r\n            <StartStopButton startWatch={start} stopWatch={stop} />\r\n            <button onClick={reset}>Reset</button>\r\n          </React.Fragment>\r\n        )}\r\n      </Timer>\r\n    </React.Fragment>\r\n  )\r\n\r\n}\r\n\r\nexport default WatchTracker"]},"metadata":{},"sourceType":"module"}