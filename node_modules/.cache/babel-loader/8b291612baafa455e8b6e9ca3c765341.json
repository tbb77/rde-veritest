{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tilak\\\\OneDrive\\\\Documents\\\\GitHub\\\\pwa-for-rde-test\\\\src\\\\components\\\\Tracker.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Timer from 'react-compound-timer';\nimport StartStopButton from './StartStopButton';\nimport useInterval from '../hooks/useInterval';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst haversine = require('haversine'); // import useSound from 'use-sound' // Leave this for adding sound notifications for later\n\n\nconst Tracker = () => {\n  _s();\n\n  const [delay] = useState(1000);\n  const [isOn, setIsOn] = useState(false);\n  const [coordinates, setCoordinates] = useState([]);\n  const [speed, setSpeed] = useState(0);\n  const [altitude, setAltitude] = useState(0);\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [timestamp, setTimestamp] = useState(0);\n  const [distance, setDistance] = useState(0);\n  const [slow, setSlow] = useState(0);\n  const [medium, setMedium] = useState(0);\n  const [fast, setast] = useState(0);\n  const [high, setHigh] = useState(0);\n  useEffect(() => {\n    console.log(`Latitude Updated: ${latitude}`);\n  }, [latitude]);\n  useEffect(() => {\n    console.log(`Longitude Updated: ${longitude}`);\n  }, [longitude]);\n  useInterval(() => {\n    if (\"geolocation\" in navigator && \"getCurrentPosition\" in navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(pos => {\n        let deltaTime = (pos.timestamp - timestamp) / 1000;\n        console.log(\"⏳ Time Difference: \" + deltaTime);\n        console.log(\"🔃 Latitude Difference: \" + (pos.coords.latitude - latitude));\n        console.log(\"🔁 Longitude Difference: \" + (pos.coords.longitude - longitude));\n        let start = {\n          latitude: latitude,\n          longitude: longitude\n        };\n        let end = {\n          latitude: pos.coords.latitude,\n          longitude: pos.coords.longitude\n        };\n        let havDis = haversine(start, end, {\n          unit: 'meter'\n        });\n        console.log(\"💨 Distance Travelled: \" + havDis);\n        setDistance(prev => prev + havDis);\n        deltaTime = deltaTime === 0 ? 1 : deltaTime;\n        let speed = havDis / deltaTime;\n        console.log(\"🏎 Calculated Speed: \" + speed + \"m/s\");\n        setLatitude(pos.coords.latitude);\n        setLongitude(pos.coords.longitude);\n        setAltitude(pos.coords.altitude);\n        setSpeed(speed);\n        setTimestamp(pos.timestamp);\n        setCoordinates(coordinates.concat([latitude, longitude, altitude, speed, timestamp]));\n        console.log(JSON.stringify(coordinates));\n        localStorage.setItem(\"coordinates\", JSON.stringify(coordinates)); // TODO: calculate distance:\n      }, () => {\n        console.log('couldnt be bothered to correctly capture the error so... here you are');\n      }, {\n        enableHighAccuracy: true,\n        maximumAge: 0\n      });\n    } else {\n      console.log(\"Geolocation not available!\");\n    }\n  }, isOn ? delay : null);\n  return /*#__PURE__*/_jsxDEV(Timer, {\n    initialTime: 0,\n    startImmediately: false,\n    onStart: () => {\n      console.log('onStart hook');\n      setIsOn(true);\n    },\n    onStop: () => {\n      console.log('onStop hook');\n      setIsOn(false);\n    },\n    onReset: () => {\n      console.log('onReset hook');\n      setIsOn(false);\n      setCoordinates([]);\n      localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\n    },\n    children: ({\n      start,\n      resume,\n      pause,\n      stop,\n      reset,\n      timerState\n    }) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Timer.Hours, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this), \" Hrs\\xA0\", /*#__PURE__*/_jsxDEV(Timer.Minutes, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }, this), \" Min\\xA0\", /*#__PURE__*/_jsxDEV(Timer.Seconds, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this), \" Sec\\xA0\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(StartStopButton, {\n          startWatch: start,\n          stopWatch: stop\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: reset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \" ------------- RAW DATA: ------------- \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"speed is: \", speed, \" [km/h]\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"altitude is: \", altitude, \" [m]\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"latitude is: \", latitude, \" [\\xB0]\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"longitude is: \", longitude, \" [\\xB0]\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \" ------------- BC VERIFICATION: ------------- \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"cumulative distance is: ___ [km]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"trip segment is: ____ [U/R/M]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"U share is: ____ [%]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"R share is: ____ [%]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"M share is: ____ [%]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"U distance share is: ____ [km]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"R distance share is: ____ [km]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"M distance share is: ____ [km]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Tracker, \"uP571OMOjGPL287JtZhYJCth8XI=\", false, function () {\n  return [useInterval];\n});\n\n_c = Tracker;\nexport default Tracker;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tracker\");","map":{"version":3,"sources":["C:/Users/tilak/OneDrive/Documents/GitHub/pwa-for-rde-test/src/components/Tracker.js"],"names":["React","useState","useEffect","Timer","StartStopButton","useInterval","haversine","require","Tracker","delay","isOn","setIsOn","coordinates","setCoordinates","speed","setSpeed","altitude","setAltitude","latitude","setLatitude","longitude","setLongitude","timestamp","setTimestamp","distance","setDistance","slow","setSlow","medium","setMedium","fast","setast","high","setHigh","console","log","navigator","geolocation","getCurrentPosition","pos","deltaTime","coords","start","end","havDis","unit","prev","concat","JSON","stringify","localStorage","setItem","enableHighAccuracy","maximumAge","resume","pause","stop","reset","timerState"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nimport Timer from 'react-compound-timer'\r\nimport StartStopButton from './StartStopButton'\r\nimport useInterval from '../hooks/useInterval'\r\nconst haversine = require('haversine')\r\n\r\n// import useSound from 'use-sound' // Leave this for adding sound notifications for later\r\n\r\nconst Tracker = () => {\r\n\r\n    const [delay] = useState(1000);\r\n    const [isOn, setIsOn] = useState(false)\r\n\r\n    const [coordinates, setCoordinates] = useState([]);\r\n\r\n    const [speed, setSpeed] = useState(0);\r\n    const [altitude, setAltitude] = useState(0);\r\n    const [latitude, setLatitude] = useState(0);\r\n    const [longitude, setLongitude] = useState(0);\r\n    const [timestamp, setTimestamp] = useState(0);\r\n    const [distance, setDistance] = useState(0);\r\n\r\n    const [slow, setSlow] = useState(0)\r\n    const [medium, setMedium] = useState(0)\r\n    const [fast, setast] = useState(0)\r\n    const [high, setHigh] = useState(0)\r\n\r\n    useEffect(() => {\r\n        console.log(`Latitude Updated: ${latitude}`)\r\n    }, [latitude])\r\n\r\n    useEffect(() => {\r\n        console.log(`Longitude Updated: ${longitude}`)\r\n    }, [longitude])\r\n\r\n    useInterval(() => {\r\n        if (\"geolocation\" in navigator && \"getCurrentPosition\" in navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                (pos) => {\r\n\r\n                    let deltaTime = (pos.timestamp - timestamp) / 1000\r\n                    console.log(\"⏳ Time Difference: \" + deltaTime)\r\n\r\n                    console.log(\"🔃 Latitude Difference: \" + (pos.coords.latitude - latitude))\r\n                    console.log(\"🔁 Longitude Difference: \" + (pos.coords.longitude - longitude))\r\n\r\n                    let start = {\r\n                        latitude: latitude,\r\n                        longitude: longitude,\r\n                    }\r\n                    let end = {\r\n                        latitude: pos.coords.latitude,\r\n                        longitude: pos.coords.longitude,\r\n                    }\r\n\r\n                    let havDis = haversine(start, end, { unit: 'meter' })\r\n                    console.log(\"💨 Distance Travelled: \" + havDis)\r\n                    setDistance(prev => prev + havDis)\r\n\r\n                    deltaTime = (deltaTime === 0) ? 1 : deltaTime;\r\n                    let speed = havDis / deltaTime;\r\n                    console.log(\"🏎 Calculated Speed: \" + speed + \"m/s\")\r\n\r\n\r\n                    setLatitude(pos.coords.latitude);\r\n                    setLongitude(pos.coords.longitude);\r\n                    setAltitude(pos.coords.altitude);\r\n                    setSpeed(speed);\r\n                    setTimestamp(pos.timestamp);\r\n\r\n\r\n                    setCoordinates(coordinates.concat([latitude, longitude, altitude, speed, timestamp]));\r\n                    console.log(JSON.stringify(coordinates));\r\n                    localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n\r\n                    // TODO: calculate distance:\r\n\r\n                },\r\n                () => { console.log('couldnt be bothered to correctly capture the error so... here you are') }\r\n                , {\r\n                    enableHighAccuracy: true,\r\n                    maximumAge: 0\r\n                });\r\n        } else {\r\n            console.log(\"Geolocation not available!\")\r\n        }\r\n    },\r\n        isOn ? delay : null,\r\n    )\r\n\r\n\r\n    return (\r\n        <Timer\r\n            initialTime={0}\r\n            startImmediately={false}\r\n            onStart={() => {\r\n                console.log('onStart hook');\r\n                setIsOn(true);\r\n            }}\r\n            onStop={() => {\r\n                console.log('onStop hook');\r\n                setIsOn(false);\r\n            }}\r\n            onReset={() => {\r\n                console.log('onReset hook')\r\n                setIsOn(false);\r\n                setCoordinates([]);\r\n                localStorage.setItem(\"coordinates\", JSON.stringify(coordinates));\r\n            }}\r\n        >\r\n            {({ start, resume, pause, stop, reset, timerState }) => (\r\n                <React.Fragment>\r\n                    <div>\r\n                        <Timer.Hours /> Hrs&nbsp;\r\n                        <Timer.Minutes /> Min&nbsp;\r\n                        <Timer.Seconds /> Sec&nbsp;\r\n                    </div>\r\n\r\n                    <div>\r\n                        <StartStopButton startWatch={start} stopWatch={stop} />\r\n                        <button onClick={reset}>Reset</button>\r\n                    </div>\r\n\r\n                    <div> ------------- RAW DATA: ------------- </div>\r\n                    <div>speed is: {speed} [km/h]</div>\r\n                    <div>altitude is: {altitude} [m]</div>\r\n                    <div>latitude is: {latitude} [&deg;]</div>\r\n                    <div>longitude is: {longitude} [&deg;]</div>\r\n                    <div> ------------- BC VERIFICATION: ------------- </div>\r\n                    <div>cumulative distance is: ___ [km]</div>\r\n                    <div>trip segment is: ____ [U/R/M]</div>\r\n                    <div>U share is: ____ [%]</div>\r\n                    <div>R share is: ____ [%]</div>\r\n                    <div>M share is: ____ [%]</div>\r\n                    <div>U distance share is: ____ [km]</div>\r\n                    <div>R distance share is: ____ [km]</div>\r\n                    <div>M distance share is: ____ [km]</div>\r\n\r\n                </React.Fragment>\r\n            )}\r\n        </Timer >\r\n    )\r\n}\r\n\r\nexport default Tracker\r\n"]},"metadata":{},"sourceType":"module"}